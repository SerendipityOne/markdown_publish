{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/","title":"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_2","title":"\u4e00\u3001\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u5185\u5bb9\u4ecb\u7ecd","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#11","title":"1.1 \u51e0\u4e2a\u7ecf\u5178\u7b97\u6cd5\u9762\u8bd5\u9898","text":"<ul> <li>\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898\uff1a</li> </ul> <p>\u200b   1)\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 str1= \"\"\u7845\u7845\u8c37 \u5c1a\u7845\u8c37\u4f60\u5c1a\u7845 \u5c1a\u7845\u8c37\u4f60\u5c1a\u7845\u8c37\u4f60\u5c1a\u7845\u4f60\u597d\"\"\uff0c\u548c\u4e00\u4e2a\u5b50\u4e32 str2=\"\u5c1a\u7845\u8c37\u4f60\u5c1a\u7845\u4f60\"</p> <p>\u200b   2)\u73b0\u5728\u8981\u5224\u65ad str1 \u662f\u5426\u542b\u6709 str2, \u5982\u679c\u5b58\u5728\uff0c\u5c31\u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e, \u5982\u679c\u6ca1\u6709\uff0c\u5219\u8fd4\u56de-1</p> <p>\u200b   3)\u8981\u6c42\u7528\u6700\u5feb\u7684\u901f\u5ea6\u6765\u5b8c\u6210\u5339\u914d</p> <p>\u200b   4)\u4f60\u7684\u601d\u8def\u662f\u4ec0\u4e48\uff1f</p> <p>\u200b   \u66b4\u529b\u5339\u914d\uff08\u7b80\u5355\uff0c\u4f46\u662f\u6548\u7387\u4f4e\uff09</p> <p>\u200b   KMP\u7b97\u6cd5\u300a\u90e8\u5206\u5339\u914d\u8868\u300b</p> <ul> <li>\u6c49\u8bfa\u5854\u6e38\u620f,</li> </ul> <p>\u8bf7\u5b8c\u6210\u6c49\u8bfa\u5854\u6e38\u620f\u7684\u4ee3\u7801: \u8981\u6c42\uff1a1) \u5c06A\u5854\u7684\u6240\u6709\u5706\u76d8\u79fb\u52a8\u5230C\u5854\u3002\u5e76\u4e14\u89c4\u5b9a\uff0c\u57282) \u5c0f\u5706\u76d8\u4e0a\u4e0d\u80fd\u653e\u5927\u5706\u76d8\uff0c3)\u5728\u4e09\u6839\u67f1\u5b50\u4e4b\u95f4\u4e00\u6b21\u53ea\u80fd\u79fb\u52a8\u4e00\u4e2a\u5706\u76d8</p> <p>\u8bf7\u5b8c\u6210\u6c49\u8bfa\u5854\u6e38\u620f\u7684\u4ee3\u7801: \u8981\u6c42\uff1a1) \u5c06A\u5854\u7684\u6240\u6709\u5706\u76d8\u79fb\u52a8\u5230C\u5854\u3002\u5e76\u4e14\u89c4\u5b9a\uff0c\u57282) \u5c0f\u5706\u76d8\u4e0a\u4e0d\u80fd\u653e\u5927\u5706\u76d8\uff0c3)\u5728\u4e09\u6839\u67f1\u5b50\u4e4b\u95f4\u4e00\u6b21\u53ea\u80fd\u79fb\u52a8\u4e00\u4e2a\u5706\u76d8</p> <p></p> <p>\u200b   \u4f7f\u7528\u5206\u6cbb\u7b97\u6cd5</p> <ul> <li>\u516b\u7687\u540e\u95ee\u9898\uff1a</li> </ul> <p>\u516b\u7687\u540e\u95ee\u9898\uff0c\u662f\u4e00\u4e2a\u53e4\u8001\u800c\u8457\u540d\u7684\u95ee\u9898\uff0c\u662f\u56de\u6eaf\u7b97\u6cd5\u7684\u5178\u578b\u6848\u4f8b\u3002\u8be5\u95ee\u9898\u662f\u56fd\u9645\u897f\u6d0b\u68cb\u68cb\u624b\u9a6c\u514b\u65af\u00b7\u8d1d\u745f\u5c14\u4e8e1848\u5e74\u63d0\u51fa\uff1a\u57288\u00d78\u683c\u7684\u56fd\u9645\u8c61\u68cb\u4e0a\u6446\u653e\u516b\u4e2a\u7687\u540e\uff0c\u4f7f\u5176\u4e0d\u80fd\u4e92\u76f8\u653b\u51fb\uff0c\u5373\uff1a\u4efb\u610f\u4e24\u4e2a\u7687\u540e\u90fd\u4e0d\u80fd\u5904\u4e8e\u540c\u4e00\u884c\u3001\u540c\u4e00\u5217\u6216\u540c\u4e00\u659c\u7ebf\u4e0a\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u6446\u6cd5\u3002\u301092\u3011</p> <p></p> <p>\u4f7f\u7528\u5230\u56de\u6eaf\u7b97\u6cd5</p> <ul> <li>\u9a6c\u8e0f\u68cb\u76d8\u7b97\u6cd5\uff1a</li> </ul> <p>\u9a6c\u8e0f\u68cb\u76d8\u7b97\u6cd5\u4ecb\u7ecd\u548c\u6e38\u620f\u6f14\u793a</p> <p>1)\u9a6c\u8e0f\u68cb\u76d8\u7b97\u6cd5\u4e5f\u88ab\u79f0\u4e3a\u9a91\u58eb\u5468\u6e38\u95ee\u9898</p> <p>2)\u5c06\u9a6c\u968f\u673a\u653e\u5728\u56fd\u9645\u8c61\u68cb\u76848\u00d78\u68cb\u76d8Board[0\uff5e7][0\uff5e7]\u7684\u67d0\u4e2a\u65b9\u683c\u4e2d\uff0c\u9a6c\u6309\u8d70\u68cb\u89c4\u5219(\u9a6c\u8d70\u65e5\u5b57)\u8fdb\u884c\u79fb\u52a8\u3002\u8981\u6c42\u6bcf\u4e2a\u65b9\u683c\u53ea\u8fdb\u5165\u4e00\u6b21\uff0c\u8d70\u904d\u68cb\u76d8\u4e0a\u5168\u90e864\u4e2a\u65b9\u683c</p> <p>3)\u4f1a\u4f7f\u7528\u5230\u56fe\u7684\u6df1\u5ea6\u4f18\u5316\u904d\u5386\u7b97\u6cd5(DFS) + \u8d2a\u5fc3\u7b97\u6cd5\u4f18\u5316</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_3","title":"\u4e8c\u3001\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u6982\u8ff0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#21","title":"2.1 \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u5173\u7cfb","text":"<ul> <li>\u6570\u636e(data)\u7ed3\u6784(structure)\u662f\u4e00\u95e8\u7814\u7a76\u7ec4\u7ec7\u6570\u636e\u65b9\u5f0f\u7684\u5b66\u79d1\uff0c\u6709\u4e86\u7f16\u7a0b\u8bed\u8a00\u4e5f\u5c31\u6709\u4e86\u6570\u636e\u7ed3\u6784.\u5b66\u597d\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u7f16\u5199\u51fa\u66f4\u52a0\u6f02\u4eae,\u66f4\u52a0\u6709\u6548\u7387\u7684\u4ee3\u7801\u3002</li> <li>\u8981\u5b66\u4e60\u597d\u6570\u636e\u7ed3\u6784\u5c31\u8981\u591a\u591a\u8003\u8651\u5982\u4f55\u5c06\u751f\u6d3b\u4e2d\u9047\u5230\u7684\u95ee\u9898,\u7528\u7a0b\u5e8f\u53bb\u5b9e\u73b0\u89e3\u51b3.</li> <li>\u7a0b\u5e8f = \u6570\u636e\u7ed3\u6784 + \u7b97\u6cd5</li> <li>\u6570\u636e\u7ed3\u6784\u662f\u7b97\u6cd5\u7684\u57fa\u7840, \u6362\u8a00\u4e4b\uff0c\u60f3\u8981\u5b66\u597d\u7b97\u6cd5\uff0c\u9700\u8981\u628a\u6570\u636e\u7ed3\u6784\u5b66\u5230\u4f4d\u3002</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#22","title":"2.2 \u51e0\u4e2a\u5341\u4e00\u7f16\u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898","text":"<ul> <li>\u5b57\u7b26\u4e32\u66ff\u6362\u95ee\u9898</li> </ul> <p>\u5c0f\u7ed3\uff1a\u9700\u8981\u4f7f\u7528\u5355\u94fe\u8868</p> <ul> <li>\u4e94\u5b50\u68cb\u7a0b\u5e8f</li> </ul> <p></p> <p>\u200b           \u5982\u4f55\u5224\u65ad\u6e38\u620f\u7684\u8f93\u8d62\uff0c\u5e76\u53ef\u4ee5\u5b8c\u6210\u5b58\u76d8\u9000\u51fa\u548c\u7ee7\u7eed\u4e0a\u5c40\u7684\u529f\u80fd</p> <p>\u200b           \u68cb\u76d8  \u4e8c\u7ef4\u6570\u7ec4=&gt;(\u7a00\u758f\u6570\u7ec4)-&gt; \u5199\u5165\u6587\u4ef6 \u3010\u5b58\u6863\u529f\u80fd\u3011</p> <p>\u200b           \u8bfb\u53d6\u6587\u4ef6-\u300b\u7a00\u758f\u6570\u7ec4-\u300b\u4e8c\u7ef4\u6570\u7ec4 -\u300b \u68cb\u76d8 \u3010\u63a5\u4e0a\u5c40\u3011</p> <ul> <li> <p>\u7ea6\u745f\u592b(Josephu)\u95ee\u9898(\u4e22\u624b\u5e15\u95ee\u9898)</p> </li> <li> <p>Josephu \u95ee\u9898\u4e3a\uff1a\u8bbe\u7f16\u53f7\u4e3a1\uff0c2\uff0c\u2026 n\u7684n\u4e2a\u4eba\u56f4\u5750\u4e00\u5708\uff0c\u7ea6\u5b9a\u7f16\u53f7\u4e3ak\uff081&lt;=k&lt;=n\uff09\u7684\u4eba\u4ece1\u5f00\u59cb\u62a5\u6570\uff0c\u6570\u5230m \u7684\u90a3\u4e2a\u4eba\u51fa\u5217\uff0c\u5b83\u7684\u4e0b\u4e00\u4f4d\u53c8\u4ece1\u5f00\u59cb\u62a5\u6570\uff0c\u6570\u5230m\u7684\u90a3\u4e2a\u4eba\u53c8\u51fa\u5217\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6240\u6709\u4eba\u51fa\u5217\u4e3a\u6b62\uff0c\u7531\u6b64\u4ea7\u751f\u4e00\u4e2a\u51fa\u961f\u7f16\u53f7\u7684\u5e8f\u5217\u3002</p> </li> <li> <p>\u63d0\u793a\uff1a\u7528\u4e00\u4e2a\u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u5faa\u73af\u94fe\u8868\u6765\u5904\u7406Josephu \u95ee\u9898\uff1a\u5148\u6784\u6210\u4e00\u4e2a\u6709n\u4e2a\u7ed3\u70b9\u7684\u5355\u5faa\u73af\u94fe\u8868\uff08\u5355\u5411\u73af\u5f62\u94fe\u8868\uff09\uff0c\u7136\u540e\u7531k\u7ed3\u70b9\u8d77\u4ece1\u5f00\u59cb\u8ba1\u6570\uff0c\u8ba1\u5230m\u65f6\uff0c\u5bf9\u5e94\u7ed3\u70b9\u4ece\u94fe\u8868\u4e2d\u5220\u9664\uff0c\u7136\u540e\u518d\u4ece\u88ab\u5220\u9664\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u53c8\u4ece1\u5f00\u59cb\u8ba1\u6570\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u7b97\u6cd5\u7ed3\u675f\u3002</p> </li> <li> <p>\u5c0f\u7ed3\uff1a\u5b8c\u6210\u7ea6\u745f\u592b\u95ee\u9898\uff0c\u9700\u8981\u7528\u5230\u5355\u5411\u73af\u5f62\u94fe\u8868\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784</p> </li> <li> <p>\u5176\u4ed6\u5e38\u89c1\u7b97\u6cd5\u95ee\u9898\uff1a</p> </li> </ul> <p></p> <ul> <li>\u4fee\u8def\u95ee\u9898 =&gt; \u6700\u5c0f\u751f\u6210\u6811(\u52a0\u6743\u503c)\u3010\u6570\u636e\u7ed3\u6784\u3011+ \u666e\u5229\u59c6\u7b97\u6cd5</li> <li>\u6700\u77ed\u8def\u5f84\u95ee\u9898 =&gt; \u56fe+\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5</li> <li>\u6c49\u8bfa\u5854 =&gt; \u5206\u652f\u7b97\u6cd5</li> <li>\u516b\u7687\u540e\u95ee\u9898 =&gt; \u56de\u6eaf\u6cd5</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#23","title":"2.3 \u7ebf\u6027\u7ed3\u6784\u548c\u975e\u7ebf\u6027\u7ed3\u6784","text":"<ul> <li>\u7ebf\u6027\u7ed3\u6784\uff1a</li> <li>\u7ebf\u6027\u7ed3\u6784\u4f5c\u4e3a\u6700\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u7279\u70b9\u662f\u6570\u636e\u5143\u7d20\u4e4b\u95f4\u5b58\u5728\u4e00\u5bf9\u4e00\u7684\u7ebf\u6027\u5173\u7cfb</li> <li>\u7ebf\u6027\u7ed3\u6784\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u5373\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u548c\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784\u3002\u987a\u5e8f\u5b58\u50a8\u7684\u7ebf\u6027\u8868\u79f0\u4e3a\u987a\u5e8f\u8868\uff0c\u987a\u5e8f\u8868\u4e2d\u7684\u5b58\u50a8\u5143\u7d20\u662f\u8fde\u7eed\u7684</li> <li>\u94fe\u5f0f\u5b58\u50a8\u7684\u7ebf\u6027\u8868\u79f0\u4e3a\u94fe\u8868\uff0c\u94fe\u8868\u4e2d\u7684\u5b58\u50a8\u5143\u7d20\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff0c\u5143\u7d20\u8282\u70b9\u4e2d\u5b58\u653e\u6570\u636e\u5143\u7d20\u4ee5\u53ca\u76f8\u90bb\u5143\u7d20\u7684\u5730\u5740\u4fe1\u606f</li> <li> <p>\u7ebf\u6027\u7ed3\u6784\u5e38\u89c1\u7684\u6709\uff1a\u6570\u7ec4\u3001\u961f\u5217\u3001\u94fe\u8868\u548c\u6808</p> </li> <li> <p>\u975e\u7ebf\u6027\u7ed3\u6784\uff1a</p> </li> <li>\u975e\u7ebf\u6027\u7ed3\u6784\u5305\u62ec\uff1a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u591a\u7ef4\u6570\u7ec4\uff0c\u5e7f\u4e49\u8868\uff0c\u6811\u7ed3\u6784\uff0c\u56fe\u7ed3\u6784</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_4","title":"\u4e09\u3001\u7a00\u758f\u6570\u7ec4\u548c\u961f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#31-sparsearray","title":"3.1 \u7a00\u758fsparsearray\u6570\u7ec4","text":"<ul> <li> <p>\u57fa\u672c\u4ecb\u7ecd\uff1a</p> </li> <li> <p>\u5f53\u4e00\u4e2a\u6570\u7ec4\u4e2d\u5927\u90e8\u5206\u5143\u7d20\u4e3a0\uff0c\u6216\u8005\u4e3a\u540c\u4e00\u4e2a\u503c\u7684\u6570\u7ec4\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u7a00\u758f\u6570\u7ec4\u6765\u4fdd\u5b58\u8be5\u6570\u7ec4</p> </li> <li> <p>\u7a00\u758f\u6570\u7ec4\u7684\u5904\u7406\u65b9\u6cd5\uff1a</p> <ul> <li>\u8bb0\u5f55\u6570\u7ec4\u4e00\u5171\u6709\u51e0\u884c\u51e0\u5217\uff0c\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u503c</li> <li>\u628a\u5177\u6709\u4e0d\u540c\u503c\u7684\u5143\u7d20\u7684\u884c\u5217\u53ca\u503c\u8bb0\u5f55\u5728\u4e00\u4e2a\u5c0f\u89c4\u6a21\u7684\u6570\u7ec4\u4e2d\uff0c\u4ece\u800c\u7f29\u5c0f\u7a0b\u5e8f\u7684\u89c4\u6a21</li> </ul> </li> <li> <p>\u4e3e\u4f8b\u8bf4\u660e\uff1a</p> </li> </ul> <p></p> <ul> <li> <p>\u5e94\u7528\u5b9e\u4f8b\uff1a</p> </li> <li> <p>\u4f7f\u7528\u7a00\u758f\u6570\u7ec4\uff0c\u4fdd\u7559\u7c7b\u4f3c\u524d\u9762\u7684\u4e8c\u7ef4\u6570\u7ec4\uff08\u68cb\u76d8\u3001\u5730\u56fe\u7b49\uff09</p> </li> <li> <p>\u628a\u7a00\u758f\u6570\u7ec4\u5b58\u76d8\uff0c\u5e76\u4e14\u53ef\u4ee5\u91cd\u65b0\u6062\u590d\u539f\u6765\u7684\u4e8c\u7ef4\u6570\u7ec4</p> <p></p> </li> <li> <p>\u4e8c\u7ef4\u6570\u7ec4 \u8f6c \u7a00\u758f\u6570\u7ec4\u7684\u601d\u8def\uff1a</p> <ol> <li>\u904d\u5386\u539f\u59cb\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5f97\u5230\u6709\u6548\u6570\u636e\u7684\u4e2a\u6570 sum</li> <li>\u6839\u636esum\u5c31\u53ef\u4ee5\u521b\u5efa\u7a00\u758f\u6570\u7ec4sparseArr int[sum+1] [3]</li> <li>\u5c06\u4e8c\u7ef4\u6570\u7ec4\u7684\u6709\u6548\u6570\u636e\u5b58\u5165\u5230\u7a00\u758f\u6570\u7ec4</li> </ol> </li> <li> <p>\u7a00\u758f\u6570\u7ec4 \u8f6c \u539f\u59cb\u4e8c\u7ef4\u6570\u7ec4\uff1a</p> <ol> <li>\u5148\u8bfb\u53d6\u7a00\u758f\u6570\u7ec4\u7684\u7b2c\u4e00\u884c\uff0c\u6839\u636e\u7b2c\u4e00\u884c\u7684\u6570\u636e\uff0c\u521b\u5efa\u539f\u59cb\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u6bd4\u5982\u4e0a\u9762\u7684chessArr = int [11] [11]</li> <li>\u518d\u8bfb\u53d6\u7a00\u758f\u6570\u7ec4\u540e\u51e0\u884c\u7684\u6570\u636e\uff0c\u5e76\u8d4b\u503c\u7ed9\u539f\u59cb\u7684\u4e8c\u7ef4\u6570\u7ec4</li> </ol> </li> </ul> <p>\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>```java   /*    * \u7a00\u758f\u6570\u7ec4    * \u4f7f\u7528\u7a00\u758f\u6570\u7ec4\uff0c\u4fdd\u7559\u7c7b\u4f3c\u524d\u9762\u7684\u4e8c\u7ef4\u6570\u7ec4\uff08\u68cb\u76d8\u3001\u5730\u56fe\u7b49\uff09    * \u628a\u7a00\u758f\u6570\u7ec4\u5b58\u76d8\uff0c\u5e76\u4e14\u53ef\u4ee5\u91cd\u65b0\u6062\u590d\u539f\u6765\u7684\u4e8c\u7ef4\u6570\u7ec4    /   public class SparseArr {       public static void main(String[] args) {           //1\u8868\u793a\u9ed1\u5b50\uff0c2\u8868\u793a\u84dd\u5b50\uff0c0\u8868\u793a\u65e0\u68cb\u5b50           int[][] chessArr1 = new int[11][11];           chessArr1[1][2] = 1;           chessArr1[2][3] = 2;</p> <pre><code>      /**\n       * \u4e8c\u7ef4\u6570\u7ec4 \u8f6c \u7a00\u758f\u6570\u7ec4\n       * 1. \u904d\u5386\u539f\u59cb\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5f97\u5230\u6709\u6548\u6570\u636e\u7684\u4e2a\u6570 sum\n       * 2. \u6839\u636esum\u5c31\u53ef\u4ee5\u521b\u5efa\u7a00\u758f\u6570\u7ec4sparseArr int[sum+1] [3]\n       * 3. \u5c06\u4e8c\u7ef4\u6570\u7ec4\u7684\u6709\u6548\u6570\u636e\u5b58\u5165\u5230\u7a00\u758f\u6570\u7ec4\n       */\n      int sum = 0;\n      for (int[] arr : chessArr1) {\n          for (int item : arr) {\n              System.out.printf(\"%d\\t\", item);\n              if (item != 0) {\n                  sum++;\n              }\n          }\n          System.out.println();\n      }\n      System.out.println(sum);\n\n      //\u521b\u5efa\u7a00\u758f\u6570\u7ec4\n      int[][] sparseArr = new int[sum + 1][3];\n      sparseArr[0][0] = chessArr1.length;\n      sparseArr[0][1] = chessArr1[0].length;\n      sparseArr[0][2] = sum;\n      //\u5c06\u539f\u59cb\u6570\u7ec4\u975e0\u6570\u636e\u5b58\u5165\u7a00\u758f\u6570\u7ec4\u4e2d\n      int count = 0;\n      for (int i = 0; i &lt; chessArr1.length; i++) {\n          for (int j = 0; j &lt; chessArr1[i].length; j++) {\n              if (chessArr1[i][j] != 0) {\n                  count++;\n                  sparseArr[count][0] = i;\n                  sparseArr[count][1] = j;\n                  sparseArr[count][2] = chessArr1[i][j];\n\n              }\n          }\n      }\n\n      System.out.println();\n      System.out.println(\"\u7a00\u758f\u6570\u7ec4===========\");\n      for (int[] arr : sparseArr) {\n          for (int item : arr) {\n              System.out.printf(\"%d\\t\", item);\n          }\n          System.out.println();\n      }\n\n\n      /**\n       * \u7528BufferedWriter\u5199\u5165\u7a00\u758f\u6570\u7ec4\u5230\u78c1\u76d8\u4e2d\n       */\n      BufferedWriter writer = null;\n      try {\n          writer = new BufferedWriter(new FileWriter(\"data-structure/src/sparsearr/map.data\"));\n          for (int[] ints : sparseArr) {\n              String str = ints[0] + \" \" + ints[1] + \" \" + ints[2] + \"\\n\";\n              writer.write(str);\n          }\n          writer.flush();\n      } catch (IOException e) {\n          throw new RuntimeException(e);\n      } finally {\n          if (writer != null) {\n              try {\n                  writer.close();\n              } catch (IOException e) {\n                  throw new RuntimeException(e);\n              }\n          }\n      }\n\n\n      /**\n       * \u5c06\u7a00\u758f\u6570\u7ec4\u8fd8\u539f\u6210\u4e8c\u7ef4\u6570\u7ec4\n       * 1. \u5148\u8bfb\u53d6\u7a00\u758f\u6570\u7ec4\u7684\u7b2c\u4e00\u884c\uff0c\u6839\u636e\u7b2c\u4e00\u884c\u7684\u6570\u636e\uff0c\u521b\u5efa\u539f\u59cb\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u6bd4\u5982\u4e0a\u9762\u7684chessArr = int [11] [11]\n       * 2. \u518d\u8bfb\u53d6\u7a00\u758f\u6570\u7ec4\u540e\u51e0\u884c\u7684\u6570\u636e\uff0c\u5e76\u8d4b\u503c\u7ed9\u539f\u59cb\u7684\u4e8c\u7ef4\u6570\u7ec4\n       */\n\n      /**\n       * \u7528BufferedReader\u8bfb\u53d6sparse.data\u4e2d\u7684\u6570\u636e\n       */\n      BufferedReader reader = null;\n      int[][] chessArr2 = null;\n      try {\n          reader = new BufferedReader(new FileReader(\"data-structure/src/sparsearr/map.data\"));\n          //\u5c06\u7b2c\u4e00\u884c\u6570\u636e\u8bfb\u53d6\u51fa\u6765\uff0c\u5e76\u4e14\u5206\u5272\n          String[] temp = reader.readLine().split(\" \");\n          chessArr2 = new int[Integer.parseInt(temp[0])][Integer.parseInt(temp[1])];\n          String str;\n          //\u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u8bfb\u53d6\uff0c\n          while ((str = reader.readLine()) != null) {\n              /**\n               * \u5c06\u8bfb\u53d6\u5230\u7684\u6570\u636e\u5206\u5272\u540e\u5f97\u5230String\u6570\u7ec4\n               * temp[0]\u5c31\u662f\u539f\u6570\u7ec4\u6709\u6548\u6570\u636e\u7684\u884c\u6570\uff0ctemp[1]\u5c31\u662f\u539f\u6570\u7ec4\u6709\u6548\u6570\u636e\u7684\u5217\u6570\uff0ctemp[2]\u5c31\u662f\u6709\u6548\u6570\u636e\u7684\u6570\u503c\n               */\n              temp = str.split(\" \");\n              chessArr2[Integer.parseInt(temp[0])][Integer.parseInt(temp[1])] = Integer.parseInt(temp[2]);\n          }\n      } catch (IOException e) {\n          throw new RuntimeException(e);\n      } finally {\n          if (reader != null) {\n              try {\n                  reader.close();\n              } catch (IOException e) {\n                  throw new RuntimeException(e);\n              }\n          }\n      }\n\n\n      System.out.println();\n      System.out.println(\"\u6062\u590d\u540e\u7684\u4e8c\u7ef4\u6570\u7ec4=========\");\n      for (int[] arr : chessArr2) {\n          for (int item : arr) {\n              System.out.printf(\"%d\\t\", item);\n          }\n          System.out.println();\n      }\n  }\n</code></pre> <p>}   ```</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#32","title":"3.2 \u961f\u5217","text":"<p>\u4f7f\u7528\u573a\u666f\uff1a\u94f6\u884c\u6392\u961f\u7684\u6848\u4f8b</p> <p></p> <p>\u961f\u5217\u4ecb\u7ecd\uff1a</p> <ol> <li> <p>\u961f\u5217\u662f\u4e00\u4e2a\u6709\u5e8f\u961f\u5217\uff0c\u53ef\u4ee5\u7528\u6570\u7ec4\u6216\u662f\u94fe\u8868\u6765\u5b9e\u73b0</p> </li> <li> <p>\u9075\u5faa\u5148\u5165\u5148\u51fa\u7684\u539f\u5219\u3002\u5373\uff1a\u5148\u5b58\u5165\u961f\u5217\u7684\u6570\u636e\uff0c\u8981\u5148\u53d6\u51fa\u3002\u540e\u5b58\u5165\u7684\u8981\u540e\u53d6\u51fa</p> </li> </ol> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#321","title":"3.2.1 \u6570\u7ec4\u6a21\u62df\u961f\u5217\u601d\u8def\uff1a","text":"<ul> <li> <p>\u961f\u5217\u672c\u8eab\u662f\u6709\u5e8f\u961f\u5217\uff0c\u82e5\u4f7f\u7528\u6570\u7ec4\u7684\u7ed3\u6784\u6765\u5b58\u50a8\u961f\u5217\u7684\u6570\u636e\uff0c\u5219\u961f\u5217\u6570\u7ec4\u7684\u58f0\u660e\u5982\u4e0b\u56fe\uff0c\u5176\u4e2dmaxSize\u662f\u8be5\u961f\u5217\u7684\u6700\u5927\u5bb9\u91cf</p> </li> <li> <p>\u56e0\u4e3a\u961f\u5217\u7684\u8f93\u51fa\u3001\u8f93\u5165\u662f\u5206\u522b\u4ece\u524d\u540e\u7aef\u6765\u5904\u7406\uff0c\u56e0\u6b64\u9700\u8981\u4e24\u4e2a\u53d8\u91cffront\u4ee5\u53carear\u5206\u522b\u8bb0\u5f55\u961f\u5217\u524d\u540e\u7aef\u7684\u4e0b\u6807\uff0cfront\u4f1a\u968f\u7740\u6570\u636e\u8f93\u51fa\u800c\u6539\u53d8\uff0c\u800crear\u5219\u662f\u968f\u7740\u6570\u636e\u7684\u8f93\u5165\u800c\u6539\u53d8\uff0c\u5982\u56fe\uff1a</p> </li> </ul> <p></p> <ul> <li> <p>\u5f53\u6211\u4eec\u5c06\u6570\u636e\u5b58\u5165\u961f\u5217\u65f6\u79f0\u4e3a\u201caddQueue\u201d\uff0caddQueue\u7684\u5904\u7406\u9700\u8981\u6709\u4e24\u4e2a\u6b65\u9aa4\uff1a</p> </li> <li> <p>\u5c06\u5c3e\u6307\u9488\u5f80\u540e\u79fb\uff1arear+1\uff0c\u5f53front==rear [\u7a7a]</p> </li> <li> <p>\u82e5\u5c3e\u6307\u9488rear\u5c0f\u4e8e\u961f\u5217\u7684\u6700\u5927\u4e0b\u6807maxSize-1\uff0c\u5219\u5c06\u6570\u636e\u5b58\u5165rear\u6240\u6307\u7684\u6570\u7ec4\u5143\u7d20\u4e2d\uff0c\u5426\u5219\u65e0\u6cd5\u5b58\u5165\u6570\u636e\u3002</p> <p>rear==maxSize-1 [\u961f\u5217\u6ee1]</p> </li> </ul> <p>\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>public class ArrayQueue {\n    private final int maxSize;    //\u6570\u7ec4\u7684\u6700\u5927\u5bb9\u91cf\n    private int front;      //\u6307\u5411\u6570\u7ec4\u7684\u5934\u90e8\n    private int rear;       //\u6307\u5411\u6570\u7ec4\u7684\u5c3e\u90e8\n    private final int[] arr;      //\u7528\u4e8e\u5b58\u653e\u6570\u636e\uff0c\u6a21\u62df\u961f\u5217\n\n    public ArrayQueue(int maxSize) {\n        this.maxSize = maxSize;\n        front = -1; //\u6307\u5411\u5934\u90e8\uff0c\u521d\u59cb\u5316\u961f\u5217\uff0c\u65e0\u6570\u636e\n        rear = -1;  //\u6307\u5411\u5c3e\u90e8\n        arr = new int[maxSize];\n    }\n\n    /**\n     * \u5224\u65ad\u961f\u5217\u662f\u5426\u6ee1\n     */\n    public boolean isFull() {\n        return rear == maxSize - 1;\n    }\n\n    /**\n     * \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\n     */\n    public boolean isEmpty() {\n        return front == rear;\n    }\n\n    /**\n     * \u5f80\u961f\u5217\u4e2d\u6dfb\u52a0\u6570\u636e\n     */\n    public void addQueue(int data) {\n        if (isFull()) {\n            throw new RuntimeException(\"\u961f\u5217\u5df2\u6ee1\uff0c\u65e0\u6cd5\u6dfb\u52a0\u6570\u636e\");\n        }\n        rear++;\n        arr[rear] = data;\n    }\n\n    /**\n     * \u53d6\u51fa\u961f\u5217\u6570\u636e\n     */\n    public int getQueue() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"\u961f\u5217\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u53d6\u51fa\u6570\u636e\");\n        }\n        front++;\n        return arr[front];\n    }\n\n    /**\n     * \u663e\u793a\u961f\u5217\u7684\u5168\u90e8\u6570\u636e\n     */\n    public void showQueue() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"\u961f\u5217\u4e3a\u7a7a\");\n        }\n        for (int i = front + 1; i &lt;= rear; i++) {\n            System.out.printf(\"arr[%d]=%d\\n\", i, arr[i]);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u961f\u5217\u5934\n     */\n    public int getHead() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"\u961f\u5217\u4e3a\u7a7a\");\n        }\n        return arr[front + 1];\n    }\n\n}\n</code></pre> <p>\u95ee\u9898\u5206\u6790\u5e76\u4f18\u5316\uff1a</p> <ol> <li>\u76ee\u524d\u6570\u7ec4\u4f7f\u7528\u4e00\u6b21\u5c31\u4e0d\u80fd\u518d\u4f7f\u7528\uff0c\u6ca1\u6709\u8fbe\u5230\u590d\u7528\u7684\u6548\u679c</li> <li>\u5c06\u8fd9\u4e2a\u6570\u7ec4\u4f7f\u7528\u7b97\u6cd5\uff0c\u6539\u8fdb\u6210\u4e00\u4e2a\u73af\u5f62\u7684\u961f\u5217  \u53d6\u6a21\uff1a%</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#322","title":"3.2.2 \u6570\u7ec4\u6a21\u62df\u73af\u5f62\u961f\u5217","text":"<p>\u5bf9\u524d\u9762\u7684\u6570\u7ec4\u6a21\u62df\u961f\u5217\u7684\u4f18\u5316\uff0c\u5145\u5206\u5229\u7528\u6570\u7ec4\uff0c\u56e0\u6b64\u5c06\u6570\u7ec4\u770b\u505a\u662f\u4e00\u4e2a\u73af\u5f62\u7684\uff08\u901a\u8fc7\u53d6\u6a21\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\uff09</p> <p>\u5206\u6790\uff1a</p> <ol> <li>\u5c3e\u7d22\u5f15\u7684\u4e0b\u4e00\u4e2a\u4e3a\u5934\u7d22\u5f15\u65f6\u8868\u793a\u961f\u5217\u6ee1\uff0c\u5373\u5c06\u961f\u5217\u5bb9\u91cf\u7a7a\u51fa\u4e00\u4e2a\u4f5c\u4e3a\u7ea6\u5b9a\uff0c\u8fd9\u4e2a\u5728\u505a\u5224\u65ad\u961f\u5217\u6ee1\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f</li> </ol> <p>(rear + 1) % maxSize == front [\u6ee1]</p> <ol> <li>rear == front  [\u7a7a]</li> </ol> <p>\u601d\u8def\uff1a</p> <ol> <li>front\u53d8\u91cf\u7684\u542b\u4e49\u505a\u4e00\u4e2a\u8c03\u6574\uff1afront\u5c31\u6307\u5411\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4e5f\u5c31\u662f\u8bf4arr[front]\u5c31\u662f\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20</li> </ol> <p>front\u7684\u521d\u59cb\u503c=0</p> <ol> <li>rear\u53d8\u91cf\u7684\u542b\u4e49\u505a\u4e00\u4e2a\u8c03\u6574\uff1arear\u6307\u5411\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u9700\u8981\u7a7a\u51fa\u4e00\u4e2a\u7a7a\u95f4\u4f5c\u4e3a\u7ea6\u5b9a</li> </ol> <p>rear\u7684\u521d\u59cb\u503c=0</p> <ol> <li> <p>\u5f53\u961f\u5217\u6ee1\u65f6\uff0c\u6761\u4ef6\u662f\uff1a(rear + 1) % maxSize == front [\u6ee1]</p> </li> <li> <p>\u5f53\u961f\u5217\u7a7a\uff0c\u6761\u4ef6\u662f\uff1arear == front</p> </li> <li> <p>\u961f\u5217\u4e2d\u6709\u6548\u6570\u636e\u7684\u4e2a\u6570\uff1a(rear + maxSize - front) % maxSize</p> </li> </ol> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>public class CircleArrayQueue {\n    private final int maxSize;    //\u6570\u7ec4\u7684\u6700\u5927\u5bb9\u91cf\n    //front\u5c31\u6307\u5411\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4e5f\u5c31\u662f\u8bf4arr[front]\u5c31\u662f\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    //front\u7684\u521d\u59cb\u503c=0\n    private int front;\n    //rear\u6307\u5411\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u9700\u8981\u7a7a\u51fa\u4e00\u4e2a\u7a7a\u95f4\u4f5c\u4e3a\u7ea6\u5b9a\n    //rear\u7684\u521d\u59cb\u503c=0\n    private int rear;\n    private final int[] arr;      //\u7528\u4e8e\u5b58\u653e\u6570\u636e\uff0c\u6a21\u62df\u961f\u5217\n\n    public CircleArrayQueue(int maxSize) {\n        this.maxSize = maxSize;\n        arr = new int[maxSize];\n        front = 0;\n        rear = 0;\n    }\n\n    /**\n     * \u5224\u65ad\u961f\u5217\u662f\u5426\u6ee1\n     */\n    public boolean isFull() {\n        return (rear + 1) % maxSize == front;\n    }\n\n    /**\n     * \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\n     */\n    public boolean isEmpty() {\n        return front == rear;\n    }\n\n    /**\n     * \u5f80\u961f\u5217\u4e2d\u6dfb\u52a0\u6570\u636e\n     */\n    public void addQueue(int data) {\n        if (isFull()) {\n            throw new RuntimeException(\"\u961f\u5217\u5df2\u6ee1\uff0c\u65e0\u6cd5\u6dfb\u52a0\u6570\u636e\");\n        }\n        arr[rear] = data;\n        rear = (rear + 1) % maxSize;\n    }\n\n    /**\n     * \u53d6\u51fa\u961f\u5217\u6570\u636e\n     */\n    public int getQueue() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"\u961f\u5217\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u53d6\u51fa\u6570\u636e\");\n        }\n        //\u53d6\u51fa\u961f\u5217\u7b2c\u4e00\u4e2a\u6570\u636e\n        //\u5148\u5c06\u7b2c\u4e00\u4e2a\u6570\u636e\u7528temp\u5b58\u653e\u8d77\u6765\uff0c\u7136\u540e\n        int temp = arr[front];\n        front = (front + 1) % maxSize;\n        return  temp;\n    }\n\n    /**\n     * \u663e\u793a\u961f\u5217\u7684\u5168\u90e8\u6570\u636e\n     */\n    public void showQueue() {\n        if (isEmpty()) {\n            System.out.println(\"\u961f\u5217\u4e3a\u7a7a\");\n            return;\n        }\n        for (int i = front; i &lt; front + size(); i++) {\n            System.out.printf(\"arr[%d]=%d\\n\", i % maxSize, arr[i % maxSize]);\n        }\n    }\n\n    /**\n     * \u961f\u5217\u6709\u6548\u6570\u636e\u7684\u4e2a\u6570\n     */\n    public int size(){\n        return (rear + maxSize - front) % maxSize;\n    }\n\n    /**\n     * \u83b7\u53d6\u961f\u5217\u5934\n     */\n    public int getHead() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"\u961f\u5217\u4e3a\u7a7a\");\n        }\n        return arr[front];\n    }\n}\n\n\u6d4b\u8bd5\u5982\u4e0b\uff1a\npublic class CircleArrayQueueTest {\n    public static void main(String[] args) {\n        CircleArrayQueue queue = new CircleArrayQueue(4);   //\u5b9e\u9645\u4e0a\u6709\u6548\u6570\u636e\u53ea\u80fd\u653e3\u4e2a\uff0c\u6709\u4e00\u4e2a\u662f\u7559\u51fa\u6765\u505a\u7ea6\u5b9a\u7684\n        Scanner sc = new Scanner(System.in);\n        char key = ' '; //\u63a5\u53d7\u7528\u6237\u8f93\u5165\n        while (true) {\n            System.out.println(\"s(show)\uff1a\u663e\u793a\u961f\u5217\");\n            System.out.println(\"e(exit)\uff1a\u9000\u51fa\u7a0b\u5e8f\");\n            System.out.println(\"a(add)\uff1a\u6dfb\u52a0\u6570\u636e\u5230\u961f\u5217\");\n            System.out.println(\"g(get)\uff1a\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u6570\u636e\");\n            System.out.println(\"h(head)\uff1a\u67e5\u770b\u961f\u5217\u5934\u6570\u636e\");\n            key = sc.next().charAt(0);\n            if (key == 's') {\n                queue.showQueue();\n            } else if (key == 'a') {\n                System.out.println(\"\u8bf7\u8f93\u5165\u8981\u6dfb\u52a0\u7684\u6570\u5b57:\");\n                queue.addQueue(sc.nextInt());\n            } else if (key == 'g') {\n                System.out.println(queue.getQueue());\n            } else if (key == 'h') {\n                System.out.println(queue.getHead());\n            } else if (key == 'e') {\n                break;\n            } else {\n                System.out.println(\"\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u5b57\u6bcd\");\n            }\n\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_5","title":"\u56db\u3001\u94fe\u8868","text":"<p>\u94fe\u8868(Linked List)\u4ecb\u7ecd </p> <p>\u94fe\u8868\u662f\u6709\u5e8f\u7684\u5217\u8868\uff0c\u4f46\u662f\u5b83\u5728\u5185\u5b58\u4e2d\u662f\u5b58\u50a8\u5982\u4e0b</p> <p></p> <p>\u5c0f\u7ed3\uff1a</p> <ol> <li> <p>\u94fe\u8868\u662f\u4ee5\u8282\u70b9\u7684\u65b9\u5f0f\u6765\u5b58\u50a8\u7684\uff0c\u662f\u94fe\u5f0f\u5b58\u50a8</p> </li> <li> <p>\u6bcf\u4e2a\u8282\u70b9\u5305\u542bdata\u57df\u3001next\u57df\uff1a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9</p> </li> <li> <p>\u5982\u56fe\uff1a\u53d1\u4fe1\u554a\u94fe\u8868\u7684\u5404\u4e2a\u8282\u70b9\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u5b58\u50a8</p> </li> <li> <p>\u94fe\u8868\u5206\u5e26\u5934\u8282\u70b9\u7684\u94fe\u8868\u548c\u6ca1\u6709\u5934\u7ed3\u70b9\u7684\u94fe\u8868\uff0c\u6839\u636e\u5b9e\u9645\u7684\u9700\u6c42\u6765\u786e\u5b9a</p> </li> </ol> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#41","title":"4.1 \u5355\u94fe\u8868\u7684\u5e94\u7528\u5b9e\u4f8b","text":"<p>\u4f7f\u7528\u5e26 head \u5934\u7684\u5355\u5411\u94fe\u8868\u5b9e\u73b0 \u2013\u6c34\u6d52\u82f1\u96c4\u6392\u884c\u699c\u7ba1\u7406\u5b8c\u6210\u5bf9\u82f1\u96c4\u4eba\u7269\u7684\u589e\u5220\u6539\u67e5\u64cd\u4f5c</p> <ul> <li> <p>\u6dfb\u52a0\uff1a</p> </li> <li> <p>\u7b2c\u4e00\u79cd\u65b9\u6cd5\u5728\u6dfb\u52a0\u82f1\u96c4\u65f6\uff0c\u76f4\u63a5\u6dfb\u52a0\u5230\u94fe\u8868\u7684\u5c3e\u90e8</p> </li> </ul> <p>\u6dfb\u52a0\u601d\u8def\uff1a</p> <ol> <li>\u5148\u521b\u5efa\u4e00\u4e2ahead\u5934\u8282\u70b9\uff0c\u4f5c\u7528\u5c31\u662f\u8868\u793a\u5355\u94fe\u8868\u7684\u5934</li> <li>\u540e\u9762\u6bcf\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u76f4\u63a5\u52a0\u5165\u5230\u94fe\u8868\u7684\u6700\u540e</li> </ol> <p>\u904d\u5386\uff1a</p> <p>\u901a\u8fc7\u4e00\u4e2a\u8f85\u52a9\u7684\u53d8\u91cf\u904d\u5386\uff0c\u5e2e\u52a9\u904d\u5386\u6574\u4e2a\u94fe\u8868</p> <p></p> <ul> <li>\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5728\u6dfb\u52a0\u82f1\u96c4\u65f6\uff0c\u6839\u636e\u6392\u540d\u5c06\u82f1\u96c4\u63d2\u5165\u5230\u6307\u5b9a\u4f4d\u7f6e(\u5982\u679c\u6709\u8fd9\u4e2a\u6392\u540d\uff0c\u5219\u6dfb\u52a0\u5931\u8d25\uff0c\u5e76\u7ed9\u51fa\u63d0\u793a)</li> </ul> <p>\u601d\u8def\uff1a</p> <ol> <li>\u9996\u5148\u627e\u5230\u65b0\u6dfb\u52a0\u7684\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u901a\u8fc7\u8f85\u52a9\u53d8\u91cf\u904d\u5386\u6765\u786e\u5b9a</li> <li>\u65b0\u7684\u8282\u70b9.next = temp.next</li> <li>\u5c06temp.next = \u65b0\u8282\u70b9</li> </ol> <p></p> <ul> <li> <p>\u4fee\u6539\u8282\u70b9</p> </li> <li> <p>\u601d\u8def\uff1a</p> <ol> <li> <p>\u901a\u8fc7\u904d\u5386\uff0c\u627e\u5230\u8be5\u8282\u70b9</p> </li> <li> <p>temp.name = newNode.name;</p> </li> </ol> <p>temp.nickName = newNode.nickname;</p> </li> <li> <p>\u5220\u9664\u8282\u70b9</p> </li> <li> <p>\u601d\u8def\uff1a</p> <ol> <li> <p>\u627e\u5230\u8be5\u8282\u70b9</p> </li> <li> <p>temp.next = temp.next.next</p> </li> <li> <p>\u88ab\u5220\u9664\u7684\u8282\u70b9\u5c06\u4e0d\u4f1a\u6709\u5176\u4ed6\u5f15\u7528\u6307\u5411\uff0c\u4f1a\u88ab\u5783\u573e\u56de\u6536\u673a\u5236\u56de\u6536</p> </li> </ol> <p></p> </li> </ul> <p>\u5168\u90e8\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>/**\n * \u5355\u94fe\u8868\n */\npublic class SingleLinkedList {\n    private final SingleLinkedListNode head = new SingleLinkedListNode();\n\n    /**\n     * \u6dfb\u52a0\u8282\u70b9\u5230\u5355\u5411\u94fe\u8868\n     * \u5f53\u4e0d\u8003\u8651\u7f16\u53f7\u987a\u5e8f\u65f6\uff1b\n     * 1\u3001\u627e\u5230\u5f53\u524d\u8282\u70b9\u7684\u6700\u540e\u8282\u70b9\n     * 2\u3001\u5c06\u6700\u540e\u8282\u70b9\u7684next\u8282\u70b9\u6307\u5411\u6dfb\u52a0\u7684\u8282\u70b9\n     */\n    public void add(SingleLinkedListNode node) {\n        //\u5934\u8282\u70b9\u4e0d\u80fd\u52a8\uff0c\u9700\u8981\u4e00\u4e2atemp\u8282\u70b9\u6765\u8f85\u52a9\u904d\u5386\u94fe\u8868\n        SingleLinkedListNode temp = head;\n        while (temp.next != null) {\n            temp = temp.next;\n        }\n        //\u7a0b\u5e8f\u6267\u884c\u5230\u8fd9\u91cc\u8bf4\u660etemp\u5df2\u7ecf\u662f\u6700\u540e\u8282\u70b9\n        temp.next = node;\n    }\n\n    /**\n     * \u6309\u7167\u7f16\u53f7\u987a\u5e8f\u6dfb\u52a0\u8282\u70b9\n     * 1\u3001\u9996\u5148\u627e\u5230\u65b0\u6dfb\u52a0\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u662f\u901a\u8fc7\u8f85\u52a9\u53d8\u91cf\u904d\u5386\u6765\u4e86\u641e\u5b9a\n     * 2\u3001\u65b0\u8282\u70b9.next=temp.next\n     * 3\u3001\u5c06temp.next=\u65b0\u8282\u70b9\n     */\n    public void addByOrder(SingleLinkedListNode node) {\n        SingleLinkedListNode temp = head;\n        while (true) {\n            if (temp.next == null) { //\u8bf4\u660etemp\u5df2\u7ecf\u5230\u94fe\u8868\u6700\u540e\n                break;\n            } else if (temp.next.no == node.no) {\n                System.out.printf(\"\u7f16\u53f7%d\u5df2\u5b58\u5728\uff0c\u6dfb\u52a0\u5931\u8d25\\n\", node.no);\n                return;\n            } else if (temp.next.no &gt; node.no) {\n                break;\n            }\n            temp = temp.next;\n        }\n        //\u7a0b\u5e8f\u5230\u8fd9\u91cc\u8bf4\u660e\u5df2\u7ecf\u627e\u5230\u4f4d\u7f6e\n        node.next = temp.next;\n        temp.next = node;\n    }\n\n    /**\n     * \u4fee\u6539\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u6839\u636e\u7f16\u53f7\u4fee\u6539\uff0c\u5373no\u4e0d\u80fd\u4fee\u6539\n     * \u8bf4\u660e\uff1a\n     * \u6839\u636enewNode\u7684no\u6765\u4fee\u6539\u5373\u53ef\n     */\n    public void update(SingleLinkedListNode newNode) {\n        if (head.next == null) {\n            System.out.println(\"\u94fe\u8868\u4e3a\u7a7a\");\n            return;\n        }\n        SingleLinkedListNode temp = head.next;\n        while (true) {\n            if (temp == null) {\n                System.out.printf(\"\u672a\u627e\u5230%d\u7f16\u53f7\u7684\u6570\u636e\\n\", newNode.no);\n                return;\n            }\n            if (temp.no == newNode.no) {\n                break;\n            }\n            temp = temp.next;\n        }\n        //\u7a0b\u5e8f\u6267\u884c\u5230\u8fd9\u8bf4\u660e\u627e\u5230\u8981\u4fee\u6539\u8282\u70b9\n        temp.name = newNode.name;\n        temp.nickname = newNode.nickname;\n    }\n\n    /**\n     * \u5220\u9664\u8282\u70b9\n     * \u6839\u636eno\u5220\u9664\u8282\u70b9\n     */\n    public void delete(int no) {\n        SingleLinkedListNode temp = head;\n        while (true) {\n            if (temp.next == null) {    //\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684no\u4e5f\u4e0d\u662f\u8981\u5220\u9664\u8282\u70b9\u7684no\n                System.out.printf(\"\u672a\u627e\u5230\u7f16\u53f7\u4e3a%d\u7684\u6570\u636e\\n\", no);\n                return;\n            }\n            if (temp.next.no == no) {\n                temp.next = temp.next.next;\n                return;\n            }\n            temp = temp.next;\n        }\n    }\n\n    /**\n     * \u663e\u793a\u904d\u5386\u5355\u5411\u94fe\u8868\n     */\n    public void list() {\n        //\u5224\u65ad\u8be5\u5355\u5411\u94fe\u8868\u662f\u5426\u4e3a\u7a7a\n        if (head.next == null) {\n            System.out.println(\"\u94fe\u8868\u4e3a\u7a7a\");\n            return;\n        }\n        //\u7a0b\u5e8f\u80fd\u6267\u884c\u5230\u8fd9\u8bf4\u660e\u8be5\u94fe\u8868\u6709\u9664\u4e86\u5934\u8282\u70b9\u4e4b\u5916\u7684\u8282\u70b9\n        //\u8fd9\u91cc\u4e0d\u8ba9temp=head\u7684\u539f\u56e0\u662fhead\u662f\u7a7a\u8282\u70b9\uff0c\u53ea\u4e3a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u6ca1\u6709\u6570\u636e\uff0c\u4e0d\u9700\u8981\u6253\u5370\u6570\u636e\n        SingleLinkedListNode temp = head.next;\n        while (temp != null) {\n            System.out.println(temp);\n            temp = temp.next;\n        }\n    }\n\n}\n\nclass SingleLinkedListNode {\n    public int no;\n    public String name;\n    public String nickname;\n    public SingleLinkedListNode next;\n\n    public SingleLinkedListNode() {\n    }\n\n    public SingleLinkedListNode(int no, String name, String nickname) {\n        this.no = no;\n        this.name = name;\n        this.nickname = nickname;\n    }\n\n    @Override\n    public String toString() {\n        return \"SingleLinkedListNode{\" +\n                \"no=\" + no +\n                \", name='\" + name + '\\'' +\n                \", nickname='\" + nickname + '\\'' +\n                '}';\n    }\n}\n\n\u6d4b\u8bd5\u5982\u4e0b\uff1a\npublic class SingleLinkedListTest {\n    public static void main(String[] args) {\n        SingleLinkedList hero = new SingleLinkedList();\n        //\u6ca1\u6309\u987a\u5e8f\n        //hero.add(new SingleLinkedListNode(1,\"\u5b8b\u6c5f\",\"\u53ca\u65f6\u96e8\"));\n        //hero.add(new SingleLinkedListNode(3,\"\u5434\u7528\",\"\u667a\u591a\u661f\"));\n        //hero.add(new SingleLinkedListNode(4,\"\u6797\u51b2\",\"\u8c79\u5b50\u5934\"));\n        //hero.add(new SingleLinkedListNode(2,\"\u5362\u4fca\u4e49\",\"\u7389\u9e92\u9e9f\"));\n\n        //\u6309\u987a\u5e8f\n        hero.addByOrder(new SingleLinkedListNode(1,\"\u5b8b\u6c5f\",\"\u53ca\u65f6\u96e8\"));\n        hero.addByOrder(new SingleLinkedListNode(3,\"\u5434\u7528\",\"\u667a\u591a\u661f\"));\n        hero.addByOrder(new SingleLinkedListNode(4,\"\u6797\u51b2\",\"\u8c79\u5b50\u5934\"));\n        hero.addByOrder(new SingleLinkedListNode(2,\"\u5362\u4fca\u4e49\",\"\u7389\u9e92\u9e9f\"));\n\n        hero.list();\n\n        System.out.println(\"------------------\");\n        hero.delete(1);\n        hero.list();\n\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#42","title":"4.2 \u5355\u94fe\u8868\u9762\u8bd5\u9898","text":"<p>\u5355\u94fe\u8868\u5e38\u89c1\u9762\u8bd5\u9898\uff1a</p> <ol> <li>\u6c42\u5355\u94fe\u8868\u4e2d\u6709\u6548\u8282\u70b9\u7684\u4e2a\u6570</li> </ol> <p><code>java    /**     * \u65b9\u6cd5\uff1a\u83b7\u53d6\u5355\u94fe\u8868\u7684\u8282\u70b9\u7684\u4e2a\u6570(\u5982\u679c\u662f\u5e26\u5934\u7ed3\u70b9\u7684\u94fe\u8868\uff0c\u9700\u6c42\u4e0d\u7edf\u8ba1\u5934\u7ed3\u70b9)     *     * @param head \u94fe\u8868\u7684\u5934\u7ed3\u70b9     * @return \u6709\u6548\u8282\u70b9\u7684\u4e2a\u6570     */    public static int getLength(SingleLinkedListNode head) {        if (head.next == null) { //\u7a7a\u94fe\u8868            return 0;        }        int length = 0;        //\u8fd9\u91cc\u6ca1\u6709\u7edf\u8ba1\u5934\u7ed3\u70b9        SingleLinkedListNode temp = head.next;        while (temp != null) {            length++;            temp = temp.next;        }        return length;    }</code></p> <ol> <li>\u67e5\u627e\u5355\u94fe\u8868\u4e2d\u7684\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9(\u65b0\u6d6a\u9762\u8bd5\u9898)</li> </ol> <p><code>java    /**     * \u67e5\u627e\u5355\u94fe\u8868\u4e2d\u7684\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9     *     * @param head  \u94fe\u8868\u7684\u5934\u7ed3\u70b9     * @param index \u5012\u6570\u7b2cindex\u4e2a\u8282\u70b9     * @return \u5b58\u5728\u5219\u8fd4\u56de\u8be5\u8282\u70b9\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56denull     */    public static SingleLinkedListNode findLastNode(SingleLinkedListNode head, int index) {        if (head.next == null) {            return null;        }        int length = getLength(head);   //\u6709\u6548\u8282\u70b9\u4e2a\u6570        SingleLinkedListNode temp = head.next;        if (index &lt;= 0 || index &gt; length) {            return null;        }        for (int i = 0; i &lt; length - index; i++) {            temp = temp.next;        }        return temp;    }</code></p> <ol> <li>\u5355\u94fe\u8868\u7684\u53cd\u8f6c</li> </ol> <p>\u601d\u8def\u5206\u6790\u56fe\u89e3\uff1a</p> <p></p> <p>\u601d\u8def\uff1a</p> <ol> <li> <p>\u5148\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9reverseHead</p> </li> <li> <p>\u4ece\u5934\u5230\u5c3e\u904d\u5386\u539f\u6765\u7684\u94fe\u8868\uff0c\u6bcf\u904d\u5386\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u5c06\u5176\u53d6\u51fa\uff0c\u5e76\u653e\u5728\u65b0\u7684\u94fe\u8868reverseHead\u7684\u6700\u524d\u7aef</p> </li> <li> <p>\u539f\u6765\u7684\u94fe\u8868\u7684head.next = reverseHead.next</p> <p></p> </li> </ol> <p><code>java    /**     * \u53cd\u8f6c\u5355\u5411\u94fe\u8868     */    public static void reverseList(SingleLinkedListNode head) {        //\u5982\u679c\u5f53\u524d\u94fe\u8868\u4e3a\u7a7a\u6216\u5f53\u524d\u94fe\u8868\u53ea\u6709\u4e00\u4e2a\u6709\u6548\u6570\u636e\uff0c\u65e0\u9700\u53cd\u8f6c        if (head.next == null || head.next.next == null) {            return;        }        SingleLinkedListNode temp = head.next;        SingleLinkedListNode next = null;   //\u4e3a\u4e86\u4fdd\u5b58temp\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9        SingleLinkedListNode reverseHead = new SingleLinkedListNode();        //\u904d\u5386\u539f\u6765\u7684\u94fe\u8868\uff0c\u6bcf\u904d\u5386\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u5c06\u5176\u53d6\u51fa\uff0c\u5e76\u653e\u5728\u65b0\u7684\u94fe\u8868reverseHead\u7684\u6700\u524d\u7aef        while (temp != null) {            next = temp.next;   //\u5148\u6682\u65f6\u4fdd\u5b58\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9            temp.next = reverseHead.next;   //\u5c06temp\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u65b0\u8282\u70b9\u7684\u6700\u524d\u7aef            reverseHead.next = temp;    //\u5c06temp\u8fde\u63a5\u5230\u65b0\u7684\u94fe\u8868\u4e0a            temp = next;    //temp\u540e\u79fb\uff0c\u8fdb\u884c\u904d\u5386        }        head.next = reverseHead.next;    }</code></p> <ol> <li>\u4ece\u5c3e\u5230\u5934\u6253\u5370\u5355\u94fe\u8868</li> </ol> <p>\u601d\u8def\u5206\u6790\u56fe\u89e3\uff1a</p> <p></p> <p>\u601d\u8def\uff1a</p> <ol> <li>\u65b9\u5f0f1\uff1a\u5148\u5c06\u5355\u94fe\u8868\u8fdb\u884c\u53cd\u8f6c\uff0c\u7136\u540e\u518d\u8fdb\u884c\u904d\u5386\uff0c\u8fd9\u6837\u505a\u7684\u95ee\u9898\u662f\u4f1a\u7834\u574f\u539f\u6765\u7684\u5355\u94fe\u8868\u7684\u7ed3\u6784\uff0c\u4e0d\u5efa\u8bae</li> <li>\u65b9\u5f0f2\uff1a\u53ef\u4ee5\u5229\u7528\u6808\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5c06\u5404\u4e2a\u8282\u70b9\u538b\u5165\u5230\u6808\u4e2d\uff0c\u7136\u540e\u5229\u7528\u6808\u7684\u5148\u8fdb\u540e\u51fa\u7684\u7279\u70b9\uff0c\u5c31\u5b9e\u73b0\u4e86\u9006\u5e8f\u6253\u5370</li> </ol> <p><code>java    /**     * \u9006\u5e8f\u6253\u5370\u5355\u5411\u94fe\u8868     * \u5229\u7528\u6808Stack\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5c06\u5404\u4e2a\u8282\u70b9\u538b\u5165\u5230\u6808\u4e2d\uff0c\u7136\u540e\u5229\u7528\u6808\u7684\u5148\u8fdb\u540e\u51fa\u7684\u7279\u70b9\uff0c\u5c31\u5b9e\u73b0\u4e86\u9006\u5e8f\u6253\u5370     */    public static void reversePrint(SingleLinkedListNode head){        if (head.next == null){            return;        }        //\u521b\u5efa\u4e00\u4e2a\u6808\uff0c\u5c06\u5404\u4e2a\u8282\u70b9\u538b\u5165\u6808\u4e2d        Stack&lt;SingleLinkedListNode&gt; stack = new Stack&lt;&gt;();        SingleLinkedListNode temp = head.next;        //\u5c06\u6240\u6709\u8282\u70b9\u538b\u5165\u6808\u4e2d        while (temp != null){            stack.push(temp);            temp = temp.next;        }        //\u5c06\u6808\u4e2d\u7684\u8282\u70b9\u6253\u5370\uff0cpop\u51fa\u6808        while (stack.size() &gt; 0){            System.out.println(stack.pop());        }    }</code></p> <ol> <li>\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u5355\u94fe\u8868\uff0c\u5408\u5e76\u4e4b\u540e\u7684\u94fe\u8868\u4f9d\u7136\u6709\u5e8f</li> </ol> <p>```java    /*     * \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5355\u94fe\u8868\uff0c\u5408\u5e76\u4e4b\u540e\u7684\u94fe\u8868\u4f9d\u7136\u6709\u5e8f     /    public static SingleLinkedList mergeList(SingleLinkedList list1, SingleLinkedList list2){        SingleLinkedListNode head1 = list1.getHead();        SingleLinkedListNode head2 = list2.getHead();</p> <pre><code>   if (head1 == null || head2 == null){\n       return null;\n   }\n\n   SingleLinkedListNode temp = head2.next;\n   SingleLinkedListNode next = null;\n   while (temp != null){\n       next = temp.next;\n       temp.next = null;\n       list1.addByOrder(temp);\n       temp = next;\n   }\n   return list1;\n</code></pre> <p>}    ```</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#43","title":"4.3 \u53cc\u5411\u94fe\u8868\u5e94\u7528\u5b9e\u4f8b","text":"<ul> <li> <p>\u64cd\u4f5c\u5206\u6790\u548c\u5b9e\u73b0\uff1a</p> </li> <li> <p>\u4f7f\u7528\u5e26 head \u5934\u7684\u53cc\u5411\u94fe\u8868---\u6c34\u6d52\u82f1\u96c4\u6392\u884c\u699c </p> </li> <li> <p>\u5355\u5411\u94fe\u8868\u7684\u7f3a\u70b9\u5206\u6790\uff1a</p> <ol> <li>\u5355\u5411\u94fe\u8868\uff0c\u67e5\u627e\u7684\u65b9\u5411\u53ea\u80fd\u662f\u4e00\u4e2a\u65b9\u5411\uff0c\u4e8c\u53cc\u5411\u94fe\u8868\u53ef\u4ee5\u5411\u524d\u6216\u5411\u540e\u67e5\u627e</li> <li>\u5355\u5411\u94fe\u8868\u4e0d\u80fd\u81ea\u6211\u5220\u9664\uff0c\u9700\u8981\u8003\u8f85\u52a9\u8282\u70b9\uff0c\u800c\u53cc\u5411\u94fe\u8868\u5219\u53ef\u4ee5\u81ea\u6211\u5220\u9664\uff0c\u6240\u4ee5\u524d\u9762\u6211\u4eec\u5355\u94fe\u8868\u5220\u9664\u8282\u70b9\u65f6\uff0c\u9700\u8981\u627e\u5230temp\uff0ctemp\u662f\u5f85\u5220\u9664\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9</li> </ol> <p></p> <ol> <li> <p>\u904d\u5386\uff1a\u548c\u5355\u94fe\u8868\u4e00\u6837\uff0c\u53ea\u662f\u53ef\u4ee5\u5411\u524d\uff0c\u4e5f\u53ef\u4ee5\u5411\u540e\u67e5\u627e</p> </li> <li> <p>\u6dfb\u52a0\uff1a\uff08\u9ed8\u8ba4\u6dfb\u52a0\u5230\u53cc\u5411\u94fe\u8868\u7684\u6700\u540e\uff09</p> </li> <li> <p>\u5148\u627e\u5230\u53cc\u5411\u94fe\u8868\u7684\u6700\u540e\u8282\u70b9</p> </li> <li>temp.next = newNode</li> <li> <p>newNode.pre = temp</p> </li> <li> <p>\u4fee\u6539\uff1a\u601d\u8def\u548c\u5355\u5411\u94fe\u8868\u4e00\u6837</p> </li> <li> <p>\u5220\u9664\uff1a</p> </li> <li> <p>\u56e0\u4e3a\u662f\u53cc\u5411\u94fe\u8868\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u81ea\u6211\u5220\u9664\u67d0\u4e2a\u8282\u70b9</p> </li> <li>\u76f4\u63a5\u627e\u5230\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u6bd4\u5982temp</li> <li>temp.pre.next = temp.next</li> <li>temp.next.pre = temp.pre</li> </ol> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <p>```java</p> <p>public class DoubleLinkedList {        private DoubleLinkedListNode head = new DoubleLinkedListNode();</p> <pre><code>   //\u8fd4\u56de\u5934\u7ed3\u70b9\n   public DoubleLinkedListNode getHead() {\n       return head;\n   }\n\n   /**\n    * \u6dfb\u52a0\u8282\u70b9\u5230\u53cc\u5411\u94fe\u8868\u6700\u540e\n    */\n   public void add(DoubleLinkedListNode node) {\n       DoubleLinkedListNode temp = head;\n       while (temp.next != null) {\n           temp = temp.next;\n       }\n       temp.next = node;\n       node.pre = temp;\n   }\n\n   /**\n    * \u6309\u7f16\u53f7\u987a\u5e8f\u6dfb\u52a0\u8282\u70b9\u5230\u53cc\u5411\u94fe\u8868\n    */\n   public void addByOrder(DoubleLinkedListNode node) {\n       DoubleLinkedListNode temp = head;\n       while (true) {\n           if (temp.next == null) {\n               break;\n           }\n           if (temp.next.no &gt; node.no) {\n               break;\n           }\n           if (temp.next.no == node.no) {\n               System.out.printf(\"\u7f16\u53f7%d\u5df2\u5b58\u5728\uff0c\u6dfb\u52a0\u5931\u8d25\\n\", node.no);\n               return;\n           }\n           temp = temp.next;\n       }\n       node.next = temp.next;\n       temp.next = node;\n       node.pre = temp;\n\n   }\n\n   /**\n    * \u4fee\u6539\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u6839\u636e\u7f16\u53f7\u4fee\u6539\uff0c\u5373no\u4e0d\u80fd\u4fee\u6539\n    */\n   public void update(DoubleLinkedListNode newNode) {\n       if (head.next == null) {\n           System.out.println(\"\u94fe\u8868\u4e3a\u7a7a\");\n           return;\n       }\n       DoubleLinkedListNode temp = head.next;\n       while (true) {\n           if (temp == null) {\n               System.out.printf(\"\u672a\u627e\u5230%d\u7f16\u53f7\u7684\u6570\u636e\\n\", newNode.no);\n               return;\n           }\n           if (temp.no == newNode.no) {\n               break;\n           }\n           temp = temp.next;\n       }\n       //\u7a0b\u5e8f\u6267\u884c\u5230\u8fd9\u8bf4\u660e\u627e\u5230\u8981\u4fee\u6539\u8282\u70b9\n       temp.name = newNode.name;\n       temp.nickname = newNode.nickname;\n   }\n\n   /**\n    * \u5220\u9664\u8282\u70b9\n    */\n   public void delete(int no) {\n       if (head.next == null) {\n           System.out.println(\"\u94fe\u8868\u4e3a\u7a7a\");\n           return;\n       }\n       DoubleLinkedListNode temp = head.next;\n       while (true) {\n           if (temp == null) {\n               System.out.printf(\"\u672a\u627e\u5230\u7f16\u53f7\u4e3a%d\u7684\u6570\u636e\\n\", no);\n               return;\n           }\n           if (temp.no == no) {\n               if (temp.next != null) {\n                   temp.next.pre = temp.pre;\n                   temp.pre.next = temp.next;\n               } else {\n                   temp.pre.next = null;\n               }\n               return;\n           }\n           temp = temp.next;\n       }\n   }\n\n   /**\n    * \u904d\u5386\u53cc\u5411\u94fe\u8868\n    */\n   public void list() {\n       if (head.next == null) {\n           System.out.println(\"\u94fe\u8868\u4e3a\u7a7a\");\n           return;\n       }\n       DoubleLinkedListNode temp = head.next;\n       while (temp != null) {\n           System.out.println(temp);\n           temp = temp.next;\n       }\n   }\n</code></pre> <p>}</p> <p>class DoubleLinkedListNode {        public int no;        public String name;        public String nickname;        public DoubleLinkedListNode next;   //\u9ed8\u8ba4\u4e3anull        public DoubleLinkedListNode pre;    //\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u9ed8\u8ba4\u4e3anull</p> <pre><code>   public DoubleLinkedListNode() {\n   }\n\n   public DoubleLinkedListNode(int no, String name, String nickname) {\n       this.no = no;\n       this.name = name;\n       this.nickname = nickname;\n   }\n\n   @Override\n   public String toString() {\n       return \"DoubleLinkedListNode{\" +\n               \"no=\" + no +\n               \", name='\" + name + '\\'' +\n               \", nickname='\" + nickname + '\\'' +\n               '}';\n   }\n</code></pre> <p>}</p> <p>```</p> </li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#44","title":"4.4 \u5355\u5411\u73af\u5f62\u94fe\u8868\u5e94\u7528\u573a\u666f","text":"<ul> <li>Josephu(\u7ea6\u745f\u592b\u3001\u7ea6\u745f\u592b\u73af) \u95ee\u9898</li> </ul> <p>Josephu \u95ee\u9898\u4e3a\uff1a</p> <p>\u200b \u8bbe\u7f16\u53f7\u4e3a 1\uff0c2\uff0c\u2026 n \u7684 n \u4e2a\u4eba\u56f4\u5750\u4e00\u5708\uff0c\u7ea6\u5b9a\u7f16\u53f7\u4e3a k\uff081&lt;=k&lt;=n\uff09\u7684\u4eba\u4ece1\u5f00\u59cb\u62a5\u6570\uff0c\u6570 \u5230 m \u7684\u90a3\u4e2a\u4eba\u51fa\u5217\uff0c\u5b83\u7684\u4e0b\u4e00\u4f4d\u53c8\u4ece1\u5f00\u59cb\u62a5\u6570\uff0c\u6570\u5230 m \u7684\u90a3\u4e2a\u4eba\u53c8\u51fa\u5217\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6240\u6709\u4eba\u51fa\u5217\u4e3a\u6b62\uff0c\u7531 \u6b64\u4ea7\u751f\u4e00\u4e2a\u51fa\u961f\u7f16\u53f7\u7684\u5e8f\u5217\u3002 </p> <p>\u200b \u63d0\u793a\uff1a\u7528\u4e00\u4e2a\u4e0d\u5e26\u5934\u7ed3\u70b9\u7684\u5faa\u73af\u94fe\u8868\u6765\u5904\u7406 Josephu \u95ee\u9898\uff1a\u5148\u6784\u6210\u4e00\u4e2a\u6709 n \u4e2a\u7ed3\u70b9\u7684\u5355\u5faa\u73af\u94fe\u8868\uff0c\u7136\u540e\u7531k\u7ed3\u70b9\u8d77\u4ece1\u5f00\u59cb\u8ba1\u6570\uff0c\u8ba1\u5230 m \u65f6\uff0c\u5bf9\u5e94\u7ed3\u70b9\u4ece\u94fe\u8868\u4e2d\u5220\u9664\uff0c\u7136\u540e\u518d\u4ece\u88ab\u5220\u9664\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u53c8\u4ece 1 \u5f00\u59cb\u8ba1\u6570\uff0c\u76f4 \u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u7b97\u6cd5\u7ed3\u675f\u3002</p> <p>\u793a\u610f\u56fe\uff1a</p> <p></p> <ul> <li>\u5355\u5411\u73af\u5f62\u94fe\u8868\u4ecb\u7ecd</li> </ul> <p></p> <p>Josephu(\u7ea6\u745f\u592b\u3001\u7ea6\u745f\u592b\u73af) \u95ee\u9898\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>/**\n * \u5355\u5411\u73af\u5f62\u94fe\u8868\n */\npublic class CircularLinkedList {\n    private Node first;\n\n    public CircularLinkedList(int num) {\n        if (num &lt; 1) {\n            System.out.println(\"\u53c2\u6570\u81f3\u5c11\u4e3a1\");\n            return;\n        }\n        first = new Node(1);\n        first.next = first;\n        Node temp = first;\n        int tempNum = 2;\n        while (tempNum &lt;= num) {\n            Node cur = new Node(tempNum);\n            temp.next = cur;\n            cur.next = first;\n            temp = temp.next;\n            tempNum++;\n        }\n    }\n\n    public void list() {\n        if (first == null) {\n            System.out.println(\"\u8be5\u94fe\u8868\u4e3a\u7a7a\");\n            return;\n        }\n        Node temp = first;\n        while (true) {\n            System.out.println(temp);\n            if (temp.next == first) {\n                break;\n            }\n            temp = temp.next;\n        }\n    }\n\n\n    /**\n     * \u6839\u636e\u7528\u6237\u8f93\u5165\uff0c\u8ba1\u7b97\u51fa\u5708\u987a\u5e8f\n     *\n     * @param startNo  \u8868\u793a\u4ece\u7b2c\u51e0\u4e2a\u5f00\u59cb\u6570\n     * @param countNum \u8868\u793a\u6570\u51e0\u4e0b\n     * @param sum      \u8868\u793a\u6700\u521d\u6709\u51e0\u4e2a\u4eba\n     */\n    public void out(int startNo, int countNum, int sum) {\n        if (first == null || startNo &lt; 1 || startNo &gt; sum) {\n            System.out.println(\"\u53c2\u6570\u9519\u8bef\");\n            return;\n        }\n        Node temp = first;\n        for (int i = 0; i &lt; startNo - 1; i++) {\n            temp = temp.next;\n        }\n        while (temp.next != temp) {\n            for (int i = 0; i &lt; countNum - 2; i++) {\n                temp = temp.next;\n            }\n            System.out.println(temp.next);  //\u51fa\u5708\n            temp.next = temp.next.next;\n            temp = temp.next;\n        }\n        System.out.println(temp);\n    }\n}\n\nclass Node {\n    public int no;\n    public Node next;\n\n    @Override\n    public String toString() {\n        return \"Node{\" +\n                \"no=\" + no +\n                '}';\n    }\n\n    public Node() {\n    }\n\n    public Node(int no) {\n        this.no = no;\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_6","title":"\u4e94\u3001\u6808","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#51","title":"5.1 \u6808\u7684\u4e00\u4e2a\u5b9e\u9645\u9700\u6c42","text":"<p>\u8bf7\u8f93\u5165\u4e00\u4e2a\u8868\u8fbe\u5f0f \u8ba1\u7b97\u5f0f:[722-5+1-5+3-3]   \u70b9\u51fb\u8ba1\u7b97\u3010\u5982\u4e0b\u56fe\u3011</p> <p></p> <p>\u8bf7\u95ee:    \u8ba1\u7b97\u673a\u5e95\u5c42\u662f\u5982\u4f55\u8fd0\u7b97\u5f97\u5230\u7ed3\u679c\u7684\uff1f\u6ce8\u610f\u4e0d\u662f\u7b80\u5355\u7684\u628a\u7b97\u5f0f\u5217\u51fa\u8fd0\u7b97,\u56e0\u4e3a\u6211\u4eec\u770b\u8fd9\u4e2a\u7b97\u5f0f    7  *  2  *  2  - 5,    \u4f46\u662f\u8ba1\u7b97\u673a\u600e\u4e48\u7406\u89e3\u8fd9\u4e2a\u7b97\u5f0f\u7684(\u5bf9\u8ba1\u7b97\u673a\u800c\u8a00\uff0c\u5b83\u63a5\u6536\u5230\u7684\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32)\uff0c\u6211\u4eec\u8ba8\u8bba\u7684\u662f\u8fd9\u4e2a\u95ee\u9898\u3002-&gt;    \u6808</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#52","title":"5.2 \u6808\u7684\u4ecb\u7ecd","text":"<ol> <li> <p>\u6808\u7684\u82f1\u6587\u4e3a\uff1astack</p> </li> <li> <p>\u6808\u662f\u4e00\u4e2a\u5148\u5165\u540e\u51fa\u7684\u6709\u5e8f\u5217\u8868\u3002</p> </li> <li> <p>\u6808(stack)\u662f\u9650\u5236\u7ebf\u6027\u8868\u4e2d\u5143\u7d20\u7684\u63d2\u5165\u548c\u5220\u9664\u53ea\u80fd\u5728\u7ebf\u6027\u8868\u7684\u540c\u4e00\u7aef\u8fdb\u884c\u7684\u4e00\u79cd\u7279\u6b8a\u7ebf\u6027\u8868\u3002\u5141\u8bb8\u63d2\u5165\u548c\u5220\u9664\u7684\u4e00\u7aef\uff0c\u4e3a\u53d8\u5316\u7684\u4e00\u7aef\uff0c\u79f0\u4e3a\u6808\u9876(Top)\uff0c\u53e6\u4e00\u7aef\u4e3a\u56fa\u5b9a\u7684\u4e00\u7aef\uff0c\u79f0\u4e3a\u6808\u5e95(Bottom)\u3002</p> </li> <li> <p>\u6839\u636e\u6808\u7684\u5b9a\u4e49\u53ef\u77e5\uff0c\u6700\u5148\u653e\u5165\u6808\u4e2d\u5143\u7d20\u5728\u6808\u5e95\uff0c\u6700\u540e\u653e\u5165\u7684\u5143\u7d20\u5728\u6808\u9876\uff0c\u800c\u5220\u9664\u5143\u7d20\u521a\u597d\u76f8\u53cd\uff0c\u6700\u540e\u653e\u5165\u7684\u5143\u7d20\u6700\u5148\u5220\u9664\uff0c\u6700\u5148\u653e\u5165\u7684\u5143\u7d20\u6700\u540e\u5220\u9664</p> </li> <li> <p>\u56fe\u89e3\u65b9\u5f0f\u8bf4\u660e\u51fa\u6808(pop)\u548c\u5165\u6808(push)\u7684\u6982\u5ff5</p> </li> </ol> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#53","title":"5.3 \u6808\u7684\u5e94\u7528\u573a\u666f","text":"<ol> <li>\u5b50\u7a0b\u5e8f\u7684\u8c03\u7528\uff1a\u5728\u8df3\u5f80\u5b50\u7a0b\u5e8f\u524d\uff0c\u4f1a\u5148\u5c06\u4e0b\u4e2a\u6307\u4ee4\u7684\u5730\u5740\u5b58\u5230\u5806\u6808\u4e2d\uff0c\u76f4\u5230\u5b50\u7a0b\u5e8f\u6267\u884c\u5b8c\u540e\u518d\u5c06\u5730\u5740\u53d6\u51fa\uff0c\u4ee5\u56de\u5230\u539f\u6765\u7684\u7a0b\u5e8f\u4e2d\u3002</li> <li>\u5904\u7406\u9012\u5f52\u8c03\u7528\uff1a\u548c\u5b50\u7a0b\u5e8f\u7684\u8c03\u7528\u7c7b\u4f3c\uff0c\u53ea\u662f\u9664\u4e86\u50a8\u5b58\u4e0b\u4e00\u4e2a\u6307\u4ee4\u7684\u5730\u5740\u5916\uff0c\u4e5f\u5c06\u53c2\u6570\u3001\u533a\u57df\u53d8\u91cf\u7b49\u6570\u636e\u5b58\u5165\u5806\u6808\u4e2d\u3002</li> <li>\u8868\u8fbe\u5f0f\u7684\u8f6c\u6362 [\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u8868\u8fbe\u5f0f] \u4e0e\u6c42\u503c(\u5b9e\u9645\u89e3\u51b3)\u3002</li> <li>\u4e8c\u53c9\u6811\u7684\u904d\u5386\u3002</li> <li>\u56fe\u5f62\u7684\u6df1\u5ea6\u4f18\u5148(depth  \u4e00  first)\u641c\u7d22\u6cd5\u3002</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#54","title":"5.4 \u6808\u7684\u5feb\u901f\u5165\u95e8","text":"<ol> <li> <p>\u7528\u6570\u7ec4\u6a21\u62df\u6808\u7684\u4f7f\u7528\uff0c\u7531\u4e8e\u6808\u662f\u4e00\u79cd\u6709\u5e8f\u5217\u8868\uff0c\u5f53\u7136\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7684\u7ed3\u6784\u6765\u50a8\u5b58\u6808\u7684\u6570\u636e\u5185\u5bb9\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u7528\u6570\u7ec4\u6a21\u62df\u6808\u7684\u51fa\u6808\uff0c\u5165\u6808\u7b49\u64cd\u4f5c\u3002</p> </li> <li> <p>\u5b9e\u73b0\u601d\u8def\u5206\u6790,\u5e76\u753b\u51fa\u793a\u610f\u56fe</p> </li> </ol> <p></p> <ol> <li>\u4ee3\u7801\u5b9e\u73b0</li> </ol> <p>```java    public class ArrayStack {        private final int maxSize;    // \u6808\u7684\u6700\u5927\u7a7a\u95f4        private int top;    // \u6808\u9876        private final int[] stack;    // \u7528\u6570\u7ec4\u6a21\u62df\u6808</p> <pre><code>   public ArrayStack(int maxSize) {\n       top = -1;\n       this.maxSize = maxSize;\n       stack = new int[maxSize];\n   }\n\n   // \u5224\u65ad\u662f\u5426\u6ee1\n   public boolean isFull() {\n       return top == maxSize - 1;\n   }\n\n   //\u5224\u65ad\u662f\u5426\u7a7a\n   public boolean isEmpty(){\n       return top == -1;\n   }\n\n   //\u5165\u6808\n   public void push(int value){\n       if (isFull()){\n           System.out.println(\"\u6808\u6ee1\uff0c\u65e0\u6cd5\u6dfb\u52a0\u6570\u636e\");\n           return;\n       }\n       stack[++top] = value;\n   }\n\n   //\u5f39\u6808\n   public int pop(){\n       if (isEmpty()){\n           throw new RuntimeException(\"\u6808\u7a7a\uff0c\u65e0\u6cd5\u5f39\u51fa\u6570\u636e\");\n       }\n       int value = stack[top];\n       top--;\n       return value;\n   }\n\n   //\u904d\u5386\u6808\uff0c\u4ece\u6808\u9876\u5f00\u59cb\u904d\u5386\n   public void list(){\n       if (isEmpty()){\n           System.out.println(\"\u6808\u7a7a\");\n           return;\n       }\n       for (int i = top; i &gt;= 0; i--) {\n           System.out.printf(\"stack[%d]=%d\\n\", i, stack[i]);\n       }\n   }\n</code></pre> <p>}    ```</p> <ol> <li>\u7ec3\u4e60\uff1a\u7528\u94fe\u8868\u6a21\u62df\u6808</li> </ol> <p>```java    public class LinkedStack {        private final Node head = new Node();        private final int maxSize;        private int top;</p> <pre><code>   public LinkedStack(int maxSize) {\n       this.maxSize = maxSize;\n       top = 0;\n   }\n\n   // \u5224\u65ad\u662f\u5426\u7a7a\n   public boolean isEmpty() {\n       return head.next == null;\n   }\n\n   // \u5224\u65ad\u662f\u5426\u6ee1\n   public boolean isFull() {\n       return top == maxSize;\n   }\n\n   // \u5165\u6808\n   public void push(int value) {\n       if (isFull()) {\n           System.out.println(\"\u6808\u5df2\u6ee1\");\n           return;\n       }\n       Node temp = head;\n       while (temp.next != null) {\n           temp = temp.next;\n       }\n       top++;\n       temp.next = new Node(value);\n   }\n\n   // \u5f39\u6808\n   public int pop() {\n       if (isEmpty()) {\n           throw new RuntimeException(\"\u6808\u7a7a\");\n       }\n       if (head.next.next == null) {    // \u5982\u679c\u53ea\u5269\u4e00\u4e2a\u5143\u7d20\n           int value = head.next.value;\n           top--;\n           head.next = null;\n           return value;\n       }\n       Node temp = head;\n       while (temp.next.next != null) {\n           temp = temp.next;\n       }\n       int value = temp.next.value;\n       top--;\n       temp.next = null;\n       return value;\n   }\n\n   // \u904d\u5386\n   public void list() {\n       if (isEmpty()) {\n           System.out.println(\"\u6808\u7a7a\");\n           return;\n       }\n       LinkedStack stack = new LinkedStack(maxSize);\n       Node temp = head;\n       while (temp.next != null){\n           stack.push(temp.next.value);\n           temp = temp.next;\n       }\n       while (!stack.isEmpty()){\n           System.out.printf(\"\u7b2c%d\u4e2a\u5143\u7d20\uff1a%d\\n\", stack.top, stack.pop());\n       }\n   }\n</code></pre> <p>}</p> <p>class Node {        protected int value;        protected Node next;</p> <pre><code>   public Node() {\n   }\n\n   public Node(int value) {\n       this.value = value;\n   }\n</code></pre> <p>}    ```</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#55","title":"5.5 \u6808\u5b9e\u73b0\u7efc\u5408\u8ba1\u7b97\u5668(\u4e2d\u7f00\u8868\u8fbe\u5f0f)","text":"<p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <p>\u601d\u8def\uff1a\u5c06\u6240\u6709 \u2018 - \u2019 \u53f7\u8fd0\u7b97\u7684\u6570\u5b57\u53d8\u4e3a\u8d1f\u6570\uff0c\u5c06 \u2018 - \u2019 \u6539\u4e3a \u2018 + \u2019</p> <pre><code>import java.util.Scanner;\n\npublic class CalculatorTest {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String expression = sc.next();\n        CalculatorArrayStack numStack = new CalculatorArrayStack(10);   // \u6570\u6808\n        CalculatorArrayStack operatorStack = new CalculatorArrayStack(10);   // \u7b26\u53f7\u6808\n        int index = 0;  // \u5f53\u524d\u7d22\u5f15\n        int num1 = 0;   // \u53d6\u51fa\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\n        int num2 = 0;   // \u53d6\u51fa\u7684\u7b2c\u4e8c\u4e2a\u6570\u5b57\n        int operator = 0;    // \u53d6\u51fa\u7684\u7b26\u53f7\n        int result = 0; // \u8ba1\u7b97\u5f97\u5230\u7684\u503c\n        char ch = ' ';\n        String str = \"\";\n\n        // \u5f00\u59cb\u626b\u63cf\n        while (true) {\n            ch = expression.charAt(index);\n\n            if (operatorStack.isOperator(ch)) { // \u5982\u679c\u662f\u626b\u63cf\u5230\u7684\u662f\u7b26\u53f7\n                if (operatorStack.isEmpty()) {  // \u5224\u65ad\u7b26\u53f7\u6808\u662f\u5426\u4e3a\u7a7a\n                    if (ch == '-'){\n                        operatorStack.push('+');\n                    }else {\n                        operatorStack.push(ch);\n                    }\n                } else {    // \u5982\u679c\u4e0d\u662f\u7a7a,\u5224\u65ad\u4f18\u5148\u7ea7\n                    // \u5982\u679c\u5f53\u524d\u5f97\u5230\u7684\u7b26\u53f7\u7684\u4f18\u5148\u7ea7\u6bd4\u7b26\u53f7\u6808\u9876\u7684\u4f18\u5148\u7ea7\u4f4e\n                    // \u5219\u5148\u4ece\u6570\u6808\u4e2d\u5f39\u51fa\u4e24\u4e2a\u6570\u5b57\uff0c\u5728\u4ece\u7b26\u53f7\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u7b26\u53f7\uff0c\u8fdb\u884c\u8fd0\u7b97\n                    // \u5f97\u5230\u7684\u7ed3\u679c\u518d\u538b\u5165\u5230\u6570\u6808\u4e2d\uff0c\u518d\u5c06\u5f53\u524d\u7b26\u53f7\u538b\u5165\u7b26\u53f7\u6808\n                    if (operatorStack.priority(ch) &lt;= operatorStack.priority(operatorStack.getTopVal())) {\n                        num1 = numStack.pop();\n                        num2 = numStack.pop();\n                        operator = operatorStack.pop();\n                        result = numStack.cal(num1, num2, operator);\n\n                        numStack.push(result);\n                        if (ch == '-'){     //\u5224\u65ad\u662f\u5426\u4e3a\u7b26\u53f7\uff0c\u4e3a\u7b26\u53f7\u5219\u6dfb\u52a0\u4e3a'+'\n                            operatorStack.push('+');\n                        }else {\n                            operatorStack.push(ch);\n                        }\n                    } else { // \u5982\u679c\u5f53\u524d\u5f97\u5230\u7684\u7b26\u53f7\u7684\u4f18\u5148\u7ea7\u6bd4\u7b26\u53f7\u6808\u9876\u7684\u4f18\u5148\u7ea7\u9ad8\n                        // \u76f4\u63a5\u538b\u5165\u7b26\u53f7\u6808\n                        operatorStack.push(ch);\n                    }\n                }\n            } else { // \u5982\u679c\u626b\u63cf\u5230\u7684\u662f\u6570\u5b57\n                // numStack.push(ch);\n                // \u5224\u65adch\u540e\u4e00\u4f4d\u662f\u5426\u4e3a\u8fd0\u7b97\u7b26\uff0c\u82e5\u4e0d\u662f\u8fd0\u7b97\u7b26\u5219\u9700\u8981\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u5e76\u4e14\u7ee7\u7eed\u626b\u63cf\n                str += ch;\n                if (index == expression.length() - 1) { // \u5982\u679c\u904d\u5386\u5230\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4f4d\u5219\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\n                    numStack.push(Integer.parseInt(str));\n                } else {\n                    char temp = expression.charAt(index + 1);\n                    //\u5982\u679c\u4e0b\u4e00\u4e2a\u8fd0\u7b97\u7b26\u662f'-'\uff0c\u5219\u5c06\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ee5\"-\"\u53f7\u5f00\u5934\uff0c\u4f7f\u5f97\u4e0b\u4e00\u4e2a\u6570\u5b57\u6210\u4e3a\u8d1f\u6570\n                    if (operatorStack.isOperator(temp) &amp;&amp; temp == '-') {\n                        numStack.push(Integer.parseInt(str));\n                        str = \"-\";   // \u4e00\u5b9a\u8981\u8ba9str\u7f6e\u4e3a\u7a7a\uff0c\u5426\u5219\u6570\u5b57\u5c06\u7d2f\u52a0\n                    } else if (operatorStack.isOperator(temp)) {\n                        numStack.push(Integer.parseInt(str));\n                        str = \"\";\n                    }\n                }\n            }\n\n            index++;\n            if (index &gt;= expression.length()) {\n                break;\n            }\n        }\n        // \u8868\u8fbe\u5f0f\u626b\u63cf\u5b8c\u6bd5\uff0c\u6309\u987a\u5e8f\u4ece\u6570\u6808\u548c\u7b26\u53f7\u6808\u4e2dpop\u51fa\u5269\u4e0b\u7684\u5143\u7d20\uff0c\u5e76\u8fd0\u7b97\n        while (!operatorStack.isEmpty()) {\n            num1 = numStack.pop();\n            num2 = numStack.pop();\n            operator = operatorStack.pop();\n            result = numStack.cal(num1, num2, operator);\n            numStack.push(result);\n        }\n        System.out.printf(\"\u8868\u8fbe\u5f0f %s = %d\", expression, numStack.pop());\n    }\n}\n\n\npublic class CalculatorArrayStack {\n    private final int maxSize;    // \u6808\u7684\u6700\u5927\u7a7a\u95f4\n    private int top;    // \u6808\u9876\n    private final int[] stack;    // \u7528\u6570\u7ec4\u6a21\u62df\u6808\n\n    public CalculatorArrayStack(int maxSize) {\n        top = -1;\n        this.maxSize = maxSize;\n        stack = new int[maxSize];\n    }\n\n    // \u5224\u65ad\u662f\u5426\u6ee1\n    public boolean isFull() {\n        return top == maxSize - 1;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u7a7a\n    public boolean isEmpty() {\n        return top == -1;\n    }\n\n    // \u5165\u6808\n    public void push(int value) {\n        if (isFull()) {\n            System.out.println(\"\u6808\u6ee1\uff0c\u65e0\u6cd5\u6dfb\u52a0\u6570\u636e\");\n            return;\n        }\n        stack[++top] = value;\n    }\n\n    // \u62ff\u5230\u6808\u9876\u7684\u503c\n    public int getTopVal() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"\u6808\u7a7a\uff0c\u65e0\u6cd5\u5f39\u51fa\u6570\u636e\");\n        }\n        return stack[top];\n    }\n\n    //\u62ff\u5230\u6808\u9876\u7684\u4e0b\u4e00\u4e2a\u7684\u503c\n    public int getTopNextVal(){\n        if (isEmpty()){\n            throw new RuntimeException(\"\u6808\u7a7a\uff0c\u65e0\u6cd5\u5f39\u51fa\u6570\u636e\");\n        } else if (top &lt; 1) {\n            throw new RuntimeException(\"\u6808\u4e2d\u4ec5\u6709\u4e00\u4e2a\u5143\u7d20\");\n        }\n        return stack[top-1];\n    }\n\n    public int getTop() {\n        return top;\n    }\n\n    // \u5f39\u6808\n    public int pop() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"\u6808\u7a7a\uff0c\u65e0\u6cd5\u5f39\u51fa\u6570\u636e\");\n        }\n        int value = stack[top];\n        top--;\n        return value;\n    }\n\n    // \u904d\u5386\u6808\uff0c\u4ece\u6808\u9876\u5f00\u59cb\u904d\u5386\n    public void list() {\n        if (isEmpty()) {\n            System.out.println(\"\u6808\u7a7a\");\n            return;\n        }\n        for (int i = top; i &gt;= 0; i--) {\n            System.out.printf(\"stack[%d]=%d\\n\", i, stack[i]);\n        }\n    }\n\n    // \u5224\u65ad\u662f\u5426\u4e3a\u7b26\u53f7\n    public boolean isOperator(char val) {\n        return val == '+' || val == '-' || val == '*' || val == '/';\n    }\n\n    /**\n     * \u5224\u65ad\u7b26\u53f7\u4e0e + - * / \u7684\u4f18\u5148\u7ea7\n     *\n     * @return \u4f18\u5148\u7ea7\u9ad8\u8fd4\u56de1\uff0c \u4f18\u5148\u7ea7\u4f4e\u8fd4\u56de0\uff0c\u9519\u8bef\u8fd4\u56de-1\n     */\n    public int priority(int operator) {\n        if (operator == '+' || operator == '-') {\n            return 0;\n        } else if (operator == '*' || operator == '/') {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n\n    // \u8ba1\u7b97\n    public int cal(int num1, int num2, int operator) {\n        int result = 0;\n        switch (operator) {\n            case '+' -&gt; result = num2 + num1;\n            case '-' -&gt; result = num2 - num1;\n            case '*' -&gt; result = num2 * num1;\n            case '/' -&gt; result = num2 / num1;\n            default -&gt; {\n            }\n        }\n        return result;\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#56","title":"5.6 \u9006\u6ce2\u5170\u8ba1\u7b97\u5668","text":"<p>\u6211\u4eec\u5b8c\u6210\u4e00\u4e2a\u9006\u6ce2\u5170\u8ba1\u7b97\u5668\uff0c\u8981\u6c42\u5b8c\u6210\u5982\u4e0b\u4efb\u52a1: 1)       \u8f93\u5165\u4e00\u4e2a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f(\u540e\u7f00\u8868\u8fbe\u5f0f)\uff0c\u4f7f\u7528\u6808(Stack),    \u8ba1\u7b97\u5176\u7ed3\u679c 2) \u652f\u6301\u5c0f\u62ec\u53f7\u548c\u591a\u4f4d\u6570\u6574\u6570\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8bb2\u7684\u662f\u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64\u8ba1\u7b97\u5668\u8fdb\u884c\u7b80\u5316\uff0c\u53ea\u652f\u6301\u5bf9\u6574\u6570\u7684\u8ba1\u7b97\u3002 3. \u601d\u8def\u5206\u6790</p> <p>\u4f8b\u5982: (3+4)\u00d75-6    \u5bf9\u5e94\u7684\u540e\u7f00\u8868\u8fbe\u5f0f\u5c31\u662f    3  4  + 5   \u00d7    6  -  ,   \u9488\u5bf9\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\u6b65\u9aa4\u5982\u4e0b:</p> <ol> <li>\u4ece\u5de6\u81f3\u53f3\u626b\u63cf\uff0c\u5c06 3  \u548c 4  \u538b\u5165\u5806\u6808\uff1b</li> <li>\u9047\u5230+\u8fd0\u7b97\u7b26\uff0c\u56e0\u6b64\u5f39\u51fa 4  \u548c 3\uff084  \u4e3a\u6808\u9876\u5143\u7d20\uff0c3  \u4e3a\u6b21\u9876\u5143\u7d20\uff09\uff0c\u8ba1\u7b97\u51fa 3+4 \u7684\u503c\uff0c\u5f97 7\uff0c\u518d\u5c06  7  \u5165\u6808\uff1b </li> <li>\u5c06 5  \u5165\u6808\uff1b</li> <li>\u63a5\u4e0b\u6765\u662f\u00d7\u8fd0\u7b97\u7b26\uff0c\u56e0\u6b64\u5f39\u51fa 5  \u548c 7\uff0c\u8ba1\u7b97\u51fa 7\u00d75=35\uff0c\u5c06 35  \u5165\u6808\uff1b </li> <li>\u5c06 6  \u5165\u6808\uff1b</li> <li>\u6700\u540e\u662f-\u8fd0\u7b97\u7b26\uff0c\u8ba1\u7b97\u51fa 35-6  \u7684\u503c\uff0c\u5373 29\uff0c\u7531\u6b64\u5f97\u51fa\u6700\u7ec8\u7ed3\u679c</li> </ol> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class SuffixExpression {\n    public static void main(String[] args) {\n        // (3+4)*5-6\n        String suffixExpression = \"3 4 + 5 * 6 -\";\n        // \u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u6765\u5c06suffixExpression\u5b58\u653e\u5230ArrayList\u4e2d\n        List&lt;String&gt; list = toList(suffixExpression);\n        // System.out.println(list);\n        int result = calculate(list);\n        System.out.println(result);\n    }\n\n\n    /**\n     * \u76f4\u63a5\u5c06\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u8f6c\u6210List\n     */\n    public static List&lt;String&gt; toList(String suffixExpression) {\n        String[] split = suffixExpression.split(\" \");\n        List&lt;String&gt; list = new ArrayList&lt;&gt;();\n        Collections.addAll(list, split);\n        return list;\n    }\n\n    /**\n     * \u5c06ArrayList\u4e2d\u7684\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u5e76\u8ba1\u7b97\n     */\n    public static int calculate(List&lt;String&gt; list) {\n        Stack&lt;String&gt; stack = new Stack&lt;&gt;();\n        for (String item : list) {\n            // \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\n            if (item.matches(\"\\\\d+\")) {      // \u5339\u914d\u591a\u4f4d\u6570\n                stack.push(item);\n            } else {\n                // \u662f\u8fd0\u7b97\u7b26\u5219\u4ece\u6808\u4e2d\u5f39\u51fa\u4e24\u4e2a\u6570\uff0c\u8fdb\u884c\u8ba1\u7b97\n                int num1 = Integer.parseInt(stack.pop());\n                int num2 = Integer.parseInt(stack.pop());\n                int result = switch (item) {\n                    case \"+\" -&gt; num2 + num1;\n                    case \"-\" -&gt; num2 - num1;\n                    case \"*\" -&gt; num2 * num1;\n                    case \"/\" -&gt; num2 / num1;\n                    default -&gt; throw new RuntimeException(\"\u8fd0\u7b97\u7b26\u6709\u8bef\");\n                };\n                // \u8ba1\u7b97\u5b8c\u6210\u540e\u518d\u5c06\u7ed3\u679c\u538b\u5165\u6808\u4e2d\n                stack.push(String.valueOf(result));\n            }\n        }\n        // \u5168\u90e8\u8ba1\u7b97\u5b8c\u540e\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8ba1\u7b97\u5f97\u5230\u7684\u7ed3\u679c\n        return Integer.parseInt(stack.pop());\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#57","title":"5.7 \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f","text":"<p>\u540e\u7f00\u8868\u8fbe\u5f0f\u9002\u5408\u8ba1\u7b97\u5f0f\u8fdb\u884c\u8fd0\u7b97\uff0c\u4f46\u662f\u4eba\u5374\u4e0d\u592a\u5bb9\u6613\u5199\u51fa\u6765\uff0c\u5c24\u5176\u662f\u8868\u8fbe\u5f0f\u5f88\u957f\u7684\u60c5\u51b5\u4e0b\uff0c\u56e0\u6b64\u5728\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5c06 \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\u3002</p> <p>\u5b9e\u73b0\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u521d\u59cb\u5316\u4e24\u4e2a\u6808\uff0c\u8fd0\u7b97\u7b26\u6808operatorStack\u548c\u5b58\u50a8\u4e2d\u95f4\u7ed3\u679c\u7684\u6808numStack</li> <li>\u4ece\u5de6\u5230\u53f3\u626b\u63cf\u4e2d\u7f00\u8868\u8fbe\u5f0f</li> <li>\u9047\u5230\u6570\u5b57\uff0c\u5c06\u5176\u538b\u5165numStack</li> <li>\u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u6bd4\u8f83\u5176\u4e0eoperatorStack\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff1a</li> <li>\u5982\u679coperatorStack\u4e3a\u7a7a\uff0c\u6216\u8005\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u4e3a \u201c ( \u201d \uff0c\u5219\u4e4b\u95f4\u5c06\u5176\u538b\u5165operatorStack</li> <li>\u5426\u5219\uff0c\u82e5\u4f18\u5148\u7ea7\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u4f4e\uff0c\u5219\u5c06operatorStack\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u5f39\u51fa\u5e76\u538b\u5165\u5230numStack\u4e2d\uff0c\u518d\u8f6c\u52304.1\u64cd\u4f5c\u4e0eoperatorStack\u65b0\u7684\u6808\u9876\u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83</li> <li>\u82e5\u4f18\u5148\u7ea7\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u9ad8\uff0c\u5219\u5c06\u8fd0\u7b97\u7b26\u76f4\u63a5\u538b\u5165operatorStack\u4e2d</li> <li>\u9047\u5230\u62ec\u53f7\u65f6\uff1a</li> <li>\u5982\u679c\u662f \u201c ( \u201d\uff0c\u76f4\u63a5\u538b\u5165operatorStack</li> <li>\u5982\u679c\u662f \u201c ) \u201d\uff0c\u5219\u4f9d\u6b21\u5f39\u51faoperatorStack\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u5e76\u538b\u5165numStack\u4e2d\uff0c\u76f4\u5230\u9047\u5230 \u201c ( \u201d\uff0c\u4e3a\u6b62\uff0c\u6b64\u65f6\u5c06\u8fd9\u5bf9\u62ec\u53f7\u4e22\u5f03\uff08  \u5f39\u51fa\u5f53\u524doperatorStack\u6808\u9876\u7684 \u201c ( \u201d  \uff09\uff0c</li> <li>\u91cd\u590d2-5\u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u8868\u8fbe\u5f0f\u7684\u6700\u53f3\u8fb9</li> <li>\u5c06operatorStack\u5269\u4e0b\u7684\u8fd0\u7b97\u7b26\u4f9d\u6b21\u5f39\u51fa\u5e76\u538b\u5165numStack</li> <li>\u4f9d\u6b21\u5f39\u51fanumStack\u4e2d\u7684\u5143\u7d20\u5e76\u8f93\u51fa\uff0c\u5176\u7ed3\u679c\u7684\u9006\u5e8f\u5373\u4e3a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u5176\u5bf9\u5e94\u7684\u540e\u7f00\u8868\u8fbe\u5f0f</li> </ol> <p>\u6ce8\uff1a\u5168\u7a0b\u4e2dnumStack\u6ca1\u6709\u505apop\u64cd\u4f5c\uff0c\u5f97\u5230\u7684\u540e\u7f00\u8868\u8fbe\u5f0f\u7ed3\u679c\u4e5f\u4e3anumStack\u7684\u9006\u5e8f\u8f93\u51fa\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528List\u4ee3\u66ffnumStack\uff0c\u4f5c\u4e3a\u6700\u7ec8\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u5b58\u50a8</p> <p>\u4e3e\u4f8b\u8bf4\u660e\uff1a</p> <p>\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u201c1+((2+3)\u00d74)-5\u201d\u8f6c\u6362\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8fc7\u7a0b\u5982\u4e0b</p> <p>\u56e0\u6b64\u7ed3\u679c\u4e3a  :\"1  2 3  +  4   \u00d7    + 5   \u2013\"</p> <p></p> <p>\u601d\u8def\u5206\u6790\uff1a</p> <p></p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.Stack;\n\npublic class InfixToSuffix {\n    public static void main(String[] args) {\n        // \u5b9e\u73b0\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u529f\u80fd\n        // \u8bf4\u660e\n        // 1.1+((2+3)*4)-5 -&gt; 1 2 3 + 4 * + 5 -\n        // 2.\u56e0\u4e3a\u76f4\u63a5\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u64cd\u4f5c\u4e0d\u65b9\u4fbf\uff0c\u56e0\u6b64\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6210\u5bf9\u5e94\u7684List\n        // \u53731+((2+3)*4)-5  -&gt;  ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]\n        // 4.\u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\u5c06ArrayList [1,+,(,(,2,+,3,),*,4,),-,5] -&gt; ArraysList[1, 2, 3, +, 4, *, +, 5, -]\n        Scanner sc = new Scanner(System.in);\n        String infixExpression = sc.next();\n        List&lt;String&gt; infixList = infixToList(infixExpression);\n        System.out.println(\"\u4e2d\u7f00\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684List=\" + infixList);\n        List&lt;String&gt; suffixList = infixToSuffixList(infixList);\n        System.out.println(\"\u540e\u7f00\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684List=\" + suffixList);\n        int result = calculate(suffixList);\n        System.out.println(\"\u6700\u7ec8\u7684\u7ed3\u679c\u4e3a\uff1a\" + result);\n\n    }\n\n    /**\n     * \u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684List\u8f6c\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684List\n     */\n    public static List&lt;String&gt; infixToSuffixList(List&lt;String&gt; list) {\n        Stack&lt;String&gt; operatorStack = new Stack&lt;&gt;();   // \u7b26\u53f7\u6808\n        List&lt;String&gt; numList = new ArrayList&lt;&gt;();  // \u5b58\u50a8\u4e2d\u95f4\u7ed3\u679c\u7684\uff0c\u76f8\u5f53\u4e8e\u6700\u540e\u540e\u7f00\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684List\n        for (String item : list) {\n            if (item.matches(\"\\\\d+\")) {      // \u9047\u5230\u6570\u5b57\u76f4\u63a5\u52a0\u5165numList\n                numList.add(item);\n            } else if (\"(\".equals(item)) {      // \u5982\u679c\u9047\u5230\u201c(\u201d\uff0c\u76f4\u63a5\u538b\u5165\u7b26\u53f7\u6808\n                operatorStack.push(item);\n            } else if (\")\".equals(item)) {\n                // \u5982\u679c\u662f\u53f3\u62ec\u53f7\u201c)\u201d\uff0c\u5219\u4f9d\u6b21\u5f39\u51fa \u7b26\u53f7\u6808 \u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u5e76\u52a0\u5165 numList \uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\u4e3a\u6b62\uff0c\u6b64\u65f6\u5c06\u8fd9\u4e00\u5bf9\u62ec\u53f7\u4e22\u5f03\n                while (operatorStack.size() &gt; 0 &amp;&amp; !\"(\".equals(operatorStack.peek())) {\n                    numList.add(operatorStack.pop());\n                }\n                operatorStack.pop();    // \u518d\u5c06\u7b26\u53f7\u6808\u4e2d\u7684\"(\"\u5f39\u51fa\n            } else {     // \u9047\u5230\u8fd0\u7b97\u7b26\n                if (operatorStack.size() == 0 || \"(\".equals(operatorStack.peek())) {\n                    // \u5982\u679c \u7b26\u53f7\u6808 \u4e3a\u7a7a\uff0c\u6216\u6808\u9876\u8fd0\u7b97\u7b26\u4e3a\u5de6\u62ec\u53f7\u201c(\u201d\uff0c\u5219\u76f4\u63a5\u5c06\u6b64\u8fd0\u7b97\u7b26\u5165\u6808\uff1b\n                    operatorStack.push(item);\n                } else {\n                    // \u4f18\u5148\u7ea7\u6bd4\u6808\u9876\u7684\u4f4e\uff0c\u5219\u5c06\u7b26\u53f7\u6808\u4e2d\u7684\u8fd0\u7b97\u7b26\u5f39\u51fa\u5e76\u52a0\u5165numList\u4e2d\uff0c\u518d\u4e0e\u4e0b\u4e00\u4e2a\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\n                    while (operatorStack.size() &gt; 0 &amp;&amp; operatorPriority(item) &lt;= operatorPriority(operatorStack.peek())) {\n                        numList.add(operatorStack.pop());\n                    }\n                    // \u4f18\u5148\u7ea7\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u9ad8\uff0c\u4e5f\u5c06\u8fd0\u7b97\u7b26\u538b\u5165\u7b26\u53f7\u6808\n                    operatorStack.push(item);\n                }\n            }\n        }\n        // \u5c06\u7b26\u53f7\u6808\u4e2d\u5269\u4e0b\u7684\u8fd0\u7b97\u7b26\u52a0\u5165numList\u4e2d\n        while (operatorStack.size() &gt; 0) {\n            numList.add(operatorStack.pop());\n        }\n        return numList;\n    }\n\n    /**\n     * \u5224\u8bfb\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\n     *\n     * @param operator\n     * @return \u4f18\u5148\u7ea7\u9ad8\u8fd4\u56de2\uff0c \u4f18\u5148\u7ea7\u4f4e\u8fd4\u56de1\n     */\n    public static int operatorPriority(String operator) {\n        return switch (operator) {\n            case \"+\", \"-\" -&gt; 1;\n            case \"*\", \"/\" -&gt; 2;\n            default -&gt; throw new RuntimeException(\"\u8fd0\u7b97\u7b26\u6709\u8bef\");\n        };\n    }\n\n    /**\n     * \u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6210\u5bf9\u5e94\u7684List\n     */\n    public static List&lt;String&gt; infixToList(String s) {\n        List&lt;String&gt; list = new ArrayList&lt;&gt;();\n        int index = 0;  // \u6307\u9488\u4e0b\u6807\n        char c;   // \u8be5\u4e0b\u6807\u5f97\u5230\u7684\u5b57\u7b26\n        String str;\n        do {\n            // \u5982\u679c\u662f\u975e\u6570\u5b57\u5219\u76f4\u63a5\u52a0\u5165\u5230List\u4e2d\n            if ((c = s.charAt(index)) &lt; '0' || (c = s.charAt(index)) &gt; '9') {\n                list.add(c + \"\");\n                index++;\n            } else {     // \u5982\u679c\u662f\u6570\u5b57\uff0c\u5219\u8981\u8003\u8651\u591a\u4f4d\u6570\uff0c\u8fdb\u884c\u5b57\u7b26\u4e32\u62fc\u63a5\n                str = \"\";\n                while (index &lt; s.length() &amp;&amp; ((c = s.charAt(index)) &gt;= '0' &amp;&amp; (c = s.charAt(index)) &lt;= '9')) {\n                    str += c;\n                    index++;\n                }\n                list.add(str);\n            }\n        } while (index &lt; s.length());\n        return list;\n    }\n\n    /**\n     * \u5c06ArrayList\u4e2d\u7684\u5143\u7d20\u538b\u5165\u6808\u4e2d\uff0c\u5e76\u8ba1\u7b97\n     */\n    public static int calculate(List&lt;String&gt; list) {\n        Stack&lt;String&gt; stack = new Stack&lt;&gt;();\n        for (String item : list) {\n            // \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57\uff0c\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\n            if (item.matches(\"\\\\d+\")) {      // \u5339\u914d\u591a\u4f4d\u6570\n                stack.push(item);\n            } else {\n                // \u662f\u8fd0\u7b97\u7b26\u5219\u4ece\u6808\u4e2d\u5f39\u51fa\u4e24\u4e2a\u6570\uff0c\u8fdb\u884c\u8ba1\u7b97\n                int num1 = Integer.parseInt(stack.pop());\n                int num2 = Integer.parseInt(stack.pop());\n                int result = switch (item) {\n                    case \"+\" -&gt; num2 + num1;\n                    case \"-\" -&gt; num2 - num1;\n                    case \"*\" -&gt; num2 * num1;\n                    case \"/\" -&gt; num2 / num1;\n                    default -&gt; throw new RuntimeException(\"\u8fd0\u7b97\u7b26\u6709\u8bef\");\n                };\n                // \u8ba1\u7b97\u5b8c\u6210\u540e\u518d\u5c06\u7ed3\u679c\u538b\u5165\u6808\u4e2d\n                stack.push(String.valueOf(result));\n            }\n        }\n        // \u5168\u90e8\u8ba1\u7b97\u5b8c\u540e\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u8ba1\u7b97\u5f97\u5230\u7684\u7ed3\u679c\n        return Integer.parseInt(stack.pop());\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#58","title":"5.8 \u9006\u6ce2\u5170\u8ba1\u7b97\u5668\u5b8c\u6574\u7248","text":"<p>\u5b8c\u6574\u7248\u7684\u9006\u6ce2\u5170\u8ba1\u7b97\u5668\uff0c\u529f\u80fd\u5305\u62ec\uff1a</p> <ol> <li>\u652f\u6301   + - *  /  ( )</li> <li>\u591a\u4f4d\u6570\uff0c\u652f\u6301\u5c0f\u6570,</li> <li>\u517c\u5bb9\u5904\u7406,    \u8fc7\u6ee4\u4efb\u4f55\u7a7a\u767d\u5b57\u7b26\uff0c\u5305\u62ec\u7a7a\u683c\u3001\u5236\u8868\u7b26\u3001\u6362\u9875\u7b26</li> </ol> <p>\u8bf4\u660e\uff1a\u9006\u6ce2\u5170\u8ba1\u7b97\u5668\u5b8c\u6574\u7248\u8003\u8651\u7684\u56e0\u7d20\u8f83\u591a\uff0c\u4e0b\u9762\u7ed9\u51fa\u5b8c\u6574\u7248\u4ee3\u7801\u4f9b\u540c\u5b66\u4eec\u5b66\u4e60\uff0c\u5176\u57fa\u672c\u601d\u8def\u548c\u524d\u9762\u4e00\u6837\uff0c\u4e5f\u662f\u4f7f\u7528\u5230\uff1a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u8868\u8fbe\u5f0f</p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Stack;\nimport java.util.regex.Pattern;\n\npublic class ReversePolishMultiCalc {\n    /**\n     * \u5339\u914d    + - *  /  ( )    \u8fd0\u7b97\u7b26\n     */\n    static final String SYMBOL = \"\\\\+|-|\\\\*|/|\\\\(|\\\\)\";\n    static final String LEFT = \"(\";\n    static final String RIGHT = \")\";\n    static final String ADD = \"+\";\n    static final String MINUS = \"-\";\n    static final String TIMES = \"*\";\n    static final String DIVISION = \"/\";\n    /**\n     * \u52a0\u6e1b    + -\n     */\n    static final int LEVEL_01 = 1;\n    /**\n     * \u4e58\u9664    *  /\n     */\n    static final int LEVEL_02 = 2;\n    /**\n     * \u62ec\u53f7\n     */\n    static final int LEVEL_HIGH = Integer.MAX_VALUE;\n    static Stack&lt;String&gt; stack = new Stack&lt;&gt;();\n    static List&lt;String&gt; data = Collections.synchronizedList(new ArrayList&lt;String&gt;());\n\n    /**\n     * \u53bb\u9664\u6240\u6709\u7a7a\u767d\u7b26\n     *\n     * @param s\n     * @return\n     */\n    public static String replaceAllBlank(String s) {\n        // \\\\s+ \u5339\u914d\u4efb\u4f55\u7a7a\u767d\u5b57\u7b26\uff0c\u5305\u62ec\u7a7a\u683c\u3001\u5236\u8868\u7b26\u3001\u6362\u9875\u7b26\u7b49\u7b49, \u7b49\u4ef7\u4e8e[ \\f\\n\\r\\t\\v]\n        return s.replaceAll(\"\\\\s+\", \"\");\n    }\n\n    /**\n     * \u5224\u65ad\u662f\u4e0d\u662f\u6570\u5b57    int double long  float\n     *\n     * @param s\n     * @return\n     */\n    public static boolean isNumber(String s) {\n        Pattern pattern = Pattern.compile(\"^[-\\\\+]?[.\\\\d]*$\");\n        return pattern.matcher(s).matches();\n    }\n\n    /**\n     * \u5224\u65ad\u662f\u4e0d\u662f\u8fd0\u7b97\u7b26\n     *\n     * @param s\n     * @return\n     */\n    public static boolean isSymbol(String s) {\n        return s.matches(SYMBOL);\n    }\n\n    /**\n     * \u5339\u914d\u8fd0\u7b97\u7b49\u7ea7\n     *\n     * @param s\n     * @return\n     */\n    public static int calcLevel(String s) {\n        if (\"+\".equals(s) || \"-\".equals(s)) {\n            return LEVEL_01;\n        } else if (\"*\".equals(s) || \"/\".equals(s)) {\n            return LEVEL_02;\n        }\n        return LEVEL_HIGH;\n    }\n\n    /**\n     * \u5339\u914d\n     *\n     * @param s\n     * @throws Exception\n     */\n    public static List&lt;String&gt; doMatch(String s) throws Exception {\n        if (s == null || \"\".equals(s.trim())) throw new RuntimeException(\"data  is  empty\");\n        if (!isNumber(s.charAt(0) + \"\")) throw new RuntimeException(\"data  illeagle,start  not  with  a number\");\n        s = replaceAllBlank(s);\n        String each;\n        int start = 0;\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (isSymbol(s.charAt(i) + \"\")) {\n                each = s.charAt(i) + \"\";\n                // \u6808\u4e3a\u7a7a\uff0c( \u64cd\u4f5c\u7b26\uff0c\u6216\u8005    \u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7\u5927\u4e8e\u6808\u9876\u4f18\u5148\u7ea7    &amp;&amp;    \u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7\u4e0d\u662f(  )\u7684\u4f18\u5148\u7ea7\u53ca\n                // \u662f ) \u4e0d\u80fd\u76f4\u63a5\u5165\u6808\n                if (stack.isEmpty() || LEFT.equals(each)\n                        || ((calcLevel(each) &gt; calcLevel(stack.peek())) &amp;&amp; calcLevel(each) &lt; LEVEL_HIGH)) {\n                    stack.push(each);\n                } else if (!stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek())) {\n                    // \u6808\u975e\u7a7a\uff0c\u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u6808\u9876\u4f18\u5148\u7ea7\u65f6\u51fa\u6808\u5165\u5217\uff0c\u76f4\u5230\u6808\u4e3a\u7a7a\uff0c\u6216\u8005\u9047\u5230\u4e86(\uff0c\u6700\u540e\n                    while (!stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek())) {\n                        if (calcLevel(stack.peek()) == LEVEL_HIGH) {\n                            break;\n                        }\n                        data.add(stack.pop());\n                    }\n                    stack.push(each);\n                } else if (RIGHT.equals(each)) {\n                    // ) \u64cd\u4f5c\u7b26\uff0c\u4f9d\u6b21\u51fa\u6808\u5165\u5217\u76f4\u5230\u7a7a\u6808\u6216\u8005\u9047\u5230\u4e86\u7b2c\u4e00\u4e2a)\u64cd\u4f5c\u7b26\uff0c\u6b64\u65f6)\u51fa\u6808\n                    while (!stack.isEmpty() &amp;&amp; LEVEL_HIGH &gt;= calcLevel(stack.peek())) {\n                        if (LEVEL_HIGH == calcLevel(stack.peek())) {\n                            stack.pop();\n                            break;\n                        }\n                        data.add(stack.pop());\n                    }\n                }\n                start = i;                // \u524d\u4e00\u4e2a\u8fd0\u7b97\u7b26\u7684\u4f4d\u7f6e\n            } else if (i == s.length() - 1 || isSymbol(s.charAt(i + 1) + \"\")) {\n                each = start == 0 ? s.substring(start, i + 1) : s.substring(start + 1, i + 1);\n                if (isNumber(each)) {\n                    data.add(each);\n                    continue;\n                }\n                throw new RuntimeException(\"data not match number\");\n            }\n        }\n        // \u5982\u679c\u6808\u91cc\u8fd8\u6709\u5143\u7d20\uff0c\u6b64\u65f6\u5143\u7d20\u9700\u8981\u4f9d\u6b21\u51fa\u6808\u5165\u5217\uff0c\u53ef\u4ee5\u60f3\u8c61\u6808\u91cc\u5269\u4e0b\u6808\u9876\u4e3a/\uff0c\u6808\u5e95\u4e3a+\uff0c\n        // \u5e94\u8be5\u4f9d\u6b21\u51fa\u6808\u5165\u5217\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ffb\u8f6c\u6574\u4e2a stack \u6dfb\u52a0\u5230\u961f\u5217\n        Collections.reverse(stack);\n        data.addAll(new ArrayList&lt;&gt;(stack));\n        System.out.println(data);\n        return data;\n    }\n\n    /**\n     * \u7b97\u51fa\u7ed3\u679c\n     *\n     * @param list\n     * @return\n     */\n    public static Double doCalc(List&lt;String&gt; list) {\n        Double d = 0d;\n        if (list == null || list.isEmpty()) {\n            return null;\n        }\n        if (list.size() == 1) {\n            System.out.println(list);\n            d = Double.valueOf(list.get(0));\n            return d;\n        }\n        ArrayList&lt;String&gt; list1 = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; list.size(); i++) {\n            list1.add(list.get(i));\n            if (isSymbol(list.get(i))) {\n                Double d1 = doTheMath(list.get(i - 2), list.get(i - 1), list.get(i));\n                list1.remove(i);\n                list1.remove(i - 1);\n                list1.set(i - 2, d1 + \"\");\n                list1.addAll(list.subList(i + 1, list.size()));\n                break;\n            }\n        }\n        doCalc(list1);\n        return d;\n    }\n\n    /**\n     * \u8fd0\u7b97\n     *\n     * @param s1\n     * @param s2\n     * @param symbol\n     * @return\n     */\n    public static Double doTheMath(String s1, String s2, String symbol) {\n        Double result;\n        switch (symbol) {\n            case ADD:\n                result = Double.valueOf(s1) + Double.valueOf(s2);\n                break;\n            case MINUS:\n                result = Double.valueOf(s1) - Double.valueOf(s2);\n                break;\n            case TIMES:\n                result = Double.valueOf(s1) * Double.valueOf(s2);\n                break;\n            case DIVISION:\n                result = Double.valueOf(s1) / Double.valueOf(s2);\n                break;\n            default:\n                result = null;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        // String  math  = \"9+(3-1)*3+10/2\";\n        String math = \"12.8  +  (2  - 3.55)*4+10/5.0\";\n        try {\n            doCalc(doMatch(math));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_7","title":"\u516d\u3001\u9012\u5f52","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#61","title":"6.1 \u9012\u5f52\u5e94\u7528\u573a\u666f","text":"<p>\u770b\u4e2a\u5b9e\u9645\u5e94\u7528\u573a\u666f\uff0c\u8ff7\u5bab\u95ee\u9898(\u56de\u6eaf)\uff0c    \u9012\u5f52(Recursion)</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#62","title":"6.2 \u9012\u5f52\u7684\u6982\u5ff5","text":"<p>\u7b80\u5355\u7684\u8bf4:    \u9012\u5f52\u5c31\u662f\u65b9\u6cd5\u81ea\u5df1\u8c03\u7528\u81ea\u5df1,\u6bcf\u6b21\u8c03\u7528\u65f6\u4f20\u5165\u4e0d\u540c\u7684\u53d8\u91cf.\u9012\u5f52\u6709\u52a9\u4e8e\u7f16\u7a0b\u8005\u89e3\u51b3\u590d\u6742\u7684\u95ee\u9898,\u540c\u65f6  \u53ef\u4ee5\u8ba9\u4ee3\u7801\u53d8\u5f97\u7b80\u6d01\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#63","title":"6.3 \u9012\u5f52\u8c03\u7528\u673a\u5236","text":"<p>\u6211\u5217\u4e3e\u4e24\u4e2a\u5c0f\u6848\u4f8b,\u6765\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u9012\u5f52\uff0c\u90e8\u5206\u5b66\u5458\u5df2\u7ecf\u5b66\u4e60\u8fc7\u9012\u5f52\u4e86\uff0c\u8fd9\u91cc\u5728\u7ed9\u5927\u5bb6\u56de\u987e\u4e00\u4e0b\u9012\u5f52\u8c03\u7528\u673a\u5236</p> <ol> <li>\u6253\u5370\u95ee\u9898</li> <li>\u9636\u4e58\u95ee\u9898</li> <li>\u4f7f\u7528\u56fe\u89e3\u65b9\u5f0f\u8bf4\u660e\u4e86\u9012\u5f52\u7684\u8c03\u7528\u673a\u5236</li> </ol> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#64","title":"6.4 \u9012\u5f52\u80fd\u89e3\u51b3\u4ec0\u4e48\u6837\u7684\u95ee\u9898","text":"<p>\u9012\u5f52\u7528\u4e8e\u89e3\u51b3\u4ec0\u4e48\u6837\u7684\u95ee\u9898\uff1a 1. \u5404\u79cd\u6570\u5b66\u95ee\u9898\u5982: 8 \u7687\u540e\u95ee\u9898 , \u6c49\u8bfa\u5854, \u9636\u4e58\u95ee\u9898, \u8ff7\u5bab\u95ee\u9898, \u7403\u548c\u7bee\u5b50\u7684\u95ee\u9898(google \u7f16\u7a0b\u5927\u8d5b) 2. \u5404\u79cd\u7b97\u6cd5\u4e2d\u4e5f\u4f1a\u4f7f\u7528\u5230\u9012\u5f52\uff0c\u6bd4\u5982\u5feb\u6392\uff0c\u5f52\u5e76\u6392\u5e8f\uff0c\u4e8c\u5206\u67e5\u627e\uff0c\u5206\u6cbb\u7b97\u6cd5\u7b49. 3. \u5c06\u7528\u6808\u89e3\u51b3\u7684\u95ee\u9898--&gt;\u7b2c\u5f52\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#65","title":"6.5 \u9012\u5f52\u9700\u8981\u9075\u5b88\u7684\u91cd\u8981\u89c4\u5219","text":"<p>\u9012\u5f52\u9700\u8981\u9075\u5b88\u7684\u91cd\u8981\u89c4\u5219\uff1a</p> <ol> <li>\u6267\u884c\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53d7\u4fdd\u62a4\u7684\u72ec\u7acb\u7a7a\u95f4(\u6808\u7a7a\u95f4)</li> <li>\u65b9\u6cd5\u7684\u5c40\u90e8\u53d8\u91cf\u662f\u72ec\u7acb\u7684\uff0c\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd,    \u6bd4\u5982  n  \u53d8\u91cf</li> <li>\u5982\u679c\u65b9\u6cd5\u4e2d\u4f7f\u7528\u7684\u662f\u5f15\u7528\u7c7b\u578b\u53d8\u91cf(\u6bd4\u5982\u6570\u7ec4)\uff0c\u5c31\u4f1a\u5171\u4eab\u8be5\u5f15\u7528\u7c7b\u578b\u7684\u6570\u636e.</li> <li>\u9012\u5f52\u5fc5\u987b\u5411\u9000\u51fa\u9012\u5f52\u7684\u6761\u4ef6\u903c\u8fd1\uff0c\u5426\u5219\u5c31\u662f\u65e0\u9650\u9012\u5f52,\u51fa\u73b0  StackOverflowError\uff0c\u6b7b\u9f9f\u4e86</li> <li>\u5f53\u4e00\u4e2a\u65b9\u6cd5\u6267\u884c\u5b8c\u6bd5\uff0c\u6216\u8005\u9047\u5230  return\uff0c\u5c31\u4f1a\u8fd4\u56de\uff0c\u9075\u5b88\u8c01\u8c03\u7528\uff0c\u5c31\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c01\uff0c\u540c\u65f6\u5f53\u65b9\u6cd5\u6267\u884c\u5b8c\u6bd5\u6216\u8005\u8fd4\u56de\u65f6\uff0c\u8be5\u65b9\u6cd5\u4e5f\u5c31\u6267\u884c\u5b8c\u6bd5</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#66-","title":"6.6 \u9012\u5f52-\u8ff7\u5bab\u95ee\u9898","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#661","title":"6.6.1 \u8ff7\u5bab\u95ee\u9898","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#662","title":"6.6.2 \u4ee3\u7801\u5b9e\u73b0:","text":"<pre><code>public class MiGong {\n    public static void main(String[] args) {\n        //   \u5148\u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u6a21\u62df\u8ff7\u5bab\n        //   \u5730\u56fe\n        int[][] map = new int[8][7];\n        //   \u4f7f\u7528  1    \u8868\u793a\u5899\n        //   \u4e0a\u4e0b\u5168\u90e8\u7f6e\u4e3a  1\n        for (int i = 0; i &lt; 7; i++) {\n            map[0][i] = 1;\n            map[7][i] = 1;\n        }\n        //   \u5de6\u53f3\u5168\u90e8\u7f6e\u4e3a  1\n        for (int i = 0; i &lt; 8; i++) {\n            map[i][0] = 1;\n            map[i][6] = 1;\n        }\n        // \u8bbe\u7f6e\u6321\u677f,  1    \u8868\u793a\n        map[3][1] = 1;\n        map[3][2] = 1;\n        // map[1][2] = 1;\n        // map[2][2] = 1;\n        //   \u8f93\u51fa\u5730\u56fe\n        System.out.println(\"\u5730\u56fe\u7684\u60c5\u51b5\");\n        for (int i = 0; i &lt; 8; i++) {\n            for (int j = 0; j &lt; 7; j++) {\n                System.out.print(map[i][j] + \"  \");\n            }\n            System.out.println();\n        }\n        // \u4f7f\u7528\u9012\u5f52\u56de\u6eaf\u7ed9\u5c0f\u7403\u627e\u8def\n        // setWay(map,  1,  1);\n        setWay2(map, 1, 1);\n        // \u8f93\u51fa\u65b0\u7684\u5730\u56fe,    \u5c0f\u7403\u8d70\u8fc7\uff0c\u5e76\u6807\u8bc6\u8fc7\u7684\u9012\u5f52\n        System.out.println(\"\u5c0f\u7403\u8d70\u8fc7\uff0c\u5e76\u6807\u8bc6\u8fc7\u7684    \u5730\u56fe\u7684\u60c5\u51b5\");\n        for (int i = 0; i &lt; 8; i++) {\n            for (int j = 0; j &lt; 7; j++) {\n                System.out.print(map[i][j] + \"  \");\n            }\n            System.out.println();\n        }\n    }\n    // \u4f7f\u7528\u9012\u5f52\u56de\u6eaf\u6765\u7ed9\u5c0f\u7403\u627e\u8def\n    // \u8bf4\u660e\n    // 1.map \u8868\u793a\u5730\u56fe\n    // 2.i,j \u8868\u793a\u4ece\u5730\u56fe\u7684\u54ea\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u51fa\u53d1    (1,1)\n    // 3.\u5982\u679c\u5c0f\u7403\u80fd\u5230    map[6][5]   \u4f4d\u7f6e\uff0c\u5219\u8bf4\u660e\u901a\u8def\u627e\u5230.\n    // 4.\u7ea6\u5b9a\uff1a\u5f53map[i][j]\u4e3a0\u8868\u793a\u8be5\u70b9\u6ca1\u6709\u8d70\u8fc7\u5f53\u4e3a 1 \u8868\u793a\u5899\uff1b2\u8868\u793a\u901a\u8def\u53ef\u4ee5\u8d70\uff1b3\u8868\u793a\u8be5\u70b9\u5df2\u7ecf\u8d70\u8fc7\uff0c\u4f46\u662f\u8d70\u4e0d\u901a\n    // 5.\u5728\u8d70\u8ff7\u5bab\u65f6\uff0c\u9700\u8981\u786e\u5b9a\u4e00\u4e2a\u7b56\u7565(\u65b9\u6cd5)   \u4e0b-&gt;\u53f3-&gt;\u4e0a-&gt;\u5de6    ,    \u5982\u679c\u8be5\u70b9\u8d70\u4e0d\u901a\uff0c\u518d\u56de\u6eaf\n\n    /**\n     * @param map \u8868\u793a\u5730\u56fe\n     * @param i \u4ece\u54ea\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u627e\n     * @param j\n     * @return \u5982\u679c\u627e\u5230\u901a\u8def\uff0c\u5c31\u8fd4\u56de  true,    \u5426\u5219\u8fd4\u56de false\n     */\n    public static boolean setWay(int[][] map, int i, int j) {\n        if (map[6][5] == 2) {  //   \u901a\u8def\u5df2\u7ecf\u627e\u5230  ok\n            return true;\n        } else {\n            if (map[i][j] == 0) {  // \u5982\u679c\u5f53\u524d\u8fd9\u4e2a\u70b9\u8fd8\u6ca1\u6709\u8d70\u8fc7\n                // \u6309\u7167\u7b56\u7565    \u4e0b-&gt;\u53f3-&gt;\u4e0a-&gt;\u5de6        \u8d70\n                map[i][j] = 2;  //   \u5047\u5b9a\u8be5\u70b9\u662f\u53ef\u4ee5\u8d70\u901a.\n                if (setWay(map, i + 1, j)) {// \u5411\u4e0b\u8d70\n                    return true;\n                } else if (setWay(map, i, j + 1)) {  // \u5411\u53f3\u8d70\n                    return true;\n                } else if (setWay(map, i - 1, j)) {  // \u5411\u4e0a\n                    return true;\n                } else if (setWay(map, i, j - 1)) {  //    \u5411\u5de6\u8d70\n                    return true;\n                } else {\n                    // \u8bf4\u660e\u8be5\u70b9\u662f\u8d70\u4e0d\u901a\uff0c\u662f\u6b7b\u8def\n                    map[i][j] = 3;\n                    return false;\n                }\n            } else { // \u5982\u679c map[i][j] != 0 , \u53ef\u80fd\u662f 1\uff0c 2\uff0c 3\n                return false;\n            }\n        }\n    }\n\n    // \u4fee\u6539\u627e\u8def\u7684\u7b56\u7565\uff0c\u6539\u6210    \u4e0a-&gt;\u53f3-&gt;\u4e0b-&gt;\u5de6\n    public static boolean setWay2(int[][] map, int i, int j) {\n        if (map[6][5] == 2) {  //   \u901a\u8def\u5df2\u7ecf\u627e\u5230  ok\n            return true;\n        } else {\n            if (map[i][j] == 0) {  // \u5982\u679c\u5f53\u524d\u8fd9\u4e2a\u70b9\u8fd8\u6ca1\u6709\u8d70\u8fc7\n                // \u6309\u7167\u7b56\u7565    \u4e0a-&gt;\u53f3-&gt;\u4e0b-&gt;\u5de6\n                map[i][j] = 2;  //   \u5047\u5b9a\u8be5\u70b9\u662f\u53ef\u4ee5\u8d70\u901a.\n                if (setWay2(map, i - 1, j)) {// \u5411\u4e0a\u8d70\n                    return true;\n                } else if (setWay2(map, i, j + 1)) {  // \u5411\u53f3\u8d70\n                    return true;\n                } else if (setWay2(map, i + 1, j)) {  // \u5411\u4e0b\n                    return true;\n                } else if (setWay2(map, i, j - 1)) {  //    \u5411\u5de6\u8d70\n                    return true;\n                } else {\n                    // \u8bf4\u660e\u8be5\u70b9\u662f\u8d70\u4e0d\u901a\uff0c\u662f\u6b7b\u8def\n                    map[i][j] = 3;\n                    return false;\n                }\n            } else { // \u5982\u679c map[i][j] != 0 , \u53ef\u80fd\u662f 1\uff0c 2\uff0c 3\n                return false;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#663","title":"6.6.3 \u5bf9\u8ff7\u5bab\u95ee\u9898\u7684\u8ba8\u8bba","text":"<ol> <li>\u5c0f\u7403\u5f97\u5230\u7684\u8def\u5f84\uff0c\u548c\u7a0b\u5e8f\u5458\u8bbe\u7f6e\u7684\u627e\u8def\u7b56\u7565\u6709\u5173\u5373\uff1a\u627e\u8def\u7684\u4e0a\u4e0b\u5de6\u53f3\u7684\u987a\u5e8f\u76f8\u5173</li> <li>\u518d\u5f97\u5230\u5c0f\u7403\u8def\u5f84\u65f6\uff0c\u53ef\u4ee5\u5148\u4f7f\u7528(\u4e0b\u53f3\u4e0a\u5de6)\uff0c\u518d\u6539\u6210(\u4e0a\u53f3\u4e0b\u5de6)\uff0c\u770b\u770b\u8def\u5f84\u662f\u4e0d\u662f\u6709\u53d8\u5316</li> <li>\u6d4b\u8bd5\u56de\u6eaf\u73b0\u8c61</li> <li>\u601d\u8003:    \u5982\u4f55\u6c42\u51fa\u6700\u77ed\u8def\u5f84?        \u601d\u8def-\u300b\u4ee3\u7801\u5b9e\u73b0.</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#67-","title":"6.7  \u9012\u5f52-\u516b\u7687\u540e\u95ee\u9898(\u56de\u6eaf\u7b97\u6cd5)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#671","title":"6.7.1 \u516b\u7687\u540e\u95ee\u9898\u4ecb\u7ecd","text":"<p>\u200b   \u516b\u7687\u540e\u95ee\u9898\uff0c\u662f\u4e00\u4e2a\u53e4\u8001\u800c\u8457\u540d\u7684\u95ee\u9898\uff0c\u662f\u56de\u6eaf\u7b97\u6cd5\u7684\u5178\u578b\u6848\u4f8b\u3002\u8be5\u95ee\u9898\u662f\u56fd\u9645\u897f\u6d0b\u68cb\u68cb\u624b\u9a6c\u514b\u65af\u00b7\u8d1d\u745f\u5c14\u4e8e1848 \u5e74\u63d0\u51fa\uff1a\u5728 8\u00d78 \u683c\u7684\u56fd\u9645\u8c61\u68cb\u4e0a\u6446\u653e\u516b\u4e2a\u7687\u540e\uff0c\u4f7f\u5176\u4e0d\u80fd\u4e92\u76f8\u653b\u51fb\uff0c\u5373\uff1a\u4efb\u610f\u4e24\u4e2a\u7687\u540e\u90fd\u4e0d\u80fd\u5904\u4e8e\u540c\u4e00\u884c\u3001\u540c\u4e00\u5217\u6216\u540c\u4e00\u659c\u7ebf\u4e0a\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u6446\u6cd5(92)\u3002</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#672","title":"6.7.2 \u516b\u7687\u540e\u95ee\u9898\u7b97\u6cd5\u601d\u8def\u5206\u6790","text":"<ol> <li> <p>\u7b2c\u4e00\u4e2a\u7687\u540e\u5148\u653e\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217</p> </li> <li> <p>\u7b2c\u4e8c\u4e2a\u7687\u540e\u653e\u5728\u7b2c\u4e8c\u884c\u7b2c\u4e00\u5217\u3001\u7136\u540e\u5224\u65ad\u662f\u5426  OK\uff0c   \u5982\u679c\u4e0d  OK\uff0c\u7ee7\u7eed\u653e\u5728\u7b2c\u4e8c\u5217\u3001\u7b2c\u4e09\u5217\u3001\u4f9d\u6b21\u628a\u6240\u6709\u5217\u90fd\u653e\u5b8c\uff0c\u627e\u5230\u4e00\u4e2a\u5408\u9002</p> </li> <li> <p>\u7ee7\u7eed\u7b2c\u4e09\u4e2a\u7687\u540e\uff0c\u8fd8\u662f\u7b2c\u4e00\u5217\u3001\u7b2c\u4e8c\u5217\u2026\u2026\u76f4\u5230\u7b2c  8  \u4e2a\u7687\u540e\u4e5f\u80fd\u653e\u5728\u4e00\u4e2a\u4e0d\u51b2\u7a81\u7684\u4f4d\u7f6e\uff0c\u7b97\u662f\u627e\u5230\u4e86\u4e00\u4e2a\u6b63\u786e\u89e3</p> </li> <li> <p>\u5f53\u5f97\u5230\u4e00\u4e2a\u6b63\u786e\u89e3\u65f6\uff0c\u5728\u6808\u56de\u9000\u5230\u4e0a\u4e00\u4e2a\u6808\u65f6\uff0c\u5c31\u4f1a\u5f00\u59cb\u56de\u6eaf\uff0c\u5373\u5c06\u7b2c\u4e00\u4e2a\u7687\u540e\uff0c\u653e\u5230\u7b2c\u4e00\u5217\u7684\u6240\u6709\u6b63\u786e\u89e3\uff0c\u5168\u90e8\u5f97\u5230.</p> </li> <li> <p>\u7136\u540e\u56de\u5934\u7ee7\u7eed\u7b2c\u4e00\u4e2a\u7687\u540e\u653e\u7b2c\u4e8c\u5217\uff0c\u540e\u9762\u7ee7\u7eed\u5faa\u73af\u6267\u884c   1,2,3,4  \u7684\u6b65\u9aa4</p> </li> <li> <p>\u793a\u610f\u56fe\uff1a</p> </li> </ol> <p></p> <p>\u8bf4\u660e\uff1a \u7406\u8bba\u4e0a\u5e94\u8be5\u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6765\u8868\u793a\u68cb\u76d8\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u901a\u8fc7\u7b97\u6cd5\uff0c\u7528\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5373\u53ef\u89e3\u51b3\u95ee\u9898. arr[8] = {0 , 4, 7, 5, 2, 6, 1, 3} //\u5bf9\u5e94 arr \u4e0b\u6807 \u8868\u793a\u7b2c\u51e0\u884c\uff0c\u5373\u7b2c\u51e0\u4e2a\u7687\u540e\uff0carr[i] = val , val \u8868\u793a\u7b2c i+1 \u4e2a\u7687\u540e\uff0c\u653e\u5728\u7b2c i+1 \u884c\u7684\u7b2c val+1 \u5217</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#673","title":"6.7.3 \u516b\u7687\u540e\u95ee\u9898\u7b97\u6cd5\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>public class Queens8 {\n    static int max = 8; // \u6307\u6709\u516b\u4e2a\u7687\u540e\n    static int[] arr = new int[max];    // \u4e0b\u6807\u4ee3\u8868\u7b2ci+1\u4e2a\u7687\u540e\u548c\u7b2ci+1\u5217\uff0carr[i]=val\uff0cval+1\u4ee3\u8868\u5728\u7b2c\u51e0\u5217\n    static int result;\n    static int conflictCount;\n    static int checkCount;\n\n    public static void main(String[] args) {\n        check(0);\n        System.out.println(\"\u5171\u6709\" + result + \"\u4e2a\u7ed3\u679c\");\n        System.out.printf(\"\u5224\u65ad\u4e86%d\u6b21\\n\", conflictCount);\n        System.out.printf(\"\u68c0\u67e5\u4e86%d\u6b21\\n\", checkCount);\n    }\n\n    /**\n     * \u5f00\u59cb\u653e\u7687\u540e\n     * \u6bcf\u4e00\u4e2acheck\u9012\u5f52\u4e2d\u90fd\u5305\u542b\u4e00\u4e2afor\u5faa\u73af\uff0c\u53ef\u4ee5\u5c06\u5168\u90e8\u7684\u7ed3\u679c\u90fd\u67e5\u8be2\u51fa\u6765\n     */\n    public static void check(int n) {\n        if (n == max) {      // \u5f53n==max\u7684\u65f6\u5019\u8bf4\u660e\u524d\u9762\u7684\u7687\u540e\u90fd\u653e\u5b8c\u4e86\uff0c\u6ca1\u6709\u95ee\u9898\n            result++;\n            return;\n        }\n        for (int i = 0; i &lt; arr.length; i++) {\n            checkCount++;\n            arr[n] = i; // \u5148\u653e\u5728\u7b2ci+1\u5217\n            if (!conflict(n)) {      // \u5982\u679c\u4e0d\u51b2\u7a81\n                check(n + 1);\n            }\n            // \u5982\u679c\u51b2\u7a81\u5219\u7ee7\u7eed\u5faa\u73af\n        }\n    }\n\n\n    /**\n     * \u5224\u65ad\u7b2cn\u4e2a\u7687\u540e\u4e0e\u524d\u9762\u7684\u6709\u6ca1\u6709\u51b2\u7a81\n     *\n     * @param n \u7b2cn\u4e2a\u7687\u540e\uff0c\u6570\u7ec4\u4e0b\u6807\n     * @return \u51b2\u7a81\u8fd4\u56detrue\uff0c\u4e0d\u51b2\u7a81\u8fd4\u56defalse\n     */\n    public static boolean conflict(int n) {\n        for (int i = 0; i &lt; n; i++) {\n            conflictCount++;\n            if (arr[n] == arr[i] || Math.abs(n - i) == Math.abs(arr[n] - arr[i])) {\n                // \u5982\u679c\u5728\u540c\u4e00\u5217\u6216\u8005\u5728\u540c\u4e00\u659c\u7ebf\uff0c\u5219\u51b2\u7a81\n                return true;\n            }\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_8","title":"\u4e03\u3001\u6392\u5e8f\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#71","title":"7.1 \u6392\u5e8f\u7b97\u6cd5\u7684\u4ecb\u7ecd","text":"<p>\u6392\u5e8f\u4e5f\u79f0\u6392\u5e8f\u7b97\u6cd5(Sort Algorithm)\uff0c\u6392\u5e8f\u662f\u5c06\u4e00\u7ec4\u6570\u636e\uff0c\u4f9d\u6307\u5b9a\u7684\u987a\u5e8f\u8fdb\u884c\u6392\u5217\u7684\u8fc7\u7a0b\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#72","title":"7.2 \u6392\u5e8f\u7684\u5206\u7c7b\uff1a","text":"<ol> <li>\u5185\u90e8\u6392\u5e8f:    \u6307\u5c06\u9700\u8981\u5904\u7406\u7684\u6240\u6709\u6570\u636e\u90fd\u52a0\u8f7d\u5230\u5185\u90e8\u5b58\u50a8\u5668(\u5185\u5b58)\u4e2d\u8fdb\u884c\u6392\u5e8f\u3002</li> <li>\u5916\u90e8\u6392\u5e8f\u6cd5\uff1a    \u6570\u636e\u91cf\u8fc7\u5927\uff0c\u65e0\u6cd5\u5168\u90e8\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u9700\u8981\u501f\u52a9\u5916\u90e8\u5b58\u50a8(\u6587\u4ef6\u7b49)\u8fdb\u884c\u6392\u5e8f\u3002</li> <li>\u5e38\u89c1\u7684\u6392\u5e8f\u7b97\u6cd5\u5206\u7c7b(\u89c1\u4e0b\u56fe):</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#73","title":"7.3 \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#731","title":"7.3.1 \u5ea6\u91cf\u4e00\u4e2a\u7a0b\u5e8f(\u7b97\u6cd5)\u6267\u884c\u65f6\u95f4\u7684\u4e24\u79cd\u65b9\u6cd5","text":"<ol> <li>\u4e8b\u540e\u7edf\u8ba1\u7684\u65b9\u6cd5    \u8fd9\u79cd\u65b9\u6cd5\u53ef\u884c,    \u4f46\u662f\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\u4e00\u662f\u8981\u60f3\u5bf9\u8bbe\u8ba1\u7684\u7b97\u6cd5\u7684\u8fd0\u884c\u6027\u80fd\u8fdb\u884c\u8bc4\u6d4b\uff0c\u9700\u8981\u5b9e\u9645\u8fd0\u884c\u8be5\u7a0b\u5e8f\uff1b\u4e8c\u662f\u6240\u5f97\u65f6\u95f4\u7684\u7edf\u8ba1\u91cf\u4f9d\u8d56\u4e8e\u8ba1\u7b97\u673a\u7684\u786c\u4ef6\u3001\u8f6f\u4ef6\u7b49\u73af\u5883\u56e0\u7d20,    \u8fd9\u79cd\u65b9\u5f0f\uff0c\u8981\u5728\u540c\u4e00\u53f0\u8ba1\u7b97\u673a\u7684\u76f8\u540c\u72b6\u6001\u4e0b\u8fd0\u884c\uff0c\u624d\u80fd\u6bd4\u8f83\u90a3\u4e2a\u7b97\u6cd5\u901f\u5ea6\u66f4\u5feb\u3002 </li> <li>\u4e8b\u524d\u4f30\u7b97\u7684\u65b9\u6cd5    \u901a\u8fc7\u5206\u6790\u67d0\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6765\u5224\u65ad\u54ea\u4e2a\u7b97\u6cd5\u66f4\u4f18. </li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#732","title":"7.3.2 \u65f6\u95f4\u9891\u5ea6","text":"<ul> <li>\u57fa\u672c\u4ecb\u7ecd</li> </ul> <p>\u65f6\u95f4\u9891\u5ea6\uff1a\u4e00\u4e2a\u7b97\u6cd5\u82b1\u8d39\u7684\u65f6\u95f4\u4e0e\u7b97\u6cd5\u4e2d\u8bed\u53e5\u7684\u6267\u884c\u6b21\u6570\u6210\u6b63\u6bd4\u4f8b\uff0c\u54ea\u4e2a\u7b97\u6cd5\u4e2d\u8bed\u53e5\u6267\u884c\u6b21\u6570\u591a\uff0c\u5b83\u82b1\u8d39\u65f6\u95f4\u5c31\u591a\u3002\u4e00\u4e2a\u7b97\u6cd5\u4e2d\u7684\u8bed\u53e5\u6267\u884c\u6b21\u6570\u79f0\u4e3a\u8bed\u53e5\u9891\u5ea6\u6216\u65f6\u95f4\u9891\u5ea6\u3002\u8bb0\u4e3a  T(n)\u3002[\u4e3e\u4f8b\u8bf4\u660e]</p> <ul> <li>\u4e3e\u4f8b\u8bf4\u660e-\u57fa\u672c\u6848\u4f8b</li> </ul> <p>\u6bd4\u5982\u8ba1\u7b97  1-100  \u6240\u6709\u6570\u5b57\u4e4b\u548c,   \u6211\u4eec\u8bbe\u8ba1\u4e24\u79cd\u7b97\u6cd5\uff1a</p> <p></p> <ul> <li>\u4e3e\u4f8b\u8bf4\u660e-\u5ffd\u7565\u5e38\u6570\u9879</li> </ul> <p></p> <p>\u7ed3\u8bba: 1. 2n+20    \u548c    2n    \u968f\u7740  n    \u53d8\u5927\uff0c\u6267\u884c\u66f2\u7ebf\u65e0\u9650\u63a5\u8fd1,  20  \u53ef\u4ee5\u5ffd\u7565 2. 3n+10    \u548c    3n    \u968f\u7740  n    \u53d8\u5927\uff0c\u6267\u884c\u66f2\u7ebf\u65e0\u9650\u63a5\u8fd1,  10  \u53ef\u4ee5\u5ffd\u7565</p> <ul> <li>\u4e3e\u4f8b\u8bf4\u660e-\u5ffd\u7565\u4f4e\u6b21\u9879</li> </ul> <p></p> <p>\u7ed3\u8bba: 1. 2n^2+3n+10    \u548c    2n^2    \u968f\u7740  n    \u53d8\u5927,    \u6267\u884c\u66f2\u7ebf\u65e0\u9650\u63a5\u8fd1,    \u53ef\u4ee5\u5ffd\u7565    3n+10  2. n^2+5n+20    \u548c    n^2    \u968f\u7740  n    \u53d8\u5927,\u6267\u884c\u66f2\u7ebf\u65e0\u9650\u63a5\u8fd1,    \u53ef\u4ee5\u5ffd\u7565    5n+20</p> <ul> <li>\u4e3e\u4f8b\u8bf4\u660e-\u5ffd\u7565\u7cfb\u6570</li> </ul> <p></p> <p>\u7ed3\u8bba: 1. \u968f\u7740  n  \u503c\u53d8\u5927\uff0c5n^2+7n    \u548c    3n^2  + 2n    \uff0c\u6267\u884c\u66f2\u7ebf\u91cd\u5408,    \u8bf4\u660e\u8fd9\u79cd\u60c5\u51b5\u4e0b,  5  \u548c  3  \u53ef\u4ee5\u5ffd\u7565\u3002 2. \u800c  n^3+5n \u548c 6n^3+4n  \uff0c\u6267\u884c\u66f2\u7ebf\u5206\u79bb\uff0c\u8bf4\u660e\u591a\u5c11\u6b21\u65b9\u662f\u5173\u952e</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#733","title":"7.3.3 \u65f6\u95f4\u590d\u6742\u5ea6","text":"<ol> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b97\u6cd5\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u8bed\u53e5\u7684\u91cd\u590d\u6267\u884c\u6b21\u6570\u662f\u95ee\u9898\u89c4\u6a21 n \u7684\u67d0\u4e2a\u51fd\u6570\uff0c\u7528 T(n)\u8868\u793a\uff0c\u82e5\u6709\u67d0\u4e2a\u8f85\u52a9\u51fd\u6570 f(n)\uff0c\u4f7f\u5f97\u5f53 n \u8d8b\u8fd1\u4e8e\u65e0\u7a77\u5927\u65f6\uff0cT(n) / f(n) \u7684\u6781\u9650\u503c\u4e3a\u4e0d\u7b49\u4e8e\u96f6\u7684\u5e38\u6570\uff0c\u5219\u79f0 f(n)\u662f T(n)\u7684\u540c\u6570\u91cf\u7ea7\u51fd\u6570\u3002\u8bb0\u4f5c T(n)=\uff2f( f(n) )\uff0c\u79f0\uff2f( f(n) ) \u4e3a\u7b97\u6cd5\u7684\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7b80\u79f0\u65f6\u95f4\u590d\u6742\u5ea6\u3002</li> <li>T(n)   \u4e0d\u540c\uff0c\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u80fd\u76f8\u540c\u3002   \u5982\uff1aT(n)=n\u00b2+7n+6    \u4e0e   T(n)=3n\u00b2+2n+2    \u5b83\u4eec\u7684  T(n) \u4e0d\u540c\uff0c\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u540c\uff0c\u90fd\u4e3a  O(n\u00b2)\u3002</li> <li>\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u65b9\u6cd5\uff1a</li> <li>\u7528\u5e38\u6570  1  \u4ee3\u66ff\u8fd0\u884c\u65f6\u95f4\u4e2d\u7684\u6240\u6709\u52a0\u6cd5\u5e38\u6570     T(n)=n\u00b2+7n+6   =&gt; T(n)=n\u00b2+7n+1</li> <li>\u4fee\u6539\u540e\u7684\u8fd0\u884c\u6b21\u6570\u51fd\u6570\u4e2d\uff0c\u53ea\u4fdd\u7559\u6700\u9ad8\u9636\u9879     T(n)=n\u00b2+7n+1  =&gt; T(n) =  n\u00b2</li> <li>\u53bb\u9664\u6700\u9ad8\u9636\u9879\u7684\u7cfb\u6570   T(n)  = n\u00b2    =&gt; T(n)  = n\u00b2    =&gt;  O(n\u00b2)</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#734","title":"7.3.4 \u5e38\u89c1\u7684\u65f6\u95f4\u590d\u6742\u5ea6","text":"<ol> <li>\u5e38\u6570\u9636  O(1)</li> <li>\u5bf9\u6570\u9636  O(log2n)</li> <li>\u7ebf\u6027\u9636  O(n)</li> <li>\u7ebf\u6027\u5bf9\u6570\u9636  O(nlog2n)</li> <li>\u5e73\u65b9\u9636  O(n^2)</li> <li>\u7acb\u65b9\u9636  O(n^3)</li> <li>k  \u6b21\u65b9\u9636  O(n^k)</li> <li>\u6307\u6570\u9636  O(2^n)</li> </ol> <p>\u5e38\u89c1\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5bf9\u5e94\u7684\u56fe:</p> <p></p> <p>\u8bf4\u660e\uff1a 1. \u5e38\u89c1\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u4e3a\uff1a\u039f(1)\uff1c\u039f(log2n)\uff1c\u039f(n)\uff1c\u039f(nlog2n)\uff1c\u039f(n2)\uff1c\u039f(n3)\uff1c\u039f(nk)\uff1c \u039f(2n)   \uff0c\u968f\u7740\u95ee\u9898\u89c4\u6a21  n  \u7684\u4e0d\u65ad\u589e\u5927\uff0c\u4e0a\u8ff0\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u65ad\u589e\u5927\uff0c\u7b97\u6cd5\u7684\u6267\u884c\u6548\u7387\u8d8a\u4f4e</p> <ol> <li> <p>\u4ece\u56fe\u4e2d\u53ef\u89c1\uff0c\u6211\u4eec\u5e94\u8be5\u5c3d\u53ef\u80fd\u907f\u514d\u4f7f\u7528\u6307\u6570\u9636\u7684\u7b97\u6cd5</p> </li> <li> <p>\u5e38\u6570\u9636  O(1)</p> <p></p> </li> <li> <p>\u5bf9\u6570\u9636  O(log2n)</p> <p></p> </li> <li> <p>\u7ebf\u6027\u9636  O(n)</p> <p></p> </li> <li> <p>\u7ebf\u6027\u5bf9\u6570\u9636  O(nlogMN)</p> <p></p> </li> <li> <p>\u5e73\u65b9\u9636  O(n\u00b2)</p> <p></p> </li> <li> <p>\u7acb\u65b9\u9636  O(n\u00b3)\u3001K  \u6b21\u65b9\u9636  O(nk)       \u8bf4\u660e\uff1a\u53c2\u8003\u4e0a\u9762\u7684  O(n\u00b2)    \u53bb\u7406\u89e3\u5c31\u597d\u4e86\uff0cO(n\u00b3)\u76f8\u5f53\u4e8e\u4e09\u5c42  n  \u5faa\u73af\uff0c\u5176\u5b83\u7684\u7c7b\u4f3c</p> </li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#735","title":"7.3.5 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6","text":"<p>\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6307\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5b9e\u4f8b\u5747\u4ee5\u7b49\u6982\u7387\u51fa\u73b0\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u3002</p> <p>\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u79f0\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4e00\u822c\u8ba8\u8bba\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u662f\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff1a\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u7b97\u6cd5\u5728\u4efb\u4f55\u8f93\u5165\u5b9e\u4f8b\u4e0a\u8fd0\u884c\u65f6\u95f4\u7684\u754c\u9650\uff0c\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u6bd4\u6700\u574f\u60c5\u51b5\u66f4\u957f\u3002</p> <p>\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5426\u4e00\u81f4\uff0c\u548c\u7b97\u6cd5\u6709\u5173(\u5982\u56fe:)</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#74","title":"7.4 \u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u7b80\u4ecb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#741","title":"7.4.1 \u57fa\u672c\u4ecb\u7ecd","text":"<ol> <li>\u7c7b\u4f3c\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8ba8\u8bba\uff0c\u4e00\u4e2a\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6(Space  Complexity)\u5b9a\u4e49\u4e3a\u8be5\u7b97\u6cd5\u6240\u8017\u8d39\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5b83\u4e5f\u662f\u95ee\u9898\u89c4\u6a21  n  \u7684\u51fd\u6570\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6(Space Complexity)\u662f\u5bf9\u4e00\u4e2a\u7b97\u6cd5\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4e34\u65f6\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5927\u5c0f\u7684\u91cf\u5ea6\u3002\u6709\u7684\u7b97\u6cd5\u9700\u8981\u5360\u7528\u7684\u4e34\u65f6\u5de5\u4f5c\u5355\u5143\u6570\u4e0e\u89e3\u51b3\u95ee\u9898\u7684\u89c4\u6a21 n \u6709\u5173\uff0c\u5b83\u968f\u7740 n \u7684\u589e\u5927\u800c\u589e\u5927\uff0c\u5f53 n \u8f83\u5927\u65f6\uff0c\u5c06\u5360\u7528\u8f83\u591a\u7684\u5b58\u50a8\u5355\u5143\uff0c\u4f8b\u5982\u5feb\u901f\u6392\u5e8f\u548c\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5, \u57fa\u6570\u6392\u5e8f\u5c31\u5c5e\u4e8e\u8fd9\u79cd\u60c5\u51b5</li> <li>\u5728\u505a\u7b97\u6cd5\u5206\u6790\u65f6\uff0c\u4e3b\u8981\u8ba8\u8bba\u7684\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4ece\u7528\u6237\u4f7f\u7528\u4f53\u9a8c\u4e0a\u770b\uff0c\u66f4\u770b\u91cd\u7684\u7a0b\u5e8f\u6267\u884c\u7684\u901f\u5ea6\u3002\u4e00\u4e9b\u7f13\u5b58\u4ea7\u54c1(redis,  memcache)\u548c\u7b97\u6cd5(\u57fa\u6570\u6392\u5e8f)\u672c\u8d28\u5c31\u662f\u7528\u7a7a\u95f4\u6362\u65f6\u95f4.</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#75","title":"7.5 \u5192\u6ce1\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#751","title":"7.5.1 \u57fa\u672c\u4ecb\u7ecd","text":"<p>\u5192\u6ce1\u6392\u5e8f\uff08Bubble Sorting\uff09\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u901a\u8fc7\u5bf9\u5f85\u6392\u5e8f\u5e8f\u5217\u4ece\u524d\u5411\u540e\uff08\u4ece\u4e0b\u6807\u8f83\u5c0f\u7684\u5143\u7d20\u5f00\u59cb\uff09,\u4f9d\u6b21\u6bd4\u8f83\u76f8\u90bb\u5143\u7d20\u7684\u503c\uff0c\u82e5\u53d1\u73b0\u9006\u5e8f\u5219\u4ea4\u6362\uff0c\u4f7f\u503c\u8f83\u5927\u7684\u5143\u7d20\u9010\u6e10\u4ece\u524d\u79fb\u5411\u540e\u90e8\uff0c\u5c31\u8c61\u6c34\u5e95\u4e0b\u7684\u6c14\u6ce1\u4e00\u6837\u9010\u6e10\u5411\u4e0a\u5192\u3002</p> <p>\u4f18\u5316\uff1a \u56e0\u4e3a\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5404\u5143\u7d20\u4e0d\u65ad\u63a5\u8fd1\u81ea\u5df1\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u4e00\u8d9f\u6bd4\u8f83\u4e0b\u6765\u6ca1\u6709\u8fdb\u884c\u8fc7\u4ea4\u6362\uff0c\u5c31\u8bf4\u660e\u5e8f\u5217\u6709\u5e8f\uff0c\u56e0\u6b64\u8981\u5728\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u6807\u5fd7 flag \u5224\u65ad\u5143\u7d20\u662f\u5426\u8fdb\u884c\u8fc7\u4ea4\u6362\u3002\u4ece\u800c\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u6bd4\u8f83\u3002(\u8fd9\u91cc\u8bf4\u7684\u4f18\u5316\uff0c\u53ef\u4ee5\u5728\u5192\u6ce1\u6392\u5e8f\u5199\u597d\u540e\uff0c\u518d\u8fdb\u884c)</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#752","title":"7.5.2 \u6f14\u793a\u5192\u6ce1\u8fc7\u7a0b\u7684\u4f8b\u5b50(\u56fe\u89e3)","text":"<p>\u5c0f\u7ed3\u4e0a\u9762\u7684\u56fe\u89e3\u8fc7\u7a0b:</p> <ol> <li> <p>\u4e00\u5171\u8fdb\u884c\u6570\u7ec4\u7684\u5927\u5c0f -1 \u6b21\u5927\u7684\u5faa\u73af</p> </li> <li> <p>\u6bcf\u4e00\u8d9f\u6392\u5e8f\u7684\u6b21\u6570\u5728\u9010\u6e10\u7684\u51cf\u5c11</p> </li> <li> <p>\u5982\u679c\u6211\u4eec\u53d1\u73b0\u5728\u67d0\u8d9f\u6392\u5e8f\u4e2d\uff0c\u6ca1\u6709\u53d1\u751f\u4e00\u6b21\u4ea4\u6362\uff0c\u53ef\u4ee5\u63d0\u524d\u7ed3\u675f\u5192\u6ce1\u6392\u5e8f\u3002\u8fd9\u4e2a\u5c31\u662f\u4f18\u5316 </p> </li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#753","title":"7.5.3 \u5192\u6ce1\u6392\u5e8f\u5e94\u7528\u5b9e\u4f8b","text":"<p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>public class BubbleSort {\n    public static void main(String[] args) {\n        // int[] array = {-1, -2, 30, -4};\n        // bubbleSort(array);\n        // System.out.println(\"array = \" + Arrays.toString(array));\n\n        // \u6d4b\u8bd5\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\n        int[] array = new int[80000];\n        for (int i = 0; i &lt; array.length; i++) {\n            array[i] = (int) (Math.random() * 80000);\n        }\n        long time1 = System.currentTimeMillis();\n        bubbleSort(array);\n        long time2 = System.currentTimeMillis();\n        System.out.println(\"\u5192\u6ce1\u6392\u5e8f\u6267\u884c\u7684\u65f6\u95f4\u4e3a\uff1a\" + (time2 - time1) + \"\u7eb3\u79d2\");\n    }\n\n    public static void sort(int[] array) {\n        // \u5192\u6ce1\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\n        boolean flag = false;   // \u7528\u6765\u6807\u8bc6\u8be5\u8d9f\u6392\u5e8f\u662f\u5426\u6709\u53d8\u91cf\u4ea4\u6362\n        for (int i = 0; i &lt; array.length - 1; i++) {\n            for (int j = 0; j &lt; array.length - i - 1; j++) {\n                if (array[j] &gt; array[j + 1]) {\n                    flag = true;\n                    int temp = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = temp;\n                }\n            }\n            // System.out.printf(\"\u7b2c%d\u8d9f\u6392\u5e8f\u540e\u7684\u6570\u7ec4\", i + 1);\n\n            if (!flag) {\n                break;\n            } else {\n                flag = false;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#76","title":"7.6 \u9009\u62e9\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#761","title":"7.6.1 \u57fa\u672c\u4ecb\u7ecd","text":"<p>\u9009\u62e9\u5f0f\u6392\u5e8f\u4e5f\u5c5e\u4e8e\u5185\u90e8\u6392\u5e8f\u6cd5\uff0c\u662f\u4ece\u6b32\u6392\u5e8f\u7684\u6570\u636e\u4e2d\uff0c\u6309\u6307\u5b9a\u7684\u89c4\u5219\u9009\u51fa\u67d0\u4e00\u5143\u7d20\uff0c\u518d\u4f9d\u89c4\u5b9a\u4ea4\u6362\u4f4d\u7f6e\u540e\u8fbe\u5230\u6392\u5e8f\u7684\u76ee\u7684\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#762","title":"7.6.2 \u9009\u62e9\u6392\u5e8f\u601d\u60f3","text":"<p>\u9009\u62e9\u6392\u5e8f\uff08select sorting\uff09\u4e5f\u662f\u4e00\u79cd\u7b80\u5355\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u7b2c\u4e00\u6b21\u4ece arr[0]~arr[n-1]\u4e2d\u9009\u53d6\u6700\u5c0f\u503c\uff0c\u4e0e arr[0]\u4ea4\u6362\uff0c\u7b2c\u4e8c\u6b21\u4ece arr[1]~arr[n-1]\u4e2d\u9009\u53d6\u6700\u5c0f\u503c\uff0c\u4e0e arr[1]\u4ea4\u6362\uff0c\u7b2c\u4e09\u6b21\u4ece arr[2]~arr[n-1]\u4e2d\u9009\u53d6\u6700\u5c0f\u503c\uff0c\u4e0e arr[2]\u4ea4\u6362\uff0c\u2026\uff0c\u7b2c i \u6b21\u4ece arr[i-1]~arr[n-1]\u4e2d\u9009\u53d6\u6700\u5c0f\u503c\uff0c\u4e0e arr[i-1]\u4ea4\u6362\uff0c\u2026, \u7b2c n-1 \u6b21\u4ece arr[n-2]~arr[n-1]\u4e2d\u9009\u53d6\u6700\u5c0f\u503c\uff0c\u4e0e arr[n-2]\u4ea4\u6362\uff0c\u603b\u5171\u901a\u8fc7 n-1 \u6b21\uff0c\u5f97\u5230\u4e00\u4e2a\u6309\u6392\u5e8f\u7801\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684\u6709\u5e8f\u5e8f\u5217\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#763","title":"7.6.3 \u9009\u62e9\u6392\u5e8f\u601d\u8def\u5206\u6790\u56fe:","text":"<p>\u5bf9\u4e00\u4e2a\u6570\u7ec4\u7684\u9009\u62e9\u6392\u5e8f\u518d\u8fdb\u884c\u8bb2\u89e3</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#764","title":"7.6.4 \u9009\u62e9\u6392\u5e8f\u5e94\u7528\u5b9e\u4f8b:","text":"<p>\u8bf7\u4f7f\u7528\u9009\u62e9\u6392\u5e8f\u4ece\u4f4e\u5230\u9ad8\u8fdb\u884c\u6392\u5e8f [101, 34, 119, 1]</p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>public class SelectSort {\n    public static void main(String[] args) {\n        // int[] array = new int[]{1, 2, 3, -1, -3, 5};\n        // sort(array);\n        // System.out.println(\"array = \" + Arrays.toString(array));\n\n        int[] array = new int[80000];\n        for (int i = 0; i &lt; array.length; i++) {\n            array[i] = (int) (Math.random() * 80000);\n        }\n        long time1 = System.currentTimeMillis();\n        sort(array);\n        long time2 = System.currentTimeMillis();\n        System.out.println(\"\u9009\u62e9\u6392\u5e8f\u6267\u884c\u7684\u65f6\u95f4\u4e3a\uff1a\" + (time2 - time1) + \"\u7eb3\u79d2\");\n    }\n\n    public static void sort(int[] array) {\n        for (int i = 0; i &lt; array.length - 1; i++) {\n            int min = i;\n            for (int j = i + 1; j &lt; array.length; j++) {\n                if (array[min] &gt; array[j]) {\n                    min = j;\n                }\n            }\n            if (min != i) {\n                int temp = array[min];\n                array[min] = array[i];\n                array[i] = temp;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#77","title":"7.7 \u63d2\u5165\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#771","title":"7.7.1 \u63d2\u5165\u6392\u5e8f\u6cd5\u4ecb\u7ecd:","text":"<p>\u63d2\u5165\u5f0f\u6392\u5e8f\u5c5e\u4e8e\u5185\u90e8\u6392\u5e8f\u6cd5\uff0c\u662f\u5bf9\u4e8e\u6b32\u6392\u5e8f\u7684\u5143\u7d20\u4ee5\u63d2\u5165\u7684\u65b9\u5f0f\u627e\u5bfb\u8be5\u5143\u7d20\u7684\u9002\u5f53\u4f4d\u7f6e\uff0c\u4ee5\u8fbe\u5230\u6392\u5e8f\u7684\u76ee\u7684\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#772","title":"7.7.2 \u63d2\u5165\u6392\u5e8f\u6cd5\u601d\u60f3","text":"<p>\u63d2\u5165\u6392\u5e8f\uff08Insertion Sorting\uff09\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u628a n \u4e2a\u5f85\u6392\u5e8f\u7684\u5143\u7d20\u770b\u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u8868\u548c\u4e00\u4e2a\u65e0\u5e8f\u8868\uff0c\u5f00\u59cb\u65f6\u6709\u5e8f\u8868\u4e2d\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff0c\u65e0\u5e8f\u8868\u4e2d\u5305\u542b\u6709 n-1 \u4e2a\u5143\u7d20\uff0c\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u6bcf\u6b21\u4ece\u65e0\u5e8f\u8868\u4e2d\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u628a\u5b83\u7684\u6392\u5e8f\u7801\u4f9d\u6b21\u4e0e\u6709\u5e8f\u8868\u5143\u7d20\u7684\u6392\u5e8f\u7801\u8fdb\u884c\u6bd4\u8f83\uff0c\u5c06\u5b83\u63d2\u5165\u5230\u6709\u5e8f\u8868\u4e2d\u7684\u9002\u5f53\u4f4d\u7f6e\uff0c\u4f7f\u4e4b\u6210\u4e3a\u65b0\u7684\u6709\u5e8f\u8868\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#773","title":"7.7.3 \u63d2\u5165\u6392\u5e8f\u601d\u8def\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#774","title":"7.7.4 \u63d2\u5165\u6392\u5e8f\u6cd5\u5e94\u7528\u5b9e\u4f8b","text":"<p>\u6709\u4e00\u7fa4\u5c0f\u725b,    \u8003\u8bd5\u6210\u7ee9\u5206\u522b\u662f    101,  34,  119, 1        \u8bf7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f  \u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>public class InsertSort {\n    public static void main(String[] args) {\n        // int[] array = new int[]{1, 3, -1, -4, 2};\n        // sort(array);\n        // System.out.println(\"array = \" + Arrays.toString(array));\n\n        int[] array = new int[80000];\n        for (int i = 0; i &lt; array.length; i++) {\n            array[i] = (int) (Math.random() * 80000);\n        }\n        long time1 = System.currentTimeMillis();\n        sort(array);\n        long time2 = System.currentTimeMillis();\n        System.out.println(\"\u63d2\u5165\u6392\u5e8f\u6267\u884c\u7684\u65f6\u95f4\u4e3a\uff1a\" + (time2 - time1) + \"\u7eb3\u79d2\");\n\n    }\n\n    public static void sort(int[] array) {\n        for (int i = 0; i &lt; array.length - 1; i++) {\n            int insertValue = array[i + 1]; // \u8981\u63d2\u5165\u7684\u6570\n            int insertIndex = i;    // \u8981\u8ddf\u63d2\u5165\u6570\u8fdb\u884c\u6bd4\u8f83\u7684\u4e0b\u6807\n            // insertValue &lt; array[insertIndex]  \u8868\u793a\u6bd4\u8981\u63d2\u5165\u7684\u6570\u5927\u7684\u8bdd\u5c31\u7ee7\u7eed\u627e\uff0c\n            // \u627e\u5230\u6bd4\u8981\u63d2\u5165\u7684\u6570\u5c0f\u7684\u6570\u4e4b\u540e\uff0c\u6bd4\u8f83\u6570\u7684\u540e\u4e00\u4e2a\u6570\u5c31\u662f\u653e\u8981\u63d2\u5165\u6570\n            while (insertIndex &gt;= 0 &amp;&amp; insertValue &lt; array[insertIndex]) {\n                array[insertIndex + 1] = array[insertIndex];\n                insertIndex--;\n            }\n            if (insertIndex != i){\n                array[insertIndex + 1] = insertValue;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#78","title":"7.8 \u5e0c\u5c14\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#781","title":"7.8.1 \u7b80\u5355\u63d2\u5165\u6392\u5e8f\u5b58\u5728\u7684\u95ee\u9898","text":"<p>\u6211\u4eec\u770b\u7b80\u5355\u7684\u63d2\u5165\u6392\u5e8f\u53ef\u80fd\u5b58\u5728\u7684\u95ee\u9898. \u6570\u7ec4 arr  = {2,3,4,5,6,1}    \u8fd9\u65f6\u9700\u8981\u63d2\u5165\u7684\u6570 1(\u6700\u5c0f),    \u8fd9\u6837\u7684\u8fc7\u7a0b\u662f\uff1a  {2,3,4,5,6,6} {2,3,4,5,5,6}  {2,3,4,4,5,6}  {2,3,3,4,5,6}  {2,2,3,4,5,6}  {1,2,3,4,5,6} \u7ed3\u8bba:    \u5f53\u9700\u8981\u63d2\u5165\u7684\u6570\u662f\u8f83\u5c0f\u7684\u6570\u65f6\uff0c\u540e\u79fb\u7684\u6b21\u6570\u660e\u663e\u589e\u591a\uff0c\u5bf9\u6548\u7387\u6709\u5f71\u54cd.</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#782","title":"7.8.2 \u5e0c\u5c14\u6392\u5e8f\u6cd5\u4ecb\u7ecd","text":"<p>\u5e0c\u5c14\u6392\u5e8f\u662f\u5e0c\u5c14\uff08Donald  Shell\uff09\u4e8e  1959 \u5e74\u63d0\u51fa\u7684\u4e00\u79cd\u6392\u5e8f\u7b97\u6cd5\u3002\u5e0c\u5c14\u6392\u5e8f\u4e5f\u662f\u4e00\u79cd\u63d2\u5165\u6392\u5e8f\uff0c\u5b83\u662f\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7ecf\u8fc7\u6539\u8fdb\u4e4b\u540e\u7684\u4e00\u4e2a\u66f4\u9ad8\u6548\u7684\u7248\u672c\uff0c\u4e5f\u79f0\u4e3a\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#783","title":"7.8.3 \u5e0c\u5c14\u6392\u5e8f\u6cd5\u57fa\u672c\u601d\u60f3","text":"<p>\u5e0c\u5c14\u6392\u5e8f\u662f\u628a\u8bb0\u5f55\u6309\u4e0b\u6807\u7684\u4e00\u5b9a\u589e\u91cf\u5206\u7ec4\uff0c\u5bf9\u6bcf\u7ec4\u4f7f\u7528\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u6392\u5e8f\uff1b\u968f\u7740\u589e\u91cf\u9010\u6e10\u51cf\u5c11\uff0c\u6bcf\u7ec4\u5305\u542b\u7684\u5173\u952e\u8bcd\u8d8a\u6765\u8d8a\u591a\uff0c\u5f53\u589e\u91cf\u51cf\u81f3 1  \u65f6\uff0c\u6574\u4e2a\u6587\u4ef6\u6070\u88ab\u5206\u6210\u4e00\u7ec4\uff0c\u7b97\u6cd5\u4fbf\u7ec8\u6b62</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#784","title":"7.8.4 \u5e0c\u5c14\u6392\u5e8f\u6cd5\u7684\u793a\u610f\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#785","title":"7.8.5 \u5e0c\u5c14\u6392\u5e8f\u6cd5\u5e94\u7528\u5b9e\u4f8b:","text":"<p>\u6709\u4e00\u7fa4\u5c0f\u725b, \u8003\u8bd5\u6210\u7ee9\u5206\u522b\u662f {8,9,1,7,2,3,5,4,6,0} \u8bf7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f. \u8bf7\u5206\u522b\u4f7f\u7528</p> <ol> <li>\u5e0c\u5c14\u6392\u5e8f\u65f6\uff0c\u5bf9\u6709\u5e8f\u5e8f\u5217\u5728\u63d2\u5165\u65f6\u91c7\u7528\u4ea4\u6362\u6cd5,    \u5e76\u6d4b\u8bd5\u6392\u5e8f\u901f\u5ea6.</li> <li>\u5e0c\u5c14\u6392\u5e8f\u65f6\uff0c\u5bf9\u6709\u5e8f\u5e8f\u5217\u5728\u63d2\u5165\u65f6\u91c7\u7528\u79fb\u52a8\u6cd5,    \u5e76\u6d4b\u8bd5\u6392\u5e8f\u901f\u5ea6</li> </ol> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>// \u5e0c\u5c14\u6392\u5e8f\npublic class ShellSort {\n    public static void main(String[] args) {\n        // int[] array = new int[]{8, 9, 1, 7, 2, 3, 5, 4, 6, 0};\n        // sort2(array);\n        // System.out.println(\"array = \" + Arrays.toString(array));\n\n        int[] array = new int[80000];\n        for (int i = 0; i &lt; array.length; i++) {\n            array[i] = (int) (Math.random() * 80000);\n        }\n        long time1 = System.currentTimeMillis();\n        sort2(array);\n        long time2 = System.currentTimeMillis();\n        System.out.println(\"\u5e0c\u5c14\u6392\u5e8f\u6267\u884c\u7684\u65f6\u95f4\u4e3a\uff1a\" + (time2 - time1) + \"\u7eb3\u79d2\");\n    }\n\n    /**\n     * \u91c7\u7528\u4ea4\u6362\u6cd5\uff0c\u6548\u7387\u4f4e\n     */\n    public static void sort(int[] array) {\n        int temp;\n        for (int gap = array.length / 2; gap &gt; 0; gap /= 2) {\n            for (int i = gap; i &lt; array.length; i++) {\n                // \u904d\u5386\u5404\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20\uff08\u5171gap\u7ec4\uff0c\u6bcf\u7ec4\u6709array.length/gap\u4e2a\u5143\u7d20\uff0c\u6b65\u957fgap\n                for (int j = i - gap; j &gt;= 0; j -= gap) {\n                    // \u5982\u679c\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u52a0\u4e0a\u6b65\u957f\u540e\u7684\u90a3\u4e2a\u5143\u7d20\uff0c\u8bf4\u660e\u4ea4\u6362\n                    if (array[j] &gt; array[j + gap]) {\n                        temp = array[j];\n                        array[j] = array[j + gap];\n                        array[j + gap] = temp;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * \u91c7\u7528\u63d2\u5165\u6cd5\n     */\n    public static void sort2(int[] array) {\n        for (int gap = array.length / 2; gap &gt; 0; gap /= 2) {\n            for (int i = gap; i &lt; array.length; i++) {\n                int insertIndex = i;\n                int insertValue = array[insertIndex];\n                while (insertIndex - gap &gt;= 0 &amp;&amp; insertValue &lt; array[insertIndex - gap]) {\n                    array[insertIndex] = array[insertIndex - gap];\n                    insertIndex -= gap;\n                }\n                if (insertIndex != i) {\n                    array[insertIndex] = insertValue;\n                }\n            }\n\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#79","title":"7.9 \u5feb\u901f\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#791","title":"7.9.1 \u5feb\u901f\u6392\u5e8f\u6cd5\u4ecb\u7ecd:","text":"<p>\u5feb\u901f\u6392\u5e8f\uff08Quicksort\uff09\u662f\u5bf9\u5192\u6ce1\u6392\u5e8f\u7684\u4e00\u79cd\u6539\u8fdb\u3002\u57fa\u672c\u601d\u60f3\u662f\uff1a\u901a\u8fc7\u4e00\u8d9f\u6392\u5e8f\u5c06\u8981\u6392\u5e8f\u7684\u6570\u636e\u5206\u5272\u6210\u72ec\u7acb\u7684\u4e24\u90e8\u5206\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u7684\u6240\u6709\u6570\u636e\u90fd\u6bd4\u53e6\u5916\u4e00\u90e8\u5206\u7684\u6240\u6709\u6570\u636e\u90fd\u8981\u5c0f\uff0c\u7136\u540e\u518d\u6309\u6b64\u65b9\u6cd5\u5bf9\u8fd9\u4e24\u90e8\u5206\u6570\u636e\u5206\u522b\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\uff0c\u6574\u4e2a\u6392\u5e8f\u8fc7\u7a0b\u53ef\u4ee5\u9012\u5f52\u8fdb\u884c\uff0c\u4ee5\u6b64\u8fbe\u5230\u6574\u4e2a\u6570\u636e\u53d8\u6210\u6709\u5e8f\u5e8f\u5217</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#792","title":"7.9.2 \u5feb\u901f\u6392\u5e8f\u6cd5\u793a\u610f\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#793","title":"7.9.3 \u5feb\u901f\u6392\u5e8f\u6cd5\u5e94\u7528\u5b9e\u4f8b:","text":"<p>\u8981\u6c42:   \u5bf9    [-9,78,0,23,-567,70]    \u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\uff0c\u8981\u6c42\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u6cd5\u3002\u3010\u6d4b\u8bd5  8w \u548c  800w\u3011 \u8bf4\u660e[\u9a8c\u8bc1\u5206\u6790]:</p> <ol> <li>\u5982\u679c\u53d6\u6d88\u5de6\u53f3\u9012\u5f52\uff0c\u7ed3\u679c\u662f -9  -567  0  23  78  70</li> <li>\u5982\u679c\u53d6\u6d88\u53f3\u9012\u5f52,\u7ed3\u679c\u662f -567 -9 0 23 78 70</li> <li>\u5982\u679c\u53d6\u6d88\u5de6\u9012\u5f52,\u7ed3\u679c\u662f -9 -567 0 23 70 78</li> </ol> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>public class QuickSort {\n    public static void main(String[] args) {\n\n        // int[] array = new int[]{-9, 78, 0, 23, -567, 70};\n        // sort(array, 0, array.length - 1);\n        // System.out.println(\"array = \" + Arrays.toString(array));\n        int[] array = new int[80000];\n        for (int i = 0; i &lt; array.length; i++) {\n            array[i] = (int) (Math.random() * 80000);\n        }\n        long time1 = System.currentTimeMillis();\n        sort(array, 0, array.length - 1);\n        long time2 = System.currentTimeMillis();\n        System.out.println(\"\u5feb\u901f\u6392\u5e8f\u6267\u884c\u7684\u65f6\u95f4\u4e3a\uff1a\" + (time2 - time1) + \"\u7eb3\u79d2\");\n        // System.out.println(\"array = \" + Arrays.toString(array));\n\n    }\n\n    public static void sort(int[] array, int left, int right) {\n        int l = left;   //\u5de6\u6307\u9488\n        int r = right;  //\u53f3\u6307\u9488\n        int pivot = array[(left + right) / 2];\n        int temp;\n        while (l &lt; r) {\n            while (array[l] &lt; pivot) {   // \u627e\u5230pivot\u5de6\u8fb9\u5927\u4e8e\u7b49\u4e8epivot\u7684\n                l++;\n            }\n            while (array[r] &gt; pivot) {   // \u627e\u5230pivot\u53f3\u8fb9\u5c0f\u4e8e\u7b49\u4e8epivot\u7684\n                r--;\n            }\n\n            if (l == r) {\n                break;\n            }\n\n            temp = array[l];\n            array[l] = array[r];\n            array[r] = temp;\n\n            if (array[l] == pivot) {    //\u5982\u679c\u4ea4\u6362\u5b8c\u4e4b\u540earray[l] == pivot\u5c31\u8ba9r--\n                r--;\n            }\n            if (array[r] == pivot) {    //\u5982\u679c\u4ea4\u6362\u5b8c\u4e4b\u540earray[r] == pivot\u5c31\u8ba9l++\n                l++;\n            }\n        }\n        if (l == r) {   // \u9632\u6b62\u6808\u6ea2\u51fa\n            l++;\n            r--;\n        }\n        // \u5de6\u9012\u5f52\n        if (left &lt; r) {\n            sort(array, left, r);\n        }\n        // \u53f3\u9012\u5f52\n        if (right &gt; l) {\n            sort(array, l, right);\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#710","title":"7.10 \u5f52\u5e76\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7101","title":"7.10.1 \u5f52\u5e76\u6392\u5e8f\u4ecb\u7ecd:","text":"<p>\u5f52\u5e76\u6392\u5e8f\uff08MERGE-SORT\uff09\u662f\u5229\u7528\u5f52\u5e76\u7684\u601d\u60f3\u5b9e\u73b0\u7684\u6392\u5e8f\u65b9\u6cd5\uff0c\u8be5\u7b97\u6cd5\u91c7\u7528\u7ecf\u5178\u7684\u5206\u6cbb\uff08divide-and-conquer\uff09\u7b56\u7565\uff08\u5206\u6cbb\u6cd5\u5c06\u95ee\u9898\u5206(divide)\u6210\u4e00\u4e9b\u5c0f\u7684\u95ee\u9898\u7136\u540e\u9012\u5f52\u6c42\u89e3\uff0c\u800c\u6cbb(conquer)\u7684\u9636\u6bb5\u5219\u5c06\u5206\u7684\u9636\u6bb5\u5f97\u5230\u7684\u5404\u7b54\u6848\"\u4fee\u8865\"\u5728\u4e00\u8d77\uff0c\u5373\u5206\u800c\u6cbb\u4e4b)\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7102-1-","title":"7.10.2 \u5f52\u5e76\u6392\u5e8f\u601d\u60f3\u793a\u610f\u56fe 1-\u57fa\u672c\u601d\u60f3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7103-2-","title":"7.10.3 \u5f52\u5e76\u6392\u5e8f\u601d\u60f3\u793a\u610f\u56fe 2-\u5408\u5e76\u76f8\u90bb\u6709\u5e8f\u5b50\u5e8f\u5217:","text":"<p>\u518d\u6765\u770b\u770b\u6cbb\u9636\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e24\u4e2a\u5df2\u7ecf\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u6bd4\u5982\u4e0a\u56fe\u4e2d\u7684\u6700\u540e\u4e00\u6b21\u5408\u5e76\uff0c\u8981\u5c06[4,5,7,8]\u548c[1,2,3,6]\u4e24\u4e2a\u5df2\u7ecf\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\uff0c\u5408\u5e76\u4e3a\u6700\u7ec8\u5e8f\u5217[1,2,3,4,5,6,7,8]\uff0c\u6765\u770b\u4e0b\u5b9e\u73b0\u6b65\u9aa4</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7104","title":"7.10.4 \u5f52\u5e76\u6392\u5e8f\u7684\u5e94\u7528\u5b9e\u4f8b:","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4, val arr = Array(8, 4, 5, 7, 1, 3, 6, 2 ), \u8bf7\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u6392\u5e8f\u3002</p> <pre><code>public class MergeSort {\n    public static void main(String[] args) {\n        // int[] array = {8, 4, 5, 7, 1, 3, 6, 2};\n        // sort(array, 0, array.length - 1, new int[array.length]);\n        // System.out.println(\"array = \" + Arrays.toString(array));\n\n        int[] array = new int[8000000];\n        for (int i = 0; i &lt; array.length; i++) {\n            array[i] = (int) (Math.random() * 8000000);\n        }\n        long time1 = System.currentTimeMillis();\n        sort(array, 0, array.length - 1, new int[array.length]);\n        long time2 = System.currentTimeMillis();\n        System.out.println(\"\u5f52\u5e76\u6392\u5e8f\u6267\u884c\u7684\u65f6\u95f4\u4e3a\uff1a\" + (time2 - time1) + \"\u7eb3\u79d2\");\n    }\n\n    public static void sort(int[] array, int left, int right, int[] temp) {\n        if (left &lt; right) {\n            int mid = (left + right) / 2;\n            sort(array, left, mid, temp);\n            sort(array, mid + 1, right, temp);\n            merge(array, left, mid, right, temp);\n        }\n\n    }\n\n    /**\n     * \u5408\u5e76\u7684\u65b9\u6cd5\n     *\n     * @param array \u76ee\u6807\u6570\u7ec4\n     * @param left \u5de6\u8fb9\u6709\u5e8f\u6570\u5217\u7684\u521d\u59cb\u7d22\u5f15\n     * @param mid \u4e2d\u95f4\u7d22\u5f15\n     * @param right \u53f3\u8fb9\u6709\u5e8f\u6570\u5217\u7684 \u7ec8\u6b62\u7d22\u5f15\n     * @param temp \u4e34\u65f6\u6570\u7ec4\n     */\n    public static void merge(int[] array, int left, int mid, int right, int[] temp) {\n        int i = left;   // \u521d\u59cb\u5316i\uff0c\u4f7f\u5176\u4e3a\u5de6\u8fb9\u6709\u5e8f\u6570\u7ec4\u7684\u521d\u59cb\u7d22\u5f15\n        int j = mid + 1;  // \u521d\u59cb\u5316j\uff0c\u4f7f\u5176\u4e3a\u53f3\u8fb9\u6709\u5e8f\u6570\u7ec4\u7684\u521d\u59cb\u7d22\u5f15\n        int tempIndex = 0;  // \u4e34\u65f6\u6570\u7ec4\u7684\u5f53\u524d\u4e0b\u6807\n\n        // \u5c06\u5de6\u53f3\u4e24\u8fb9\u7684\u6709\u5e8f\u5e8f\u5217\u7684\u5143\u7d20\u6309\u987a\u5e8f\u586b\u5145\u5230temp\u6570\u7ec4\u4e2d\uff0c\u76f4\u5230\u6709\u4e00\u65b9\u7ed3\u675f\n        while (i &lt;= mid &amp;&amp; j &lt;= right) {\n            // \u5982\u679c \u5de6\u8fb9\u7684\u6709\u5e8f\u5e8f\u5217\u7684\u5f53\u524d\u5143\u7d20\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u8fb9\u6709\u5e8f\u5e8f\u5217\u7684\u5f53\u524d\u5143\u7d20\n            // \u5c31\u628a \u5de6\u8fb9\u7684\u6709\u5e8f\u5e8f\u5217\u7684\u5f53\u524d\u5143\u7d20\u586b\u5145\u5230temp\u4e2d\n            if (array[i] &lt;= array[j]) {\n                temp[tempIndex] = array[i];\n                i++;\n            } else {\n                temp[tempIndex] = array[j];\n                j++;\n            }\n            tempIndex++;\n        }\n\n        // \u628a\u4e00\u8fb9\u5269\u4f59\u7684\u6709\u5e8f\u5e8f\u5217\u5168\u90e8\u586b\u5145\u5230temp\u4e2d\n        while (j &lt;= right) {\n            temp[tempIndex] = array[j];\n            j++;\n            tempIndex++;\n        }\n        while (i &lt;= mid) {\n            temp[tempIndex] = array[i];\n            i++;\n            tempIndex++;\n        }\n\n        tempIndex = 0;\n        int tempLeft = left;\n        while (tempLeft &lt;= right) {\n            array[tempLeft] = temp[tempIndex];\n            tempLeft++;\n            tempIndex++;\n        }\n\n    }\n}\n\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#711","title":"7.11 \u57fa\u6570\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7111","title":"7.11.1 \u57fa\u6570\u6392\u5e8f(\u6876\u6392\u5e8f)\u4ecb\u7ecd","text":"<ol> <li>\u57fa\u6570\u6392\u5e8f\uff08radix  sort\uff09\u5c5e\u4e8e\u201c\u5206\u914d\u5f0f\u6392\u5e8f\u201d\uff08distribution sort\uff09\uff0c\u53c8\u79f0\u201c\u6876\u5b50\u6cd5\u201d\uff08bucket  sort\uff09\u6216  bin  sort\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u662f\u901a\u8fc7\u952e\u503c\u7684\u5404\u4e2a\u4f4d\u7684\u503c\uff0c\u5c06\u8981\u6392\u5e8f\u7684\u5143\u7d20\u5206\u914d\u81f3\u67d0\u4e9b\u201c\u6876\u201d\u4e2d\uff0c\u8fbe\u5230\u6392\u5e8f\u7684\u4f5c\u7528</li> <li>\u57fa\u6570\u6392\u5e8f\u6cd5\u662f\u5c5e\u4e8e\u7a33\u5b9a\u6027\u7684\u6392\u5e8f\uff0c\u57fa\u6570\u6392\u5e8f\u6cd5\u7684\u662f\u6548\u7387\u9ad8\u7684\u7a33\u5b9a\u6027\u6392\u5e8f\u6cd5</li> <li>\u57fa\u6570\u6392\u5e8f(Radix  Sort)\u662f\u6876\u6392\u5e8f\u7684\u6269\u5c55</li> <li>\u57fa\u6570\u6392\u5e8f\u662f  1887  \u5e74\u8d6b\u5c14\u66fc\u00b7\u4f55\u4e50\u793c\u53d1\u660e\u7684\u3002\u5b83\u662f\u8fd9\u6837\u5b9e\u73b0\u7684\uff1a\u5c06\u6574\u6570\u6309\u4f4d\u6570\u5207\u5272\u6210\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u7136\u540e\u6309\u6bcf\u4e2a\u4f4d\u6570\u5206\u522b\u6bd4\u8f83\u3002</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7112","title":"7.11.2 \u57fa\u6570\u6392\u5e8f\u57fa\u672c\u601d\u60f3","text":"<ol> <li>\u5c06\u6240\u6709\u5f85\u6bd4\u8f83\u6570\u503c\u7edf\u4e00\u4e3a\u540c\u6837\u7684\u6570\u4f4d\u957f\u5ea6\uff0c\u6570\u4f4d\u8f83\u77ed\u7684\u6570\u524d\u9762\u8865\u96f6\u3002\u7136\u540e\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\uff0c\u4f9d\u6b21\u8fdb\u884c\u4e00\u6b21\u6392\u5e8f\u3002\u8fd9\u6837\u4ece\u6700\u4f4e\u4f4d\u6392\u5e8f\u4e00\u76f4\u5230\u6700\u9ad8\u4f4d\u6392\u5e8f\u5b8c\u6210\u4ee5\u540e,   \u6570\u5217\u5c31\u53d8\u6210\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u3002</li> <li>\u8fd9\u6837\u8bf4\u660e\uff0c\u6bd4\u8f83\u96be\u7406\u89e3\uff0c\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e2a\u56fe\u6587\u89e3\u91ca\uff0c\u7406\u89e3\u57fa\u6570\u6392\u5e8f\u7684\u6b65\u9aa4</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7113","title":"7.11.3 \u57fa\u6570\u6392\u5e8f\u56fe\u6587\u8bf4\u660e","text":"<p>\u5c06\u6570\u7ec4    {53,  3,  542,  748,  14,  214}    \u4f7f\u7528\u57fa\u6570\u6392\u5e8f,    \u8fdb\u884c\u5347\u5e8f\u6392\u5e8f</p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7114","title":"7.11.4 \u57fa\u6570\u6392\u5e8f\u4ee3\u7801\u5b9e\u73b0","text":"<p>\u8981\u6c42\uff1a\u5c06\u6570\u7ec4 {53, 3, 542, 748, 14, 214} \u4f7f\u7528\u57fa\u6570\u6392\u5e8f, \u8fdb\u884c\u5347\u5e8f\u6392\u5e8f</p> <pre><code>/**\n * \u57fa\u6570\u6392\u5e8f\n * \u57fa\u6570\u6392\u5e8f\u662f\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\n * \u8d1f\u6570\u4e0d\u5efa\u8bae\u4f7f\u7528\u57fa\u6570\u6392\u5e8f\n */\npublic class RadixSort {\n    public static void main(String[] args) {\n        // int[] arr = {53, 3, 542, 748, 14, 214};\n        // sort(arr);\n        // System.out.println(Arrays.toString(arr));\n\n        int[] array = new int[8000000];\n        for (int i = 0; i &lt; array.length; i++) {\n            array[i] = (int) (Math.random() * 8000000);\n        }\n        long time1 = System.currentTimeMillis();\n        sort(array);\n        long time2 = System.currentTimeMillis();\n        System.out.println(\"\u57fa\u6570\u6392\u5e8f\u6267\u884c\u7684\u65f6\u95f4\u4e3a\uff1a\" + (time2 - time1) + \"\u7eb3\u79d2\");\n    }\n\n    public static void sort(int[] arr) {\n        int[][] bucket = new int[10][arr.length];   // \u7528\u6765\u5b58\u653e\u6570\u636e\u7684\u6876\uff0c \u5171\u670910\u4e2a\n        int[] bucketElementCount = new int[bucket.length]; // \u7528\u6765\u8868\u793a\u6bcf\u4e2a\u6876\u4e2d\u6709\u51e0\u4e2a\u6709\u6548\u6570\u636e\uff0c\u4e0b\u6807\u8868\u793a\u7b2c\u51e0\u4e2a\u6876\n\n        int max = Integer.MIN_VALUE;\n        int maxLength = 0;\n        // int maxLength = (max + \" \").length(); //\u6548\u7387\u8f83\u4f4e\n        // \u6c42\u51fa\u6700\u5927\u6570\n        for (int j : arr) {\n            if (j &gt; max) {\n                max = j;\n            }\n        }\n\n        // \u6c42\u51fa\u6700\u5927\u6570\u7684\u4f4d\u6570\n        while (max % 10 != 0 || max / 10 != 0) {\n            max /= 10;\n            maxLength++;\n        }\n\n        int index;\n        for (int count = 0, n = 1; count &lt; maxLength; count++, n *= 10) {\n            for (int k : arr) {\n                int element = k / n % 10;\n\n                // \u628a\u5f53\u524d\u7684\u5143\u7d20\u653e\u5230\u7b2celement\u4e2a\u6876\u4e2d\u7684\u7b2cbucketElementCount[element]\u7684\u4f4d\u7f6e\n                bucket[element][bucketElementCount[element]] = k;\n                bucketElementCount[element]++;\n            }\n\n            index = 0;\n            // \u904d\u5386\u6bcf\u4e00\u4e2a\u6876\u3002\u5c06\u6876\u4e2d\u7684\u6570\u636e\u653e\u5165\u539f\u6570\u7ec4\n            for (int i = 0; i &lt; bucket.length; i++) {\n                for (int j = 0; j &lt; bucketElementCount[i]; j++) {\n                    arr[index] = bucket[i][j];\n                    index++;\n                }\n                if (count != maxLength - 1 &amp;&amp; bucketElementCount[i] != 0) {\n                    bucketElementCount[i] = 0;\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7115","title":"7.11.5 \u57fa\u6570\u6392\u5e8f\u7684\u8bf4\u660e","text":"<ol> <li>\u57fa\u6570\u6392\u5e8f\u662f\u5bf9\u4f20\u7edf\u6876\u6392\u5e8f\u7684\u6269\u5c55\uff0c\u901f\u5ea6\u5f88\u5feb.</li> <li>\u57fa\u6570\u6392\u5e8f\u662f\u7ecf\u5178\u7684\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u65b9\u5f0f\uff0c\u5360\u7528\u5185\u5b58\u5f88\u5927,    \u5f53\u5bf9\u6d77\u91cf\u6570\u636e\u6392\u5e8f\u65f6\uff0c\u5bb9\u6613\u9020\u6210    OutOfMemoryError    \u3002</li> <li>\u57fa\u6570\u6392\u5e8f\u65f6\u7a33\u5b9a\u7684\u3002[\u6ce8:\u5047\u5b9a\u5728\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55\u5e8f\u5217\u4e2d\uff0c\u5b58\u5728\u591a\u4e2a\u5177\u6709\u76f8\u540c\u7684\u5173\u952e\u5b57\u7684\u8bb0\u5f55\uff0c\u82e5\u7ecf\u8fc7\u6392\u5e8f\uff0c\u8fd9\u4e9b\u8bb0\u5f55\u7684\u76f8\u5bf9\u6b21\u5e8f\u4fdd\u6301\u4e0d\u53d8\uff0c\u5373\u5728\u539f\u5e8f\u5217\u4e2d\uff0cr[i]=r[j]\uff0c\u4e14 r[i]\u5728 r[j]\u4e4b\u524d\uff0c\u800c\u5728\u6392\u5e8f\u540e\u7684\u5e8f\u5217\u4e2d\uff0cr[i]\u4ecd\u5728 r[j]\u4e4b\u524d\uff0c\u5219\u79f0\u8fd9\u79cd\u6392\u5e8f\u7b97\u6cd5\u662f\u7a33\u5b9a\u7684\uff1b\u5426\u5219\u79f0\u4e3a\u4e0d\u7a33\u5b9a\u7684</li> <li>\u6709\u8d1f\u6570\u7684\u6570\u7ec4\uff0c\u6211\u4eec\u4e0d\u7528\u57fa\u6570\u6392\u5e8f\u6765\u8fdb\u884c\u6392\u5e8f,    \u5982\u679c\u8981\u652f\u6301\u8d1f\u6570\uff0c\u53c2\u8003:  https://code.i-harness.com/zh-CN/q/e98fa9</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#712","title":"7.12 \u5e38\u7528\u6392\u5e8f\u7b97\u6cd5\u603b\u7ed3\u548c\u5bf9\u6bd4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7121","title":"7.12.1 \u4e00\u5f20\u6392\u5e8f\u7b97\u6cd5\u7684\u6bd4\u8f83\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#7122","title":"7.12.2 \u76f8\u5173\u672f\u8bed\u89e3\u91ca","text":"<ol> <li>\u7a33\u5b9a\uff1a\u5982\u679c  a \u539f\u672c\u5728  b  \u524d\u9762\uff0c\u800c  a=b\uff0c\u6392\u5e8f\u4e4b\u540e  a \u4ecd\u7136\u5728  b  \u7684\u524d\u9762\uff1b</li> <li>\u4e0d\u7a33\u5b9a\uff1a\u5982\u679c  a \u539f\u672c\u5728  b  \u7684\u524d\u9762\uff0c\u800c  a=b\uff0c\u6392\u5e8f\u4e4b\u540e  a \u53ef\u80fd\u4f1a\u51fa\u73b0\u5728  b  \u7684\u540e\u9762\uff1b</li> <li>\u5185\u6392\u5e8f\uff1a\u6240\u6709\u6392\u5e8f\u64cd\u4f5c\u90fd\u5728\u5185\u5b58\u4e2d\u5b8c\u6210\uff1b</li> <li>\u5916\u6392\u5e8f\uff1a\u7531\u4e8e\u6570\u636e\u592a\u5927\uff0c\u56e0\u6b64\u628a\u6570\u636e\u653e\u5728\u78c1\u76d8\u4e2d\uff0c\u800c\u6392\u5e8f\u901a\u8fc7\u78c1\u76d8\u548c\u5185\u5b58\u7684\u6570\u636e\u4f20\u8f93\u624d\u80fd\u8fdb\u884c\uff1b</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u4e00\u4e2a\u7b97\u6cd5\u6267\u884c\u6240\u8017\u8d39\u7684\u65f6\u95f4\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u8fd0\u884c\u5b8c\u4e00\u4e2a\u7a0b\u5e8f\u6240\u9700\u5185\u5b58\u7684\u5927\u5c0f\u3002</li> <li>n:   \u6570\u636e\u89c4\u6a21</li> <li>k:   \u201c\u6876\u201d\u7684\u4e2a\u6570</li> <li>In-place: \u4e0d\u5360\u7528\u989d\u5916\u5185\u5b58</li> <li>Out-place: \u5360\u7528\u989d\u5916\u5185\u5b58</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_9","title":"\u516b\u3001\u67e5\u627e\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#81","title":"8.1 \u67e5\u627e\u7b97\u6cd5\u4ecb\u7ecd","text":"<p>\u5728  java \u4e2d\uff0c\u6211\u4eec\u5e38\u7528\u7684\u67e5\u627e\u6709\u56db\u79cd:</p> <ol> <li>\u987a\u5e8f(\u7ebf\u6027)\u67e5\u627e</li> <li>\u4e8c\u5206\u67e5\u627e/\u6298\u534a\u67e5\u627e</li> <li>\u63d2\u503c\u67e5\u627e</li> <li>\u6590\u6ce2\u90a3\u5951\u67e5\u627e</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#82","title":"8.2 \u7ebf\u6027\u67e5\u627e\u7b97\u6cd5","text":"<p>\u6709\u4e00\u4e2a\u6570\u5217\uff1a{1,8,  10,  89,  1000,  1234}    \uff0c\u5224\u65ad\u6570\u5217\u4e2d\u662f\u5426\u5305\u542b\u6b64\u540d\u79f0\u3010\u987a\u5e8f\u67e5\u627e\u3011 \u8981\u6c42:    \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u63d0\u793a\u627e\u5230\uff0c\u5e76\u7ed9\u51fa\u4e0b\u6807\u503c</p> <pre><code>package search;\n\npublic class SeqSearch {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 6};\n        int index = search(arr, -1);\n        if (index == -1) {\n            System.out.println(\"\u6ca1\u6709\u67e5\u627e\u5230\u8be5\u6570\");\n        } else {\n            System.out.println(\"\u4e0b\u6807\u4e3a\uff1a\" + index);\n        }\n\n\n    }\n\n    /**\n     * \u8fd9\u91cc\u5b9e\u73b0\u7684\u7ebf\u6027\u67e5\u627e\u662f\u627e\u5230\u4e00\u4e2a\u5c31\u8fd4\u56de\u4e0b\u6807\n     *\n     * @param arr\n     * @param value\n     * @return\n     */\n    public static int search(int[] arr, int value) {\n        for (int i = 0; i &lt; arr.length; i++) {\n            if (arr[i] == value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#83","title":"8.3 \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#831","title":"8.3.1 \u4e8c\u5206\u67e5\u627e","text":"<p>\u8bf7\u5bf9\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u8fdb\u884c\u4e8c\u5206\u67e5\u627e    {1,8,  10, 89,  1000,  1234}    \uff0c\u8f93\u5165\u4e00\u4e2a\u6570\u770b\u770b\u8be5\u6570\u7ec4\u662f\u5426\u5b58\u5728\u6b64\u6570\uff0c\u5e76\u4e14\u6c42\u51fa\u4e0b\u6807\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u63d0\u793a\"\u6ca1\u6709\u8fd9\u4e2a\u6570\"\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#832","title":"8.3.2 \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u7684\u601d\u8def","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#833","title":"8.3.3 \u4e8c\u5206\u67e5\u627e\u7684\u4ee3\u7801","text":"<p>\u8bf4\u660e\uff1a\u589e\u52a0\u4e86\u627e\u5230\u6240\u6709\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u4e0b\u6807</p> <p>\u8bfe\u540e\u601d\u8003\u9898\uff1a    {1,8,  10,  89,  1000,  1000\uff0c1234}    \u5f53\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e2d\uff0c\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\u503c\u65f6\uff0c\u5982\u4f55\u5c06\u6240\u6709\u7684\u6570\u503c\u90fd\u67e5\u627e\u5230\uff0c\u6bd4\u5982\u8fd9\u91cc\u7684 1000</p> <pre><code>package search;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * \u4e8c\u5206\u67e5\u627e\n * \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7684\u524d\u63d0\u662f\u6570\u7ec4\u662f\u6709\u5e8f\u7684\n */\npublic class BinarySearch {\n    public static void main(String[] args) {\n        int[] arr = {1, 1, 2, 3, 4, 5, 6};\n        // int index = search(arr, 1, 0, arr.length - 1);\n        List&lt;Integer&gt; indexs = search2(arr, 1, 0, arr.length - 1);\n        System.out.println(\"index: \" + indexs);\n\n    }\n\n    /**\n     * @param arr \u76ee\u6807\u6570\u7ec4\n     * @param findValue \u8981\u67e5\u627e\u7684value\n     * @param left \u5de6\u8fb9\u7d22\u5f15\n     * @param right \u53f3\u8fb9\u7d22\u5f15\n     * @return \u627e\u5230\u8fd4\u56de\u7d22\u5f15\uff0c\u6ca1\u627e\u5230\u8fd4\u56de -1\n     */\n    public static int search(int[] arr, int findValue, int left, int right) {\n        if (left &gt; right) {\n            return -1;\n        }\n        int mid = (left + right) / 2;\n        if (arr[mid] &lt; findValue) {\n            return search(arr, findValue, mid + 1, right);\n        } else if (arr[mid] &gt; findValue) {\n            return search(arr, findValue, left, mid - 1);\n        } else {\n            return mid;\n        }\n\n    }\n\n    /**\n     * \u53ef\u4ee5\u626b\u63cf\u591a\u4e2a\u5143\u7d20\n     * \u601d\u8def\uff1a\n     * 1.\u5728\u627e\u5230mid\u7d22\u5f15\u7684\u65f6\u5019\u4e0d\u8981\u9a6c\u4e0a\u8fd4\u56de\n     * 2.\u5411mid\u7d22\u5f15\u7684\u5de6\u8fb9\u626b\u63cf\uff0c\u5c06\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e0b\u6807\u52a0\u5165\u5230List\u4e2d\uff08\u56e0\u4e3a\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u6240\u4ee5\u76f8\u540c\u7684\u5143\u7d20\u5fc5\u5b9a\u76f8\u90bb\uff09\n     * 3.\u5411mid\u7d22\u5f15\u7684\u53f3\u8fb9\u626b\u63cf\uff0c\u5c06\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e0b\u6807\u52a0\u5165\u5230List\u4e2d\n     * 4.\u5c06List\u8fd4\u56de\n     */\n    public static List&lt;Integer&gt; search2(int[] arr, int findValue, int left, int right) {\n        if (left &gt; right) {\n            return new ArrayList&lt;&gt;();\n        }\n        int mid = (left + right) / 2;\n        if (arr[mid] &lt; findValue) {\n            return search2(arr, findValue, mid + 1, right);\n        } else if (arr[mid] &gt; findValue) {\n            return search2(arr, findValue, left, mid - 1);\n        } else {\n            int temp = mid - 1;\n            List&lt;Integer&gt; result = new ArrayList&lt;&gt;();\n            while (temp &gt;= 0 &amp;&amp; arr[temp] == findValue) {\n                result.add(temp);\n                temp--;\n            }\n            result.add(mid);\n            temp = mid + 1;\n            while (temp &lt;= arr.length - 1 &amp;&amp; arr[temp] == findValue) {\n                result.add(temp);\n                temp++;\n            }\n            return result;\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#84","title":"8.4 \u63d2\u503c\u67e5\u627e","text":"<ol> <li>\u63d2\u503c\u67e5\u627e\u539f\u7406\u4ecb\u7ecd\uff1a</li> </ol> <p>\u63d2\u503c\u67e5\u627e\u7b97\u6cd5\u7c7b\u4f3c\u4e8e\u4e8c\u5206\u67e5\u627e\uff0c\u4e0d\u540c\u7684\u662f\u63d2\u503c\u67e5\u627e\u6bcf\u6b21\u4ece\u81ea\u9002\u5e94 mid \u5904\u5f00\u59cb\u67e5\u627e\u3002</p> <ol> <li>\u5c06\u6298\u534a\u67e5\u627e\u4e2d\u7684\u6c42  mid   \u7d22\u5f15\u7684\u516c\u5f0f    ,  low   \u8868\u793a\u5de6\u8fb9\u7d22\u5f15  left,  high  \u8868\u793a\u53f3\u8fb9\u7d22\u5f15  right.     key    \u5c31\u662f\u524d\u9762\u6211\u4eec\u8bb2\u7684       findVal</li> </ol> <p></p> <ol> <li> <p>int mid  = low +  (high  - low) *  (key  - arr[low]) /  (arr[high] -  arr[low])       ;/\u63d2\u503c\u7d22\u5f15/     \u5bf9\u5e94\u524d\u9762\u7684\u4ee3\u7801\u516c\u5f0f\uff1a    int mid  = left  +  (right    \u2013    left)  *  (findVal   \u2013    arr[left]) /  (arr[right]    \u2013    arr[left])</p> </li> <li> <p>\u4e3e\u4f8b\u8bf4\u660e\u63d2\u503c\u67e5\u627e\u7b97\u6cd5    1-100   \u7684\u6570\u7ec4</p> </li> </ol> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#841","title":"8.4.1 \u63d2\u503c\u67e5\u627e\u5e94\u7528\u6848\u4f8b","text":"<pre><code>package search;\n\n/**\n * \u63d2\u503c\u67e5\u627e\n * \u4e3b\u8981\u7684\u4e0d\u540c\u5c31\u662fmid\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e0d\u540c\uff0c\u81ea\u9002\u5e94\n * int mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);\n */\npublic class InsertValueSearch {\n    public static void main(String[] args) {\n        int[] arr = new int[100];\n        for (int i = 0; i &lt; arr.length; i++) {\n            arr[i] = i + 1;\n        }\n        int index = search(arr, 0, arr.length - 1, 99);\n        System.out.println(\"index = \" + index);\n        // System.out.println(Arrays.toString(arr));\n\n    }\n\n    public static int search(int[] arr, int left, int right, int findVal) {\n        if (left &gt; right || findVal &lt; arr[0] || findVal &gt; arr[arr.length - 1]) {\n            return -1;\n        }\n        int mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);\n        int midVal = arr[mid];\n        if (findVal &lt; midVal) {\n            return search(arr, left, mid - 1, findVal);\n        } else if (findVal &gt; midVal) {\n            return search(arr, mid + 1, right, findVal);\n        } else {\n            return mid;\n        }\n\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#842","title":"8.4.2 \u63d2\u503c\u67e5\u627e\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u5bf9\u4e8e\u6570\u636e\u91cf\u8f83\u5927\uff0c\u5173\u952e\u5b57\u5206\u5e03\u6bd4\u8f83\u5747\u5300\u7684\u67e5\u627e\u8868\u6765\u8bf4\uff0c\u91c7\u7528\u63d2\u503c\u67e5\u627e\uff0c\u901f\u5ea6\u8f83\u5feb.</li> </ol> <p>2)       \u5173\u952e\u5b57\u5206\u5e03\u4e0d\u5747\u5300\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u65b9\u6cd5\u4e0d\u4e00\u5b9a\u6bd4\u6298\u534a\u67e5\u627e\u8981\u597d</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#85","title":"8.5 \u6590\u6ce2\u90a3\u5951(\u9ec4\u91d1\u5206\u5272\u6cd5)\u67e5\u627e\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#851","title":"8.5.1 \u6590\u6ce2\u90a3\u5951(\u9ec4\u91d1\u5206\u5272\u6cd5)\u67e5\u627e\u57fa\u672c\u4ecb\u7ecd","text":"<ol> <li>\u9ec4\u91d1\u5206\u5272\u70b9\u662f\u6307\u628a\u4e00\u6761\u7ebf\u6bb5\u5206\u5272\u4e3a\u4e24\u90e8\u5206\uff0c\u4f7f\u5176\u4e2d\u4e00\u90e8\u5206\u4e0e\u5168\u957f\u4e4b\u6bd4\u7b49\u4e8e\u53e6\u4e00\u90e8\u5206\u4e0e\u8fd9\u90e8\u5206\u4e4b\u6bd4\u3002\u53d6\u5176\u524d\u4e09\u4f4d\u6570\u5b57\u7684\u8fd1\u4f3c\u503c\u662f 0.618\u3002\u7531\u4e8e\u6309\u6b64\u6bd4\u4f8b\u8bbe\u8ba1\u7684\u9020\u578b\u5341\u5206\u7f8e\u4e3d\uff0c\u56e0\u6b64\u79f0\u4e3a\u9ec4\u91d1\u5206\u5272\uff0c\u4e5f\u79f0\u4e3a\u4e2d\u5916\u6bd4\u3002\u8fd9\u662f\u4e00\u4e2a\u795e\u5947\u7684\u6570\u5b57\uff0c\u4f1a\u5e26\u6765\u610f\u5411\u4e0d\u5927\u7684\u6548\u679c\u3002</li> </ol> <p>2)       \u6590\u6ce2\u90a3\u5951\u6570\u5217    {1,  1,  2,  3,  5,  8,  13,  21,  34,  55  }    \u53d1\u73b0\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u4e24\u4e2a\u76f8\u90bb\u6570    \u7684\u6bd4\u4f8b\uff0c\u65e0\u9650\u63a5\u8fd1    \u9ec4\u91d1\u5206\u5272\u503c0.618</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#852","title":"8.5.2 \u6590\u6ce2\u90a3\u5951(\u9ec4\u91d1\u5206\u5272\u6cd5)\u539f\u7406","text":"<p>\u6590\u6ce2\u90a3\u5951\u67e5\u627e\u539f\u7406\u4e0e\u524d\u4e24\u79cd\u76f8\u4f3c\uff0c\u4ec5\u4ec5\u6539\u53d8\u4e86\u4e2d\u95f4\u7ed3\u70b9\uff08mid\uff09\u7684\u4f4d\u7f6e\uff0cmid  \u4e0d\u518d\u662f\u4e2d\u95f4\u6216\u63d2\u503c\u5f97\u5230\uff0c\u800c\u662f\u4f4d\u4e8e\u9ec4\u91d1\u5206\u5272\u70b9\u9644\u8fd1\uff0c\u5373  mid=low+F(k-1)-1\uff08F \u4ee3\u8868\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u5bf9  F(k-1)-1  \u7684\u7406\u89e3\uff1a</p> <ol> <li> <p>\u7531\u6590\u6ce2\u90a3\u5951\u6570\u5217   F[k]=F[k-1]+F[k-2]   \u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5f97\u5230  \uff08F[k]-1\uff09=\uff08F[k-1]-1\uff09+\uff08F[k-2]-1\uff09+1  \u3002\u8be5\u5f0f\u8bf4\u660e\uff1a\u53ea\u8981\u987a\u5e8f\u8868\u7684\u957f\u5ea6\u4e3a  F[k]-1\uff0c\u5219\u53ef\u4ee5\u5c06\u8be5\u8868\u5206\u6210\u957f\u5ea6\u4e3a  F[k-1]-1  \u548c  F[k-2]-1  \u7684\u4e24\u6bb5\uff0c\u5373\u5982\u4e0a\u56fe\u6240\u793a\u3002\u4ece\u800c\u4e2d\u95f4\u4f4d\u7f6e\u4e3a  mid=low+F(k-1)-1</p> </li> <li> <p>\u7c7b\u4f3c\u7684\uff0c\u6bcf\u4e00\u5b50\u6bb5\u4e5f\u53ef\u4ee5\u7528\u76f8\u540c\u7684\u65b9\u5f0f\u5206\u5272</p> </li> <li> <p>\u4f46\u987a\u5e8f\u8868\u957f\u5ea6 n \u4e0d\u4e00\u5b9a\u521a\u597d\u7b49\u4e8e F[k]-1\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u539f\u6765\u7684\u987a\u5e8f\u8868\u957f\u5ea6 n \u589e\u52a0\u81f3 F[k]-1\u3002\u8fd9\u91cc\u7684 k \u503c\u53ea\u8981\u80fd\u4f7f\u5f97 F[k]-1 \u6070\u597d\u5927\u4e8e\u6216\u7b49\u4e8e n \u5373\u53ef\uff0c\u7531\u4ee5\u4e0b\u4ee3\u7801\u5f97\u5230,\u987a\u5e8f\u8868\u957f\u5ea6\u589e\u52a0\u540e\uff0c\u65b0\u589e\u7684\u4f4d\u7f6e\uff08\u4ece n+1 \u5230 F[k]-1 \u4f4d\u7f6e\uff09\uff0c\u90fd\u8d4b\u4e3a n \u4f4d\u7f6e\u7684\u503c\u5373\u53ef\u3002</p> </li> </ol> <pre><code>while(n &gt; fib(k)-1){\n    k++;\n}\n\n\u5c31\u662f\u8bf4\u76ee\u6807\u6570\u7ec4\u7684\u957f\u5ea6\u5f97\u662ffib[k] - 1\u7684\u957f\u5ea6\u624d\u80fd\u6c42\u51fa\u9ec4\u91d1\u5206\u5272\u70b9mid\u3002\uff08\u7ed3\u5408\u4e0a\u56fe\u7406\u89e3\uff09\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#853","title":"8.5.3 \u6590\u6ce2\u90a3\u5951\u67e5\u627e\u5e94\u7528\u6848\u4f8b","text":"<pre><code>package search;\n\nimport java.util.Arrays;\n\n/**\n * \u6590\u6ce2\u90a3\u5951\u67e5\u627e\n * \u9700\u8981\u7528\u5230\u6590\u6ce2\u90a3\u5951\u6570\u5217\n * mid\u4e0d\u518d\u662f\u4e2d\u95f4\u6216\u8005\u63d2\u503c\u627e\u5230\u7684\u4e0b\u6807\uff0c\u800c\u662f\u4e34\u8fd1\u9ec4\u91d1\u5206\u5272\u70b9\u7684\u4f4d\u7f6e\n * \u5728n=F(k)-1\u60c5\u51b5\u4e0b\uff0cmid = low + F[k-1] - 1\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86mid\u7684\u4f4d\u7f6e\n * mid = low + fib(k - 1) - 1\n */\npublic class FibonacciSearch {\n    public static void main(String[] args) {\n        // int[] fib = getFib(20);\n        // System.out.println(Arrays.toString(fib));\n\n        int[] arr = {1, 2, 3, 4, 5, 6};\n        int index = search(arr, 6);\n        System.out.println(\"index = \" + index);\n    }\n\n    /**\n     * \u5f97\u5230\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u5217\n     */\n    public static int[] getFib(int size) {\n        int[] fib = new int[size];\n        fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i &lt; fib.length; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib;\n    }\n\n    /**\n     * mid = low + fib(k - 1) - 1\n     */\n    public static int search(int[] arr, int findVal) {\n        int low = 0;\n        int high = arr.length - 1;\n        int[] fib = getFib(20); // \u83b7\u53d6\u6590\u6ce2\u90a3\u5951\u6570\u5217\n        int k = 0;  // \u5c31\u662ffib(k - 1)\u4e2d\u7684k\n        int mid = 0;    // \u9ec4\u91d1\u5206\u5272\u70b9\n\n        // \u7531\u4e8e\u987a\u5e8f\u8868\u957f\u5ea6\u4e0d\u4e00\u5b9a\u521a\u597d\u7b49\u4e8efib[k] - 1\uff0c\u6240\u4ee5\uff0c\u9700\u8981\u5c06\u987a\u5e8f\u8868\u7684\u957f\u5ea6\u6dfb\u52a0\u503cfib[k] - 1\n        while (high &gt; fib[k] - 1) {\n            k++;\n        }\n\n        //\u56e0\u4e3afib[k]\u503c\u53ef\u80fd\u5927\u4e8earr\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff0c\u5c06\u4e0d\u8db3\u7684\u90e8\u5206\u8fdb\u884c\u586b\u5145\n        int[] temp = Arrays.copyOf(arr, fib[k]);\n        for (int i = arr.length; i &lt; temp.length; i++) {\n            temp[i] = arr[high];\n        }\n\n        while (low &lt;= high) {\n            mid = low + fib[k - 1] - 1;\n            int midVal = temp[mid];\n            if (findVal &gt; midVal) {\n                low = mid + 1;\n                k -= 2; //\u4e3a\u4ec0\u4e48\u662fk-=2\uff0c\u7ed3\u5408\u56fe\u7247\u7406\u89e3\n            } else if (findVal &lt; midVal) {\n                high = mid - 1;\n                k--;    //\u4e3a\u4ec0\u4e48\u662fk--\uff0c\u7ed3\u5408\u56fe\u7247\u7406\u89e3\n            } else {\n                return Math.min(mid, high);\n            }\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_10","title":"\u4e5d\u3001\u54c8\u5e0c\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#91-google","title":"9.1 \u54c8\u5e0c\u8868(\u6563\u5217)-Google \u4e0a\u673a\u9898","text":"<ol> <li> <p>\u770b\u4e00\u4e2a\u5b9e\u9645\u9700\u6c42\uff0cgoogle  \u516c\u53f8\u7684\u4e00\u4e2a\u4e0a\u673a\u9898:</p> </li> <li> <p>\u6709\u4e00\u4e2a\u516c\u53f8,\u5f53\u6709\u65b0\u7684\u5458\u5de5\u6765\u62a5\u9053\u65f6,\u8981\u6c42\u5c06\u8be5\u5458\u5de5\u7684\u4fe1\u606f\u52a0\u5165(id,\u6027\u522b,\u5e74\u9f84,\u4f4f\u5740..),\u5f53\u8f93\u5165\u8be5\u5458\u5de5\u7684 id \u65f6,\u8981\u6c42\u67e5\u627e\u5230\u8be5\u5458\u5de5\u7684\u6240\u6709\u4fe1\u606f.</p> </li> <li> <p>\u8981\u6c42:   \u4e0d\u4f7f\u7528\u6570\u636e\u5e93,\u5c3d\u91cf\u8282\u7701\u5185\u5b58,\u901f\u5ea6\u8d8a\u5feb\u8d8a\u597d=&gt;\u54c8\u5e0c\u8868(\u6563\u5217)</p> </li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#92","title":"9.2 \u54c8\u5e0c\u8868\u7684\u57fa\u672c\u4ecb\u7ecd","text":"<p>\u6563\u5217\u8868\uff08Hash table\uff0c\u4e5f\u53eb\u54c8\u5e0c\u8868\uff09\uff0c\u662f\u6839\u636e\u5173\u952e\u7801\u503c(Key value)\u800c\u76f4\u63a5\u8fdb\u884c\u8bbf\u95ee\u7684\u6570\u636e\u7ed3\u6784\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u901a\u8fc7\u628a\u5173\u952e\u7801\u503c\u6620\u5c04\u5230\u8868\u4e2d\u4e00\u4e2a\u4f4d\u7f6e\u6765\u8bbf\u95ee\u8bb0\u5f55\uff0c\u4ee5\u52a0\u5feb\u67e5\u627e\u7684\u901f\u5ea6\u3002\u8fd9\u4e2a\u6620\u5c04\u51fd\u6570\u53eb\u505a\u6563\u5217\u51fd\u6570\uff0c\u5b58\u653e\u8bb0\u5f55\u7684\u6570\u7ec4\u53eb\u505a\u6563\u5217\u8868</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#93-google","title":"9.3 google \u516c\u53f8\u7684\u4e00\u4e2a\u4e0a\u673a\u9898","text":"<p>\u6709\u4e00\u4e2a\u516c\u53f8,\u5f53\u6709\u65b0\u7684\u5458\u5de5\u6765\u62a5\u9053\u65f6,\u8981\u6c42\u5c06\u8be5\u5458\u5de5\u7684\u4fe1\u606f\u52a0\u5165(id,\u6027\u522b,\u5e74\u9f84,\u540d\u5b57,\u4f4f\u5740..),\u5f53\u8f93\u5165\u8be5\u5458\u5de5\u7684  id  \u65f6, \u8981\u6c42\u67e5\u627e\u5230\u8be5\u5458\u5de5\u7684    \u6240\u6709\u4fe1\u606f.</p> <p>\u8981\u6c42\uff1a</p> <ol> <li>\u4e0d\u4f7f\u7528\u6570\u636e\u5e93,,\u901f\u5ea6\u8d8a\u5feb\u8d8a\u597d=&gt;\u54c8\u5e0c\u8868(\u6563\u5217)</li> <li>\u6dfb\u52a0\u65f6\uff0c\u4fdd\u8bc1\u6309\u7167  id \u4ece\u4f4e\u5230\u9ad8\u63d2\u5165        [\u8bfe\u540e\u601d\u8003\uff1a\u5982\u679c  id  \u4e0d\u662f\u4ece\u4f4e\u5230\u9ad8\u63d2\u5165\uff0c\u4f46\u8981\u6c42\u5404\u6761\u94fe\u8868\u4ecd\u662f\u4ece\u4f4e\u5230\u9ad8\uff0c\u600e\u4e48\u89e3\u51b3?]</li> <li> <p>\u4f7f\u7528\u94fe\u8868\u6765\u5b9e\u73b0\u54c8\u5e0c\u8868,    \u8be5\u94fe\u8868\u4e0d\u5e26\u8868\u5934[\u5373:    \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u5c31\u5b58\u653e\u96c7\u5458\u4fe1\u606f]</p> </li> <li> <p>\u601d\u8def\u5206\u6790\uff1a</p> </li> </ol> <p></p> <pre><code>package hashtab;\n\nimport java.util.Scanner;\n\npublic class HashTabDemo {\n    public static void main(String[] args) {\n        HashTab hashTab = new HashTab(7);\n        // \u5199\u4e00\u4e2a\u83dc\u5355\n        String key = \"\";\n        Scanner sc = new Scanner(System.in);\n        while (true) {\n            System.out.println(\"add\uff1a\u6dfb\u52a0\u96c7\u5458\");\n            System.out.println(\"list\uff1a\u663e\u793a\u96c7\u5458\");\n            System.out.println(\"find\uff1a\u67e5\u627e\u96c7\u5458\");\n            System.out.println(\"edit\uff1a\u4fee\u6539\u96c7\u5458\u4fe1\u606f\");\n            System.out.println(\"del\uff1a\u5220\u9664\u96c7\u5458\");\n            System.out.println(\"exit\uff1a\u9000\u51fa\u7cfb\u7edf\");\n            key = sc.next();\n            switch (key) {\n                case \"del\" -&gt; {\n                    System.out.println(\"\u8bf7\u8f93\u5165\u8981\u5220\u9664\u96c7\u5458\u7684id\");\n                    int id = sc.nextInt();\n                    hashTab.findEmpById(id);\n                    System.out.println(\"\u786e\u8ba4\u8981\u5220\u9664\u5417\uff1f(y/n)\");\n                    String tempKey = sc.next();\n                    switch (tempKey) {\n                        case \"y\" -&gt; {\n                            hashTab.delEmpById(id);\n                        }\n                        case \"n\" -&gt; System.out.println(\"\u53d6\u6d88\u64cd\u4f5c\u6210\u529f\");\n                        default -&gt; System.out.println(\"\u8bf7\u91cd\u65b0\u8f93\u5165\");\n                    }\n                }\n                case \"add\" -&gt; {\n                    System.out.println(\"\u8f93\u5165id\");\n                    int id = sc.nextInt();\n                    System.out.println(\"\u8f93\u5165\u540d\u5b57\");\n                    String name = sc.next();\n                    Emp emp = new Emp(id, name);\n                    hashTab.add(emp);\n                }\n                case \"edit\" -&gt; {\n                    System.out.println(\"\u8bf7\u8f93\u5165\u8981\u4fee\u6539\u96c7\u5458\u7684id\");\n                    int id = sc.nextInt();\n                    hashTab.findEmpById(id);\n                    System.out.println(\"\u8bf7\u8f93\u5165\u8981\u4fee\u6539\u96c7\u5458\u7684\u4fe1\u606f(id/name)\");\n                    String tempKey = sc.next();\n                    switch (tempKey) {\n                        case \"name\" -&gt; {\n                            System.out.println(\"\u8bf7\u8f93\u5165\u8981\u4fee\u6539\u96c7\u5458\u7684\u59d3\u540d\");\n                            String name = sc.next();\n                            Emp emp = new Emp(id, name);\n                            hashTab.editEmpById(emp);\n                            System.out.println(\"\u4fee\u6539\u6210\u529f\");\n                        }\n                        case \"id\" -&gt; System.out.println(\"\u65e0\u6cd5\u4fee\u6539id\");\n                    }\n                }\n                case \"list\" -&gt; hashTab.list();\n                case \"find\" -&gt; {\n                    System.out.println(\"\u8bf7\u8f93\u5165\u8981\u67e5\u627e\u96c7\u5458\u7684id\");\n                    int id = sc.nextInt();\n                    hashTab.findEmpById(id);\n                }\n                case \"exit\" -&gt; System.exit(0);\n            }\n        }\n    }\n}\n\n/**\n * \u521b\u5efaHashTab\u7ba1\u7406\u591a\u6761\u94fe\u8868\n */\nclass HashTab {\n    private final EmpLinkedList[] empLinkedListArray;\n    private final int size;   // \u5171\u6709\u591a\u5c11\u6761\u94fe\u8868\n\n    public HashTab(int size) {\n        this.size = size;\n        empLinkedListArray = new EmpLinkedList[size];\n        // \u8fd9\u91cc\u8981\u5206\u522b\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u94fe\u8868\n        for (int i = 0; i &lt; empLinkedListArray.length; i++) {\n            empLinkedListArray[i] = new EmpLinkedList();\n        }\n    }\n\n    /**\n     * \u6839\u636eid\u5220\u9664\u96c7\u5458\n     */\n    public void delEmpById(int id) {\n        int index = hashFun(id);\n        EmpLinkedList empLinkedList = empLinkedListArray[index - 1];\n        if (empLinkedList == null || empLinkedList.getHead() == null) {\n            System.out.println(\"\u672a\u627e\u5230id=\" + id + \"\u7684\u96c7\u5458\");\n            return;\n        }\n        Emp tempEmp = empLinkedList.getHead();\n        if (tempEmp.getId() == id) {\n            empLinkedList.setHead(tempEmp.getNext());\n            System.out.println(\"\u5220\u9664\u6210\u529f\");\n            return;\n        }\n        while (true) {\n            if (tempEmp.getNext() == null) {\n                System.out.println(\"\u672a\u627e\u5230id=\" + id + \"\u7684\u96c7\u5458\");\n                return;\n            }\n            if (tempEmp.getNext().getId() == id) {\n                tempEmp.setNext(tempEmp.getNext().getNext());\n                System.out.println(\"\u5220\u9664\u6210\u529f\");\n                return;\n            }\n            tempEmp = tempEmp.getNext();\n        }\n    }\n\n    /**\n     * \u6839\u636eid\u4fee\u6539\u96c7\u5458\u4fe1\u606f\n     */\n    public void editEmpById(Emp editEmp) {\n        int index = hashFun(editEmp.getId());\n        Emp emp = empLinkedListArray[index - 1].findEmpById(editEmp.getId());\n        if (emp == null) {\n            System.out.println(\"\u4e3a\u627e\u5230id=\" + editEmp.getId() + \"\u7684\u96c7\u5458\");\n        } else {\n            emp.setName(editEmp.getName());\n        }\n    }\n\n    /**\n     * \u6839\u636eid\u67e5\u627e\u96c7\u5458\n     */\n    public void findEmpById(int id) {\n        int index = hashFun(id);\n        Emp emp = empLinkedListArray[index - 1].findEmpById(id);\n        if (emp == null) {\n            System.out.println(\"\u672a\u67e5\u627e\u5230id=\" + id + \"\u7684\u96c7\u5458\");\n        } else {\n            System.out.printf(\"\u5728\u7b2c%d\u6761\u94fe\u8868\u4e2d\u627e\u5230id=%d\u7684\u96c7\u5458\uff0c\u4fe1\u606f\u4e3a\uff1a\", index, id);\n            System.out.println(emp);\n        }\n\n\n    }\n\n    /**\n     * \u6dfb\u52a0\n     */\n    public void add(Emp emp) {\n        if (emp.getId() &lt;= 0) {\n            System.out.println(\"id\u5fc5\u987b\u662f\u6b63\u6574\u6570\");\n            return;\n        }\n        int index = hashFun(emp.getId());\n        empLinkedListArray[index - 1].add(emp);\n    }\n\n    /**\n     * \u904d\u5386HashTab\n     */\n    public void list() {\n        for (int i = 0; i &lt; empLinkedListArray.length; i++) {\n            empLinkedListArray[i].list(i);\n        }\n    }\n\n    /**\n     * \u7f16\u5199\u6563\u5217\u51fd\u6570\uff0c\u8fd9\u4e2a\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u53d6\u6a21\u6cd5\n     */\n    public int hashFun(int id) {\n        return id % size;\n    }\n\n}\n\n/**\n * \u96c7\u5458\u94fe\u8868\n */\nclass EmpLinkedList {\n    private Emp head;\n\n    public Emp getHead() {\n        return head;\n    }\n\n    public void setHead(Emp head) {\n        this.head = head;\n    }\n\n    /**\n     * \u6dfb\u52a0\u96c7\u5458\u5230\u94fe\u8868\n     */\n    public void add(Emp emp) {\n        if (head == null) {\n            head = emp;\n            return;\n        }\n        Emp tempEmp = head;\n        if (tempEmp.getId() &gt; emp.getId()) {\n            head = emp;\n            head.setNext(tempEmp);\n            return;\n        }\n        while (tempEmp.getNext() != null) {\n            if (tempEmp.getNext().getId() &gt; emp.getId()) {\n                break;\n            } else if (tempEmp.getId() == emp.getId()) {\n                System.out.println(\"\u5df2\u5b58\u5728\u8be5id\u7684\u96c7\u5458\uff0c\u6dfb\u52a0\u5931\u8d25\");\n                return;\n            }\n            tempEmp = tempEmp.getNext();\n        }\n        Emp newNext = tempEmp.getNext();\n        emp.setNext(newNext);\n        tempEmp.setNext(emp);\n    }\n\n    /**\n     * \u904d\u5386\u94fe\u8868\n     */\n    public void list(int no) {\n        if (head == null) {\n            System.out.printf(\"\u7b2c%d\u6761\u94fe\u8868\u4e3a\u7a7a\\n\", no + 1);\n            return;\n        }\n        Emp tempEmp = head;\n        System.out.printf(\"\u7b2c%d\u6761\u94fe\u8868\u7684\u4fe1\u606f\u4e3a:\", no + 1);\n        while (tempEmp != null) {\n            System.out.print(tempEmp + \"  \");\n            tempEmp = tempEmp.getNext();\n        }\n        System.out.println();\n    }\n\n    /**\n     * \u67e5\u627e\u96c7\u5458\n     */\n    public Emp findEmpById(int id) {\n        if (head == null) {\n            return null;\n        }\n        Emp tempEmp = head;\n        while (tempEmp != null) {\n            if (tempEmp.getId() == id) {\n                return tempEmp;\n            }\n            tempEmp = tempEmp.getNext();\n        }\n        return null;\n    }\n\n}\n\n/**\n * \u96c7\u5458\u7c7b\n */\nclass Emp {\n    private int id;\n    private String name;\n    private Emp next;\n\n    public Emp() {\n    }\n\n    @Override\n    public String toString() {\n        return \"Emp{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Emp getNext() {\n        return next;\n    }\n\n    public void setNext(Emp next) {\n        this.next = next;\n    }\n\n    public Emp(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_11","title":"\u5341\u3001\u6811\u7ed3\u6784\u7684\u57fa\u7840\u90e8\u5206","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#101","title":"10.1 \u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1011","title":"10.1.1 \u4e3a\u4ec0\u4e48\u9700\u8981\u6811\u8fd9\u79cd\u6570\u636e\u7ed3\u6784","text":"<ol> <li> <p>\u6570\u7ec4\u5b58\u50a8\u65b9\u5f0f\u7684\u5206\u6790    \u4f18\u70b9\uff1a\u901a\u8fc7\u4e0b\u6807\u65b9\u5f0f\u8bbf\u95ee\u5143\u7d20\uff0c\u901f\u5ea6\u5feb\u3002\u5bf9\u4e8e\u6709\u5e8f\u6570\u7ec4\uff0c\u8fd8\u53ef\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u63d0\u9ad8\u68c0\u7d22\u901f\u5ea6\u3002    \u7f3a\u70b9\uff1a\u5982\u679c\u8981\u68c0\u7d22\u5177\u4f53\u67d0\u4e2a\u503c\uff0c\u6216\u8005\u63d2\u5165\u503c(\u6309\u4e00\u5b9a\u987a\u5e8f)\u4f1a\u6574\u4f53\u79fb\u52a8\uff0c\u6548\u7387\u8f83\u4f4e    [\u793a\u610f\u56fe]    \u753b\u51fa\u64cd\u4f5c\u793a\u610f\u56fe\uff1a    </p> </li> <li> <p>\u94fe\u5f0f\u5b58\u50a8\u65b9\u5f0f\u7684\u5206\u6790    \u4f18\u70b9\uff1a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5bf9\u6570\u7ec4\u5b58\u50a8\u65b9\u5f0f\u6709\u4f18\u5316(\u6bd4\u5982\uff1a\u63d2\u5165\u4e00\u4e2a\u6570\u503c\u8282\u70b9\uff0c\u53ea\u9700\u8981\u5c06\u63d2\u5165\u8282\u70b9\uff0c\u94fe\u63a5\u5230\u94fe\u8868\u4e2d\u5373\u53ef\uff0c\u5220\u9664\u6548\u7387\u4e5f\u5f88\u597d)\u3002    \u7f3a\u70b9\uff1a\u5728\u8fdb\u884c\u68c0\u7d22\u65f6\uff0c\u6548\u7387\u4ecd\u7136\u8f83\u4f4e\uff0c\u6bd4\u5982(\u68c0\u7d22\u67d0\u4e2a\u503c\uff0c\u9700\u8981\u4ece\u5934\u8282\u70b9\u5f00\u59cb\u904d\u5386)   \u3010\u793a\u610f\u56fe\u3011     \u64cd\u4f5c\u793a\u610f\u56fe\uff1a    </p> </li> <li> <p>\u6811\u5b58\u50a8\u65b9\u5f0f\u7684\u5206\u6790    \u80fd\u63d0\u9ad8\u6570\u636e\u5b58\u50a8\uff0c\u8bfb\u53d6\u7684\u6548\u7387\uff0c\u6bd4\u5982\u5229\u7528\u4e8c\u53c9\u6392\u5e8f\u6811(Binary  Sort Tree)\uff0c\u65e2\u53ef\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u68c0\u7d22\u901f\u5ea6\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u63d2\u5165\uff0c\u5220\u9664\uff0c\u4fee\u6539\u7684\u901f\u5ea6\u3002\u3010\u793a\u610f\u56fe,\u540e\u9762\u8be6\u8bb2    \u6848\u4f8b:  [7, 3,  10,  1,  5,  9,  12]    </p> </li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1012","title":"10.1.2 \u6811\u793a\u610f\u56fe","text":"<p>\u6811\u7684\u5e38\u7528\u672f\u8bed(\u7ed3\u5408\u793a\u610f\u56fe\u7406\u89e3):</p> <ol> <li>\u8282\u70b9</li> <li>\u6839\u8282\u70b9</li> <li>\u7236\u8282\u70b9</li> <li>\u5b50\u8282\u70b9</li> <li>\u53f6\u5b50\u8282\u70b9    (\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9)</li> <li>\u8282\u70b9\u7684\u6743(\u8282\u70b9\u503c)</li> <li>\u8def\u5f84(\u4ece root \u8282\u70b9\u627e\u5230\u8be5\u8282\u70b9\u7684\u8def\u7ebf)</li> <li>\u5c42</li> <li>\u5b50\u6811</li> <li>\u6811\u7684\u9ad8\u5ea6(\u6700\u5927\u5c42\u6570)</li> <li>\u68ee\u6797\uff1a\u591a\u9897\u5b50\u6811\u6784\u6210\u68ee\u6797</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1013","title":"10.1.3 \u4e8c\u53c9\u6811\u7684\u6982\u5ff5","text":"<ol> <li>\u6811\u6709\u5f88\u591a\u79cd\uff0c\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u80fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u4e00\u79cd\u5f62\u5f0f\u79f0\u4e3a\u4e8c\u53c9\u6811\u3002</li> <li>\u4e8c\u53c9\u6811\u7684\u5b50\u8282\u70b9\u5206\u4e3a\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9</li> <li> <p>\u793a\u610f\u56fe    </p> </li> <li> <p>\u5982\u679c\u8be5\u4e8c\u53c9\u6811\u7684\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u6700\u540e\u4e00\u5c42\uff0c\u5e76\u4e14\u7ed3\u70b9\u603b\u6570= 2^n^  -1  ,  n\u4e3a\u5c42\u6570\uff0c\u5219\u6211\u4eec\u79f0\u4e3a\u6ee1\u4e8c\u53c9\u6811\u3002    </p> </li> <li> <p>\u5982\u679c\u8be5\u4e8c\u53c9\u6811\u7684\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u6700\u540e\u4e00\u5c42\u6216\u8005\u5012\u6570\u7b2c\u4e8c\u5c42\uff0c\u800c\u4e14\u6700\u540e\u4e00\u5c42\u7684\u53f6\u5b50\u8282\u70b9\u5728\u5de6\u8fb9\u8fde\u7eed\uff0c\u5012\u6570\u7b2c\u4e8c\u5c42\u7684\u53f6\u5b50\u8282\u70b9\u5728\u53f3\u8fb9\u8fde\u7eed\uff0c\u6211\u4eec\u79f0\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811    </p> </li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1014","title":"10.1.4 \u4e8c\u53c9\u6811\u904d\u5386\u7684\u8bf4\u660e","text":"<p>\u4f7f\u7528\u524d\u5e8f\uff0c\u4e2d\u5e8f\u548c\u540e\u5e8f\u5bf9\u4e0b\u9762\u7684\u4e8c\u53c9\u6811\u8fdb\u884c\u904d\u5386.</p> <ol> <li>\u524d\u5e8f\u904d\u5386:   \u5148\u8f93\u51fa\u7236\u8282\u70b9\uff0c\u518d\u904d\u5386\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811</li> <li>\u4e2d\u5e8f\u904d\u5386: \u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u8f93\u51fa\u7236\u8282\u70b9\uff0c\u518d\u904d\u5386\u53f3\u5b50\u6811</li> <li>\u540e\u5e8f\u904d\u5386: \u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u53f3\u5b50\u6811\uff0c\u6700\u540e\u8f93\u51fa\u7236\u8282\u70b9</li> <li>\u5c0f\u7ed3\uff1a\u770b\u8f93\u51fa\u7236\u8282\u70b9\u7684\u987a\u5e8f\uff0c\u5c31\u786e\u5b9a\u662f\u524d\u5e8f\uff0c\u4e2d\u5e8f\u8fd8\u662f\u540e\u5e8f</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1015","title":"10.1.5 \u4e8c\u53c9\u6811\u904d\u5386\u5e94\u7528\u5b9e\u4f8b(\u524d\u5e8f,\u4e2d\u5e8f,\u540e\u5e8f)","text":"<p>\u5e94\u7528\u5b9e\u4f8b\u7684\u8bf4\u660e\u548c\u601d\u8def</p> <p></p> <pre><code>package tree;\n\npublic class BinaryTreeDemo {\n    public static void main(String[] args) {\n        BinaryTree binaryTree = new BinaryTree();\n        UserNode root = new UserNode(1, \"\u5f20\u4e09\");\n        UserNode node2 = new UserNode(2, \"\u674e\u56db\");\n        UserNode node3 = new UserNode(3, \"\u738b\u4e94\");\n        UserNode node4 = new UserNode(4, \"\u8d75\u516d\");\n        UserNode node5 = new UserNode(5, \"\u8001\u516d\");\n        root.setLeft(node2);\n        root.setRight(node3);\n        node3.setRight(node4);\n        node3.setLeft(node5);\n\n        binaryTree.setRoot(root);\n        System.out.println(\"\u524d\u5e8f\u904d\u5386\"); // 1 2 3 5 4\n        binaryTree.predixOrder();\n        System.out.println(\"\u4e2d\u5e8f\u904d\u5386\"); // 2 1 5 3 4\n        binaryTree.infixOrder();\n        System.out.println(\"\u540e\u5e8f\u904d\u5386\"); // 2 5 4 3 1\n        binaryTree.suffixOrder();\n    }\n\n}\n\n/**\n * \u521b\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6811\n */\nclass BinaryTree {\n    private UserNode root;\n\n    public void setRoot(UserNode root) {\n        this.root = root;\n    }\n\n    /**\n     * \u524d\u5e8f\u904d\u5386\n     */\n    public void predixOrder() {\n        if (root == null) {\n            System.out.println(\"\u4e8c\u53c9\u6811\u4e3a\u7a7a\uff01\");\n            return;\n        }\n        root.predixOrder();\n    }\n\n    /**\n     * \u4e2d\u5e8f\u904d\u5386\n     */\n    public void infixOrder() {\n        if (root == null) {\n            System.out.println(\"\u4e8c\u53c9\u6811\u4e3a\u7a7a\uff01\");\n            return;\n        }\n        root.infixOrder();\n    }\n\n    /**\n     * \u540e\u5e8f\u904d\u5386\n     */\n    public void suffixOrder() {\n        if (root == null) {\n            System.out.println(\"\u4e8c\u53c9\u6811\u4e3a\u7a7a\uff01\");\n            return;\n        }\n        root.suffixOrder();\n    }\n}\n\n/**\n * \u521b\u5efaUser Node\u8282\u70b9\n */\nclass UserNode {\n    private int id;\n    private String name;\n    private UserNode left;  // \u5de6\u8282\u70b9\n    private UserNode right; // \u53f3\u8282\u70b9\n\n    public UserNode getLeft() {\n        return left;\n    }\n\n    public void setLeft(UserNode left) {\n        this.left = left;\n    }\n\n    public UserNode getRight() {\n        return right;\n    }\n\n    public void setRight(UserNode right) {\n        this.right = right;\n    }\n\n    @Override\n    public String toString() {\n        return \"UserNode{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public UserNode(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    /**\n     * \u524d\u5e8f\u904d\u5386\n     */\n    public void predixOrder() {\n        System.out.println(this);\n        if (this.left != null) {\n            this.left.predixOrder();\n        }\n        if (this.right != null) {\n            this.right.predixOrder();\n        }\n    }\n\n    /**\n     * \u4e2d\u5e8f\u904d\u5386\n     */\n    public void infixOrder() {\n        if (this.left != null) {\n            this.left.infixOrder();\n        }\n        System.out.println(this);\n        if (this.right != null) {\n            this.right.infixOrder();\n        }\n    }\n\n    /**\n     * \u540e\u7eed\u904d\u5386\n     */\n    public void suffixOrder() {\n        if (this.left != null) {\n            this.left.suffixOrder();\n        }\n        if (this.right != null) {\n            this.right.suffixOrder();\n        }\n        System.out.println(this);\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1016-","title":"10.1.6 \u4e8c\u53c9\u6811-\u67e5\u627e\u6307\u5b9a\u8282\u70b9","text":"<p>\u8981\u6c42 </p> <ol> <li>\u8bf7\u7f16\u5199\u524d\u5e8f\u67e5\u627e\uff0c\u4e2d\u5e8f\u67e5\u627e\u548c\u540e\u5e8f\u67e5\u627e\u7684\u65b9\u6cd5\u3002</li> <li>\u5e76\u5206\u522b\u4f7f\u7528\u4e09\u79cd\u67e5\u627e\u65b9\u5f0f\uff0c\u67e5\u627e heroNO = 5 \u7684\u8282\u70b9</li> <li>\u5e76\u5206\u6790\u5404\u79cd\u67e5\u627e\u65b9\u5f0f\uff0c\u5206\u522b\u6bd4\u8f83\u4e86\u591a\u5c11\u6b21</li> <li>\u601d\u8def\u5206\u6790\u56fe\u89e3    </li> </ol> <pre><code>/**\n * \u6839\u636eid\u524d\u5e8f\u67e5\u627e\n */\npublic UserNode predixSearch(int id) {\n    if (this.id == id) {\n        return this;\n    }\n    UserNode result = null;\n    if (this.left != null) {\n        result = this.left.predixSearch(id);\n    }\n    if (result != null) {\n        return result;\n    }\n\n    if (this.right != null) {\n        result = this.right.predixSearch(id);\n    }\n    return result;\n}\n\n/**\n * \u6839\u636eid\u4e2d\u5e8f\u67e5\u627e\n */\npublic UserNode infixSearch(int id) {\n    UserNode result = null;\n    if (this.left != null) {\n        result = this.left.infixSearch(id);\n    }\n    if (result != null) {\n        return result;\n    }\n\n    if (this.id == id) {\n        return this;\n    }\n\n    if (this.right != null) {\n        result = this.right.infixSearch(id);\n    }\n    return result;\n}\n\n/**\n * \u6839\u636eid\u540e\u5e8f\u904d\u5386\u67e5\u627e\n */\npublic UserNode suffixSearch(int id) {\n    UserNode result = null;\n    if (this.left != null) {\n        result = this.left.suffixSearch(id);\n    }\n    if (result != null) {\n        return result;\n    }\n\n    if (this.right != null) {\n        result = this.right.suffixSearch(id);\n    }\n    if (result != null) {\n        return result;\n    }\n\n    if (this.id == id) {\n        result = this;\n    }\n    return result;\n\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1017-","title":"10.1.7 \u4e8c\u53c9\u6811-\u5220\u9664\u8282\u70b9","text":"<p>\u8981\u6c42 1. \u5982\u679c\u5220\u9664\u7684\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u5220\u9664\u8be5\u8282\u70b9 2. \u5982\u679c\u5220\u9664\u7684\u8282\u70b9\u662f\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u5220\u9664\u8be5\u5b50\u6811.</p> <ol> <li> <p>\u6d4b\u8bd5\uff0c\u5220\u9664\u6389 5 \u53f7\u53f6\u5b50\u8282\u70b9 \u548c 3 \u53f7\u5b50\u6811.</p> </li> <li> <p>\u5b8c\u6210\u5220\u9664\u601d\u8def\u5206\u6790</p> </li> </ol> <p></p> <pre><code>class BinaryTree {\n    private UserNode root;\n\n    /**\n     * \u5220\u9664\u8282\u70b9\n     */\n    public void delNode(int id) {\n        if (root == null) {\n            System.out.println(\"\u4e8c\u53c9\u6811\u4e3a\u7a7a\uff01\");\n        }else {\n            if (root.getId() == id){\n                root = null;\n            }else {\n                root.delNode(id);\n            }\n        }\n    }\n}\n\nclass UserNode {\n    private int id;\n    private String name;\n    private UserNode left;  // \u5de6\u8282\u70b9\n    private UserNode right; // \u53f3\u8282\u70b9\n\n    /**\n     * \u5220\u9664\u8282\u70b9\n     */\n    public void delNode(int id) {\n        if (this.left != null &amp;&amp; this.left.id == id) {\n            this.left = null;\n            return;\n        }\n        if (this.right != null &amp;&amp; this.right.id == id) {\n            this.right = null;\n            return;\n        }\n        if (this.left != null) {\n            this.left.delNode(id);\n        }\n        if (this.right != null) {\n            this.right.delNode(id);\n        }\n    }\n}\n</code></pre> <p>10.1.8 \u4e8c\u53c9\u6811-\u5220\u9664\u8282\u70b9  \u601d\u8003\u9898(\u8bfe\u540e\u7ec3\u4e60)</p> <p>\u5982\u679c\u8981\u5220\u9664\u7684\u8282\u70b9\u662f\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u73b0\u5728\u6211\u4eec\u4e0d\u5e0c\u671b\u5c06\u8be5\u975e\u53f6\u5b50\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5220\u9664\uff0c\u9700\u8981\u6307\u5b9a\u89c4\u5219,    \u5047\u5982\u89c4\u5b9a\u5982\u4e0b:</p> <ol> <li>\u5982\u679c\u8be5\u975e\u53f6\u5b50\u8282\u70b9 A \u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9 B\uff0c\u5219\u5b50\u8282\u70b9 B \u66ff\u4ee3\u8282\u70b9 A</li> <li>\u5982\u679c\u8be5\u975e\u53f6\u5b50\u8282\u70b9 A \u6709\u5de6\u5b50\u8282\u70b9 B  \u548c\u53f3\u5b50\u8282\u70b9 C\uff0c\u5219\u8ba9\u5de6\u5b50\u8282\u70b9 B  \u66ff\u4ee3\u8282\u70b9 A\u3002</li> <li>\u8bf7\u5927\u5bb6\u601d\u8003\uff0c\u5982\u4f55\u5b8c\u6210\u8be5\u5220\u9664\u529f\u80fd,    \u8001\u5e08\u7ed9\u51fa\u63d0\u793a.(\u8bfe\u540e\u7ec3\u4e60)</li> <li>\u540e\u9762\u5728\u8bb2\u89e3   \u4e8c\u53c9\u6392\u5e8f\u6811\u65f6\uff0c\u5728\u7ed9\u5927\u5bb6\u8bb2\u89e3\u5177\u4f53\u7684\u5220\u9664\u65b9\u6cd5</li> </ol> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#102","title":"10.2 \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1021","title":"10.2.1 \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811\u7684\u6982\u5ff5","text":"<p>\u4ece\u6570\u636e\u5b58\u50a8\u6765\u770b\uff0c\u6570\u7ec4\u5b58\u50a8\u65b9\u5f0f\u548c\u6811\u7684\u5b58\u50a8\u65b9\u5f0f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff0c\u5373\u6570\u7ec4\u53ef\u4ee5\u8f6c\u6362\u6210\u6811\uff0c\u6811\u4e5f\u53ef\u4ee5\u8f6c\u6362\u6210\u6570\u7ec4\uff0c\u770b\u53f3\u9762\u7684\u793a\u610f\u56fe</p> <p></p> <p>\u8981\u6c42: 1. \u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\uff0c\u8981\u6c42\u4ee5\u6570\u7ec4\u7684\u65b9\u5f0f\u6765\u5b58\u653e    arr  :  [1, 2,  3,  4,  5,  6,  6]</p> <ol> <li>\u8981\u6c42\u5728\u904d\u5386\u6570\u7ec4 arr \u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u4ee5\u524d\u5e8f\u904d\u5386\uff0c\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\u5b8c\u6210\u7ed3\u70b9\u7684\u904d\u5386</li> </ol> <p>\u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811\u7684\u7279\u70b9:</p> <ol> <li>\u987a\u5e8f\u4e8c\u53c9\u6811\u901a\u5e38\u53ea\u8003\u8651\u5b8c\u5168\u4e8c\u53c9\u6811</li> <li>\u7b2c  n  \u4e2a\u5143\u7d20\u7684\u5de6\u5b50\u8282\u70b9\u4e3a        2  *  n + 1</li> <li>\u7b2c  n  \u4e2a\u5143\u7d20\u7684\u53f3\u5b50\u8282\u70b9\u4e3a        2  *  n + 2</li> <li>\u7b2c  n  \u4e2a\u5143\u7d20\u7684\u7236\u8282\u70b9\u4e3a        (n-1) /  2</li> <li>n  :   \u8868\u793a\u4e8c\u53c9\u6811\u4e2d\u7684\u7b2c\u51e0\u4e2a\u5143\u7d20(\u6309  0  \u5f00\u59cb\u7f16\u53f7\u5982\u56fe\u6240\u793a)</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1022","title":"10.2.2 \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811\u904d\u5386","text":"<pre><code>package tree;\n\npublic class ArrayBinaryTreeDemo {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 6, 7};\n        ArrayBinaryTree tree = new ArrayBinaryTree(arr);\n        tree.predixOrder();\n    }\n}\n\nclass ArrayBinaryTree {\n    private final int[] arr;\n\n    public ArrayBinaryTree(int[] arr) {\n        this.arr = arr;\n    }\n\n    /**\n     * \u91cd\u8f7dpredixOrder\n     */\n    public void predixOrder() {\n        this.predixOrder(0);\n    }\n    public void infixOrder() {\n        this.infixOrder(0);\n    }\n    public void suffixOrder() {\n        this.suffixOrder(0);\n    }\n\n    /**\n     * \u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\u5b8c\u6210\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u6570\u7ec4\n     *\n     * @param index \u6570\u7ec4\u4e0b\u6807\n     */\n    public void predixOrder(int index) {\n        if (arr.length == 0) {\n            System.out.println(\"\u6570\u7ec4\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u904d\u5386\");\n            return;\n        }\n        System.out.println(arr[index]);\n        if ((2 * index + 1) &lt; arr.length) {\n            predixOrder(2 * index + 1);\n        }\n        if ((2 * index + 2) &lt; arr.length) {\n            predixOrder(2 * index + 2);\n        }\n    }\n\n    /**\n     * \u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\u5b8c\u6210\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\n     *\n     * @param index \u6570\u7ec4\u4e0b\u6807\n     */\n    public void infixOrder(int index) {\n        if (arr.length == 0) {\n            System.out.println(\"\u6570\u7ec4\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u904d\u5386\");\n            return;\n        }\n        if ((2 * index + 1) &lt; arr.length) {\n            predixOrder(2 * index + 1);\n        }\n        System.out.println(arr[index]);\n        if ((2 * index + 2) &lt; arr.length) {\n            predixOrder(2 * index + 2);\n        }\n    }\n\n    /**\n     * \u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\u5b8c\u6210\u4e8c\u53c9\u6811\u540e\u5e8f\u904d\u5386\u6570\u7ec4\n     *\n     * @param index \u6570\u7ec4\u4e0b\u6807\n     */\n    public void suffixOrder(int index) {\n        if (arr.length == 0) {\n            System.out.println(\"\u6570\u7ec4\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u904d\u5386\");\n            return;\n        }\n        if ((2 * index + 1) &lt; arr.length) {\n            predixOrder(2 * index + 1);\n        }\n        if ((2 * index + 2) &lt; arr.length) {\n            predixOrder(2 * index + 2);\n        }\n        System.out.println(arr[index]);\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1023","title":"10.2.3 \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811\u5e94\u7528\u5b9e\u4f8b","text":"<p>\u516b\u5927\u6392\u5e8f\u7b97\u6cd5\u4e2d\u7684\u5806\u6392\u5e8f\uff0c\u5c31\u4f1a\u4f7f\u7528\u5230\u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#103","title":"10.3 \u7ebf\u7d22\u5316\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1031","title":"10.3.1 \u5148\u770b\u4e00\u4e2a\u95ee\u9898","text":"<p>\u5c06\u6570\u5217    {1,  3, 6, 8,  10, 14 }\u6784\u5efa\u6210\u4e00\u9897\u4e8c\u53c9\u6811.        n+1=7</p> <p></p> <p>\u95ee\u9898\u5206\u6790: 1. \u5f53\u6211\u4eec\u5bf9\u4e0a\u9762\u7684\u4e8c\u53c9\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\u65f6\uff0c\u6570\u5217\u4e3a   {8,  3,  10,  1,  6,  14  } 2. \u4f46\u662f   6,  8,  10,  14    \u8fd9\u51e0\u4e2a\u8282\u70b9\u7684   \u5de6\u53f3\u6307\u9488\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u7684\u5229\u7528\u4e0a. 3. \u5982\u679c\u6211\u4eec\u5e0c\u671b\u5145\u5206\u7684\u5229\u7528 \u5404\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u6307\u9488\uff0c \u8ba9\u5404\u4e2a\u8282\u70b9\u53ef\u4ee5\u6307\u5411\u81ea\u5df1\u7684\u524d\u540e\u8282\u70b9,\u600e\u4e48\u529e? 4. \u89e3\u51b3\u65b9\u6848-\u7ebf\u7d22\u4e8c\u53c9\u6811</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1032","title":"10.3.2 \u7ebf\u7d22\u4e8c\u53c9\u6811\u57fa\u672c\u4ecb\u7ecd","text":"<ol> <li>n  \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u94fe\u8868\u4e2d\u542b\u6709 n+1\u3010\u516c\u5f0f    2n-(n-1)=n+1\u3011   \u4e2a\u7a7a\u6307\u9488\u57df\u3002\u5229\u7528\u4e8c\u53c9\u94fe\u8868\u4e2d\u7684\u7a7a\u6307\u9488\u57df\uff0c\u5b58\u653e\u6307\u5411\u8be5\u7ed3\u70b9\u5728\u67d0\u79cd\u904d\u5386\u6b21\u5e8f\u4e0b\u7684\u524d\u9a71\u548c\u540e\u7ee7\u7ed3\u70b9\u7684\u6307\u9488\uff08\u8fd9\u79cd\u9644\u52a0\u7684\u6307\u9488\u79f0\u4e3a\"\u7ebf\u7d22\"\uff09</li> <li>\u8fd9\u79cd\u52a0\u4e0a\u4e86\u7ebf\u7d22\u7684\u4e8c\u53c9\u94fe\u8868\u79f0\u4e3a\u7ebf\u7d22\u94fe\u8868\uff0c\u76f8\u5e94\u7684\u4e8c\u53c9\u6811\u79f0\u4e3a\u7ebf\u7d22\u4e8c\u53c9\u6811(Threaded  BinaryTree)\u3002\u6839\u636e\u7ebf\u7d22\u6027\u8d28\u7684\u4e0d\u540c\uff0c\u7ebf\u7d22\u4e8c\u53c9\u6811\u53ef\u5206\u4e3a\u524d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u3001\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u548c\u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u4e09\u79cd</li> <li>\u4e00\u4e2a\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u79f0\u4e3a\u524d\u9a71\u7ed3\u70b9</li> <li>\u4e00\u4e2a\u7ed3\u70b9\u7684\u540e\u4e00\u4e2a\u7ed3\u70b9\uff0c\u79f0\u4e3a\u540e\u7ee7\u7ed3\u70b9</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1033","title":"10.3.3 \u7ebf\u7d22\u4e8c\u53c9\u6811\u5e94\u7528\u6848\u4f8b","text":"<p>\u5e94\u7528\u6848\u4f8b\u8bf4\u660e\uff1a\u5c06\u4e0b\u9762\u7684\u4e8c\u53c9\u6811\uff0c\u8fdb\u884c\u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811\u3002\u4e2d\u5e8f\u904d\u5386\u7684\u6570\u5217\u4e3a   {8,  3,  10,  1,  14,  6}</p> <p></p> <p>\u601d\u8def\u5206\u6790\uff1a\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff1a{8, 3,  10,  1,  14,  6}</p> <p></p> <p>\u8bf4\u660e:   \u5f53\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\u540e\uff0cNode  \u8282\u70b9\u7684    \u5c5e\u6027    left    \u548c    right    \uff0c\u6709\u5982\u4e0b\u60c5\u51b5: 1. left    \u6307\u5411\u7684\u662f\u5de6\u5b50\u6811\uff0c\u4e5f\u53ef\u80fd\u662f\u6307\u5411\u7684\u524d\u9a71\u8282\u70b9\uff0c\u6bd4\u5982\u2460\u8282\u70b9left\u6307\u5411\u7684\u5de6\u5b50\u6811\uff0c\u800c\u2469\u8282\u70b9\u7684left\u6307\u5411\u7684\u5c31\u662f\u524d\u9a71\u8282\u70b9. 2. right  \u6307\u5411\u7684\u662f\u53f3\u5b50\u6811\uff0c\u4e5f\u53ef\u80fd\u662f\u6307\u5411\u540e\u7ee7\u8282\u70b9\uff0c\u6bd4\u5982\u2460\u8282\u70b9right\u6307\u5411\u7684\u662f\u53f3\u5b50\u6811\uff0c\u800c\u2469\u8282\u70b9\u7684right\u6307\u5411\u7684\u662f\u540e\u7ee7\u8282\u70b9.</p> <pre><code>package tree;\n\nimport java.util.Objects;\n\npublic class ThreadedBinaryTreeDemo {\n    public static void main(String[] args) {\n        Node root = new Node(1);\n        Node node2 = new Node(3);\n        Node node3 = new Node(6);\n        Node node4 = new Node(8);\n        Node node5 = new Node(10);\n        Node node6 = new Node(14);\n\n        root.setLeft(node2);\n        root.setRight(node3);\n        node2.setLeft(node4);\n        node2.setRight(node5);\n        node3.setLeft(node6);\n\n\n        ThreadedBinaryTree threadedBinaryTree = new ThreadedBinaryTree();\n        threadedBinaryTree.setRoot(root);\n        // \u6d4b\u8bd5\u4e2d\u5e8f\u7ebf\u7d22\u5316\n        // threadedBinaryTree.infixThreadedNodes();\n        // threadedBinaryTree.preThreadedNode();\n        threadedBinaryTree.postThreadedNode();\n\n        // // \u6d4b\u8bd5:\u4ee510\u53f7\u8282\u70b9\u6d4b\u8bd5\n        Node leftNode = node5.getLeft();\n        Node rightNode = node5.getRight();\n        // System.out.println(\"\u4e2d\u5e8f\u7ebf\u7d22\u531610\u53f7\u7ed3\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u662f=\" + leftNode); // 3\n        // System.out.println(\"\u4e2d\u5e8f\u7ebf\u7d22\u531610\u53f7\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9\u662f=\" + rightNode); // 1\n        // System.out.println(\"\u524d\u5e8f\u7ebf\u7d22\u531610\u53f7\u7ed3\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u662f=\" + leftNode); // 8\n        // System.out.println(\"\u524d\u5e8f\u7ebf\u7d22\u531610\u53f7\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9\u662f=\" + rightNode); // 6\n        System.out.println(\"\u540e\u5e8f\u7ebf\u7d22\u531610\u53f7\u7ed3\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\u662f=\" + leftNode); // 8\n        System.out.println(\"\u540e\u5e8f\u7ebf\u7d22\u531610\u53f7\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9\u662f=\" + rightNode); // 3\n\n\n        // \u5f53\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\u540e\uff0c\u4e0d\u80fd\u518d\u4f7f\u7528\u539f\u6765\u7684\u904d\u5386\u65b9\u5f0f\n        // System.out.println(\"\u4f7f\u7528\u4e2d\u5e8f\u7ebf\u7d22\u5316\u7684\u65b9\u5f0f\u904d\u5386\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\");\n        // threadedBinaryTree.infixThreadedList();  // 8,  3,  10,  1,  14,  6\n\n        // System.out.println(\"\u4f7f\u7528\u524d\u5e8f\u7ebf\u7d22\u5316\u7684\u65b9\u5f0f\u904d\u5386\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\");\n        // threadedBinaryTree.preThreadedList(); // 1, 3, 8, 10, 6, 14\n\n        System.out.println(\"\u4f7f\u7528\u540e\u5e8f\u7ebf\u7d22\u5316\u7684\u65b9\u5f0f\u904d\u5386\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\");\n        threadedBinaryTree.postThreadedList(); // 8,10,3,14,6,1\n\n\n    }\n}\n\n/**\n * \u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\n */\nclass ThreadedBinaryTree {\n    private Node root;\n\n    /**\n     * \u5f53\u524d\u8282\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\n     */\n    private Node pre;\n\n    /**\n     * \u4e2d\u5e8f\u7ebf\u7d22\u5316\u8282\u70b9\n     */\n    public void infixThreadedNode(Node node) {\n        if (node == null) {\n            return;\n        }\n\n        // \u7ebf\u7d22\u5316\u5de6\u5b50\u6811\n        infixThreadedNode(node.getLeft());\n\n        // \u7ebf\u7d22\u5316\u5f53\u524d\u8282\u70b9\n        if (node.getLeft() == null) {\n            node.setLeft(pre);\n            node.setLeftType(1);\n        }\n\n        if (pre != null &amp;&amp; pre.getRight() == null) {\n            pre.setRight(node);\n            pre.setRightType(1);\n        }\n        //\uff01\uff01\uff01\uff01\u6bcf\u5904\u7406\u4e00\u4e2a\u8282\u70b9\u540e\uff0c\u5f53\u524d\u8282\u70b9\u662f\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u524d\u9a71\u7ed3\u70b9\n        pre = node;\n\n        // \u7ebf\u7d22\u5316\u53f3\u5b50\u6811\n        infixThreadedNode(node.getRight());\n    }\n\n    /**\n     * \u7ebf\u7d22\u5316\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6811\n     */\n    public void infixThreadedList() {\n        Node node = root;\n        while (node != null) {\n            // \u5faa\u73af\u627e\u5230leftType = 1\u7684\u8282\u70b9\n            // \u540e\u9762\u968f\u7740\u904d\u5386\u800c\u53d8\u5316\uff0c\u56e0\u4e3a\u5f53leftType = 1\u65f6\n            // \u8bf4\u660e\u8be5\u8282\u70b9\u662f\u6309\u7167\u7ebf\u7d22\u5316\u5904\u7406\u540e\u7684\u6709\u6548\u8282\u70b9\n            while (node.getLeftType() == 0) {\n                node = node.getLeft();\n            }\n            System.out.println(node);\n            // \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u53f3\u6307\u9488\u6307\u5411\u7684\u662f\u540e\u7ee7\u8282\u70b9\uff0c\u5c31\u4e00\u76f4\u8f93\u51fa\n            while (node.getRightType() == 1) {\n                node = node.getRight();\n                System.out.println(node);\n            }\n            node = node.getRight();\n        }\n    }\n\n    /**\n     * \u524d\u5e8f\u7ebf\u7d22\u5316\u8282\u70b9\n     */\n    public void preThreadedNode(Node node) {\n        if (node == null) {\n            return;\n        }\n        if (node.getLeft() == null) {\n            node.setLeft(pre);\n            node.setLeftType(1);\n        }\n        if (pre != null &amp;&amp; pre.getRight() == null) {\n            pre.setRight(node);\n            pre.setRightType(1);\n        }\n        pre = node;\n        if (node.getLeftType() != 1) {\n            preThreadedNode(node.getLeft());\n        }\n\n        if (node.getRightType() != 1) {\n            preThreadedNode(node.getRight());\n        }\n    }\n\n    /**\n     * \u524d\u5e8f\u904d\u5386\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\n     */\n    public void preThreadedList() {\n        Node node = root;\n        if (node != null) {\n            System.out.println(node);\n            while (node.getLeftType() == 0) {\n                node = node.getLeft();\n                System.out.println(node);\n            }\n            while (node.getRightType() == 1) {\n                node = node.getRight();\n                System.out.println(node);\n            }\n        }\n    }\n\n    /**\n     * \u91cd\u5199postThreadedNode\n     */\n    public void postThreadedNode() {\n        postThreadedNode(root);\n    }\n\n    /**\n     * \u540e\u5e8f\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\n     */\n    public void postThreadedNode(Node node) {\n        if (node == null) {\n            return;\n        }\n        if (node.getLeftType() == 0) {\n            postThreadedNode(node.getLeft());\n        }\n        if (node.getRightType() == 0) {\n            postThreadedNode(node.getRight());\n        }\n\n        if (node.getLeft() == null) {\n            node.setLeft(pre);\n            node.setLeftType(1);\n        }\n        if (pre != null &amp;&amp; pre.getRight() == null) {\n            pre.setRight(node);\n            pre.setRightType(1);\n        }\n        pre = node;\n\n    }\n\n    /**\n     * \u91cd\u5199preThreadedNode\n     */\n    public void preThreadedNode() {\n        preThreadedNode(root);\n    }\n\n    /**\n     * \u91cd\u5199infixThreadedNodes\n     */\n    public void infixThreadedNodes() {\n        infixThreadedNode(root);\n    }\n\n    /**\n     * \u540e\u5e8f\u904d\u5386\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\n     */\n    public void postThreadedList() {\n        Node node = root;\n        if (node != null) {\n            while (node.getLeftType() == 0) {\n                node = node.getLeft();\n            }\n            System.out.println(node);\n            while (node.getRightType() == 1) {\n                node = node.getRight();\n                System.out.println(node);\n            }\n            if (root.getRightType() == 0 &amp;&amp; root.getRight() != null) {\n                node = root.getRight();\n            }\n            while (node.getLeftType() == 0) {\n                node = node.getLeft();\n            }\n            System.out.println(node);\n            while (node.getRightType() == 1) {\n                node = node.getRight();\n                System.out.println(node);\n            }\n        }\n    }\n\n    public void setRoot(Node root) {\n        this.root = root;\n    }\n}\n\nclass Node {\n    private int no;\n    private Node left;\n    private Node right;\n\n    /**\n     * \u5de6\u5b50\u6811\u7684\u7c7b\u578b\uff0c1\u8868\u793a\u524d\u9a71\u7ed3\u70b9\n     */\n    private int leftType;\n    /**\n     * \u53f3\u5b50\u6811\u7c7b\u578b\uff0c1\u8868\u8ff0\u540e\u7ee7\u8282\u70b9\n     */\n    private int rightType;\n\n    public int getNo() {\n        return no;\n    }\n\n    public int getLeftType() {\n        return leftType;\n    }\n\n    public void setLeftType(int leftType) {\n        this.leftType = leftType;\n    }\n\n    public int getRightType() {\n        return rightType;\n    }\n\n    public void setRightType(int rightType) {\n        this.rightType = rightType;\n    }\n\n    public void setNo(int no) {\n        this.no = no;\n    }\n\n    public Node getLeft() {\n        return left;\n    }\n\n    public void setLeft(Node left) {\n        this.left = left;\n    }\n\n    public Node getRight() {\n        return right;\n    }\n\n    public void setRight(Node right) {\n        this.right = right;\n    }\n\n    @Override\n    public String toString() {\n        return \"Node{\" +\n                \"no=\" + no +\n                '}';\n    }\n\n    public Node() {\n    }\n\n    public Node(int no) {\n        this.no = no;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Node node = (Node) o;\n        return no == node.no;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(no);\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1034","title":"10.3.4 \u904d\u5386\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811","text":"<ol> <li>\u8bf4\u660e\uff1a\u5bf9\u524d\u9762\u7684\u4e2d\u5e8f\u7ebf\u7d22\u5316\u7684\u4e8c\u53c9\u6811\uff0c\u8fdb\u884c\u904d\u5386</li> <li>\u5206\u6790\uff1a\u56e0\u4e3a\u7ebf\u7d22\u5316\u540e\uff0c\u5404\u4e2a\u7ed3\u70b9\u6307\u5411\u6709\u53d8\u5316\uff0c\u56e0\u6b64\u539f\u6765\u7684\u904d\u5386\u65b9\u5f0f\u4e0d\u80fd\u4f7f\u7528\uff0c\u8fd9\u65f6\u9700\u8981\u4f7f\u7528\u65b0\u7684\u65b9\u5f0f\u904d\u5386\u7ebf\u7d22\u5316\u4e8c\u53c9\u6811\uff0c\u5404\u4e2a\u8282\u70b9\u53ef\u4ee5\u901a\u8fc7\u7ebf\u578b\u65b9\u5f0f\u904d\u5386\uff0c\u56e0\u6b64\u65e0\u9700\u4f7f\u7528\u9012\u5f52\u65b9\u5f0f\uff0c\u8fd9\u6837\u4e5f\u63d0\u9ad8\u4e86\u904d\u5386\u7684\u6548\u7387\u3002 \u904d\u5386\u7684\u6b21\u5e8f\u5e94\u5f53\u548c\u4e2d\u5e8f\u904d\u5386\u4fdd\u6301\u4e00\u81f4\u3002</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_12","title":"\u5341\u4e00\u3001\u6811\u7ed3\u6784\u5b9e\u9645\u5e94\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#111","title":"11.1 \u5806\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1111","title":"11.1.1 \u5806\u6392\u5e8f\u57fa\u672c\u4ecb\u7ecd","text":"<ol> <li>\u5806\u6392\u5e8f\u662f\u5229\u7528\u5806\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u800c\u8bbe\u8ba1\u7684\u4e00\u79cd\u6392\u5e8f\u7b97\u6cd5\uff0c\u5806\u6392\u5e8f\u662f\u4e00\u79cd\u9009\u62e9\u6392\u5e8f\uff0c\u5b83\u7684\u6700\u574f\uff0c\u6700\u597d\uff0c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a  O(nlogn)\uff0c\u5b83\u4e5f\u662f\u4e0d\u7a33\u5b9a\u6392\u5e8f\u3002</li> <li>\u5806\u662f\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u6216\u7b49\u4e8e\u5176\u5de6\u53f3\u5b50\u6811\u7ed3\u70b9\u7684\u503c\uff0c\u79f0\u4e3a\u5927\u9876\u5806 \u6ce8\u610f\uff1a\u6ca1\u6709\u8981\u6c42\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u7684\u503c\u548c\u53f3\u5b50\u6811\u7684\u503c\u7684\u5927\u5c0f\u5173\u7cfb\u3002</li> <li>\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5176\u5de6\u53f3\u5b50\u6811\u7ed3\u70b9\u7684\u503c\uff0c\u79f0\u4e3a\u5c0f\u9876\u5806</li> <li>\u5927\u9876\u5806\u4e3e\u4f8b\u8bf4\u660e</li> </ol> <ol> <li>\u5c0f\u9876\u5806\u4e3e\u4f8b\u8bf4\u660e</li> </ol> <ol> <li>\u4e00\u822c\u5347\u5e8f\u91c7\u7528\u5927\u9876\u5806\uff0c\u964d\u5e8f\u91c7\u7528\u5c0f\u9876\u5806</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1112","title":"11.1.2 \u5806\u6392\u5e8f\u57fa\u672c\u601d\u60f3","text":"<p>\u5806\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a 1. \u5c06\u5f85\u6392\u5e8f\u5e8f\u5217\u6784\u9020\u6210\u4e00\u4e2a\u5927\u9876\u5806 2. \u6b64\u65f6\uff0c\u6574\u4e2a\u5e8f\u5217\u7684\u6700\u5927\u503c\u5c31\u662f\u5806\u9876\u7684\u6839\u8282\u70b9\u3002 3. \u5c06\u5176\u4e0e\u672b\u5c3e\u5143\u7d20\u8fdb\u884c\u4ea4\u6362\uff0c\u6b64\u65f6\u672b\u5c3e\u5c31\u4e3a\u6700\u5927\u503c\u3002 4. \u7136\u540e\u5c06\u5269\u4f59  n-1  \u4e2a\u5143\u7d20\u91cd\u65b0\u6784\u9020\u6210\u4e00\u4e2a\u5806\uff0c\u8fd9\u6837\u4f1a\u5f97\u5230  n  \u4e2a\u5143\u7d20\u7684\u6b21\u5c0f\u503c\u3002\u5982\u6b64\u53cd\u590d\u6267\u884c\uff0c\u4fbf\u80fd\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u4e86\u3002</p> <p>\u53ef\u4ee5\u770b\u5230\u5728\u6784\u5efa\u5927\u9876\u5806\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5143\u7d20\u7684\u4e2a\u6570\u9010\u6e10\u51cf\u5c11\uff0c\u6700\u540e\u5c31\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u5e8f\u5217\u4e86.</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1113","title":"11.1.3 \u5806\u6392\u5e8f\u6b65\u9aa4\u56fe\u89e3\u8bf4\u660e","text":"<p>\u8981\u6c42\uff1a\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4    {4,6,8,5,9}  ,    \u8981\u6c42\u4f7f\u7528\u5806\u6392\u5e8f\u6cd5\uff0c\u5c06\u6570\u7ec4\u5347\u5e8f\u6392\u5e8f</p> <p>\u6b65\u9aa41\uff1a</p> <ol> <li>\u6784\u9020\u521d\u59cb\u5806\u3002\u5c06\u7ed9\u5b9a\u65e0\u5e8f\u5e8f\u5217\u6784\u9020\u6210\u4e00\u4e2a\u5927\u9876\u5806\uff08\u4e00\u822c\u5347\u5e8f\u91c7\u7528\u5927\u9876\u5806\uff0c\u964d\u5e8f\u91c7\u7528\u5c0f\u9876\u5806)\u3002 \u539f\u59cb\u7684\u6570\u7ec4    [4,  6,  8,  5,  9].\u5047\u8bbe\u7ed9\u5b9a\u65e0\u5e8f\u5e8f\u5217\u7ed3\u6784\u5982\u4e0b</li> </ol> <p></p> <ol> <li>\u6b64\u65f6\u6211\u4eec\u4ece\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\uff08\u53f6\u7ed3\u70b9\u81ea\u7136\u4e0d\u7528\u8c03\u6574\uff0c\u7b2c\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9arr.length/2-1 = 5/2-1 = 1\uff0c\u4e5f\u5c31\u662f\u4e0b\u9762\u7684 6 \u7ed3\u70b9\uff09\uff0c\u4ece\u5de6\u81f3\u53f3\uff0c\u4ece\u4e0b\u81f3\u4e0a\u8fdb\u884c\u8c03\u6574\u3002</li> </ol> <p></p> <ol> <li>\u627e\u5230\u7b2c\u4e8c\u4e2a\u975e\u53f6\u8282\u70b9 4\uff0c\u7531\u4e8e[4,9,8]\u4e2d 9 \u5143\u7d20\u6700\u5927\uff0c4 \u548c 9 \u4ea4\u6362\u3002</li> </ol> <p></p> <ol> <li>\u8fd9\u65f6\uff0c\u4ea4\u6362\u5bfc\u81f4\u4e86\u5b50\u6839[4,5,6]\u7ed3\u6784\u6df7\u4e71\uff0c\u7ee7\u7eed\u8c03\u6574\uff0c[4,5,6]\u4e2d 6 \u6700\u5927\uff0c\u4ea4\u6362 4 \u548c 6\u3002</li> </ol> <p></p> <p>\u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u5c06\u4e00\u4e2a\u65e0\u5e8f\u5e8f\u5217\u6784\u9020\u6210\u4e86\u4e00\u4e2a\u5927\u9876\u5806\u3002</p> <p>\u6b65\u9aa42\uff1a</p> <ol> <li>\u5c06\u5806\u9876\u5143\u7d20 9 \u548c\u672b\u5c3e\u5143\u7d20 4 \u8fdb\u884c\u4ea4\u6362</li> </ol> <p></p> <ol> <li>\u91cd\u65b0\u8c03\u6574\u7ed3\u6784\uff0c\u4f7f\u5176\u7ee7\u7eed\u6ee1\u8db3\u5806\u5b9a\u4e49</li> </ol> <p></p> <ol> <li>\u518d\u5c06\u5806\u9876\u5143\u7d20 8 \u4e0e\u672b\u5c3e\u5143\u7d20 5 \u8fdb\u884c\u4ea4\u6362\uff0c\u5f97\u5230\u7b2c\u4e8c\u5927\u5143\u7d20 8.</li> </ol> <p></p> <ol> <li>\u540e\u7eed\u8fc7\u7a0b\uff0c\u7ee7\u7eed\u8fdb\u884c\u8c03\u6574\uff0c\u4ea4\u6362\uff0c\u5982\u6b64\u53cd\u590d\u8fdb\u884c\uff0c\u6700\u7ec8\u4f7f\u5f97\u6574\u4e2a\u5e8f\u5217\u6709\u5e8f</li> </ol> <p></p> <p>\u518d\u7b80\u5355\u603b\u7ed3\u4e0b\u5806\u6392\u5e8f\u7684\u57fa\u672c\u601d\u8def\uff1a</p> <ol> <li>\u5c06\u65e0\u5e8f\u5e8f\u5217\u6784\u5efa\u6210\u4e00\u4e2a\u5806\uff0c\u6839\u636e\u5347\u5e8f\u964d\u5e8f\u9700\u6c42\u9009\u62e9\u5927\u9876\u5806\u6216\u5c0f\u9876\u5806;</li> <li>\u5c06\u5806\u9876\u5143\u7d20\u4e0e\u672b\u5c3e\u5143\u7d20\u4ea4\u6362\uff0c\u5c06\u6700\u5927\u5143\u7d20\"\u6c89\"\u5230\u6570\u7ec4\u672b\u7aef;</li> <li>\u91cd\u65b0\u8c03\u6574\u7ed3\u6784\uff0c\u4f7f\u5176\u6ee1\u8db3\u5806\u5b9a\u4e49\uff0c\u7136\u540e\u7ee7\u7eed\u4ea4\u6362\u5806\u9876\u5143\u7d20\u4e0e\u5f53\u524d\u672b\u5c3e\u5143\u7d20\uff0c\u53cd\u590d\u6267\u884c\u8c03\u6574+\u4ea4\u6362\u6b65\u9aa4\uff0c\u76f4\u5230\u6574\u4e2a\u5e8f\u5217\u6709\u5e8f\u3002</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1114","title":"11.1.4 \u5806\u6392\u5e8f\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>package tree;\n\n/**\n * \u5806\u6392\u5e8f\u7b97\u6cd5\n */\npublic class HeapSort {\n    public static void main(String[] args) {\n        // int[] arr = {4, 6, 8, 5, 9};\n        // sort(arr);\n        // System.out.println(Arrays.toString(arr));\n        int[] array = new int[8000000];\n        for (int i = 0; i &lt; array.length; i++) {\n            array[i] = (int) (Math.random() * 8000000);\n        }\n        long time1 = System.currentTimeMillis();\n        sort(array);\n        long time2 = System.currentTimeMillis();\n        System.out.println(\"\u5806\u6392\u5e8f\u6267\u884c\u7684\u65f6\u95f4\u4e3a\uff1a\" + (time2 - time1) + \"\u7eb3\u79d2\");\n    }\n\n    public static void sort(int[] arr) {\n        int temp;\n        for (int i = arr.length / 2 - 1; i &gt;= 0; i--) {\n            adjustHeap(arr, i, arr.length);\n        }\n\n        for (int i = arr.length - 1; i &gt; 0; i--) {\n            temp = arr[i];\n            arr[i] = arr[0];\n            arr[0] = temp;\n            adjustHeap(arr, 0, i);\n        }\n    }\n\n    /**\n     * \u529f\u80fd\uff1a\u5b8c\u6210\u5c06\u4ee5index\u5bf9\u5e94\u7684\u975e\u53f6\u5b50\u8282\u70b9\u7684\u6811\u8c03\u6574\u6210\u5927\u9876\u5806\n     * \u4e3e\u4f8b int arr[] = {4, 6, 8, 5, 9};  =&gt;  index = 1 =&gt; adjustHeap =&gt; \u5f97\u5230 {4, 9, 8, 5, 6}\n     * \u5982\u679c\u6211\u4eec\u518d\u6b21\u8c03\u7528 adjustHeap \u4f20\u5165\u7684\u662f i = 0 =&gt;  \u5f97\u5230 {4,  9,  8,  5,  6} =&gt; {9, 6, 8, 5, 4}\n     *\n     * @param arr \u5f85\u8c03\u6574\u7684\u6570\u7ec4\n     * @param index \u8868\u793a\u975e\u53f6\u5b50\u7ed3\u70b9\u5728\u6570\u7ec4\u4e2d\u7d22\u5f15\n     * @param length \u8868\u793a\u5bf9\u591a\u5c11\u4e2a\u5143\u7d20\u7ee7\u7eed\u8c03\u6574\uff0clength\u662f\u5728\u9010\u6e10\u7684\u51cf\u5c11\n     */\n    public static void adjustHeap(int[] arr, int index, int length) {\n        int temp = arr[index];  // \u5f53\u524d\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u7236\u8282\u70b9\n        //index * 2 + 1\u8868\u793a\u7684\u662f\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\n        for (int k = index * 2 + 1; k &lt; length; k = k * 2 + 1) {\n            // \u5982\u679c\u53f3\u5b50\u6811\u7684\u503c\u5927\u4e8e\u5de6\u5b50\u6811\u7684\u503c\uff0c\u5219\u8ba9\u5f53\u524d\u6307\u9488\u6307\u5411\u53f3\u5b50\u6811\n            if (k + 1 &lt; length &amp;&amp; arr[k] &lt; arr[k + 1]) {\n                k++;\n            }\n            // \u5982\u679c\u5b50\u8282\u70b9\u5927\u4e8e\u7236\u8282\u70b9\n            if (arr[k] &gt; temp) {\n                arr[index] = arr[k];    // \u628a\u8f83\u5927\u7684\u503c\u8d4b\u7ed9\u5f53\u524d\u8282\u70b9\n                index = k;  //\uff01\uff01\uff01index\u6307\u5411k\uff0c\u7ee7\u7eed\u5faa\u73af\u6bd4\u8f83\n            } else {\n                break;\n            }\n        }\n        //\u5f53for\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06\u4ee5index\u4e3a\u7236\u8282\u70b9\u7684\u6811\u7684\u6700\u5927\u503c\u653e\u5728\u4e86\u6700\u9876\u90e8\uff08\u5c40\u90e8\u7684\uff09\n        arr[index] = temp;\n    }\n}\n\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#112","title":"11.2 \u8d6b\u592b\u66fc\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1121","title":"11.2.1 \u57fa\u672c\u4ecb\u7ecd","text":"<ol> <li>\u7ed9\u5b9a n  \u4e2a\u6743\u503c\u4f5c\u4e3a  n  \u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u6784\u9020\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u82e5\u8be5\u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6(wpl)\u8fbe\u5230\u6700\u5c0f\uff0c\u79f0\u8fd9\u6837\u7684\u4e8c\u53c9\u6811\u4e3a\u6700\u4f18\u4e8c\u53c9\u6811\uff0c\u4e5f\u79f0\u4e3a\u54c8\u592b\u66fc\u6811(Huffman Tree),    \u8fd8\u6709\u7684\u4e66\u7ffb\u8bd1\u4e3a\u970d\u592b\u66fc\u6811\u3002</li> <li>\u8d6b\u592b\u66fc\u6811\u662f\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u6811\uff0c\u6743\u503c\u8f83\u5927\u7684\u7ed3\u70b9\u79bb\u6839\u8f83\u8fd1</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1122","title":"11.2.2 \u8d6b\u592b\u66fc\u6811\u51e0\u4e2a\u91cd\u8981\u6982\u5ff5\u548c\u4e3e\u4f8b\u8bf4\u660e","text":"<ol> <li>\u8def\u5f84\u548c\u8def\u5f84\u957f\u5ea6\uff1a\u5728\u4e00\u68f5\u6811\u4e2d\uff0c\u4ece\u4e00\u4e2a\u7ed3\u70b9\u5f80\u4e0b\u53ef\u4ee5\u8fbe\u5230\u7684\u5b69\u5b50\u6216\u5b59\u5b50\u7ed3\u70b9\u4e4b\u95f4\u7684\u901a\u8def\uff0c\u79f0\u4e3a\u8def\u5f84\u3002\u901a\u8def\u4e2d\u5206\u652f\u7684\u6570\u76ee\u79f0\u4e3a\u8def\u5f84\u957f\u5ea6\u3002\u82e5\u89c4\u5b9a\u6839\u7ed3\u70b9\u7684\u5c42\u6570\u4e3a  1\uff0c\u5219\u4ece\u6839\u7ed3\u70b9\u5230\u7b2c  L  \u5c42\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u4e3a L-1</li> <li>\u7ed3\u70b9\u7684\u6743\u53ca\u5e26\u6743\u8def\u5f84\u957f\u5ea6\uff1a\u82e5\u5c06\u6811\u4e2d\u7ed3\u70b9\u8d4b\u7ed9\u4e00\u4e2a\u6709\u7740\u67d0\u79cd\u542b\u4e49\u7684\u6570\u503c\uff0c\u5219\u8fd9\u4e2a\u6570\u503c\u79f0\u4e3a\u8be5\u7ed3\u70b9\u7684\u6743\u3002\u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u4e3a\uff1a\u4ece\u6839\u7ed3\u70b9\u5230\u8be5\u7ed3\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u4e0e\u8be5\u7ed3\u70b9\u7684\u6743\u7684\u4e58\u79ef</li> <li>\u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\uff1a\u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u89c4\u5b9a\u4e3a\u6240\u6709\u53f6\u5b50\u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\uff0c\u8bb0\u4e3a  WPL(weighted  path length) ,\u6743\u503c\u8d8a\u5927\u7684\u7ed3\u70b9\u79bb\u6839\u7ed3\u70b9\u8d8a\u8fd1\u7684\u4e8c\u53c9\u6811\u624d\u662f\u6700\u4f18\u4e8c\u53c9\u6811\u3002</li> <li>WPL \u6700\u5c0f\u7684\u5c31\u662f\u8d6b\u592b\u66fc\u6811</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1123","title":"11.2.3 \u8d6b\u592b\u66fc\u6811\u521b\u5efa\u601d\u8def\u56fe\u89e3","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217    {13,  7,  8,  3,  29,  6, 1}\uff0c\u8981\u6c42\u8f6c\u6210\u4e00\u9897\u8d6b\u592b\u66fc\u6811.</p> <p>\u6784\u6210\u8d6b\u592b\u66fc\u6811\u7684\u6b65\u9aa4\uff1a</p> <ol> <li>\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f, \u5c06\u6bcf\u4e00\u4e2a\u6570\u636e\uff0c\u6bcf\u4e2a\u6570\u636e\u90fd\u662f\u4e00\u4e2a\u8282\u70b9 \uff0c \u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u9897\u6700\u7b80\u5355\u7684\u4e8c\u53c9\u6811</li> <li>\u53d6\u51fa\u6839\u8282\u70b9\u6743\u503c\u6700\u5c0f\u7684\u4e24\u9897\u4e8c\u53c9\u6811</li> <li> <p>\u7ec4\u6210\u4e00\u9897\u65b0\u7684\u4e8c\u53c9\u6811,    \u8be5\u65b0\u7684\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u7684\u6743\u503c\u662f\u524d\u9762\u4e24\u9897\u4e8c\u53c9\u6811\u6839\u8282\u70b9\u6743\u503c\u7684\u548c</p> </li> <li> <p>\u518d\u5c06\u8fd9\u9897\u65b0\u7684\u4e8c\u53c9\u6811\uff0c\u4ee5\u6839\u8282\u70b9\u7684\u6743\u503c\u5927\u5c0f    \u518d\u6b21\u6392\u5e8f\uff0c\u4e0d\u65ad\u91cd\u590d 1-2-3-4    \u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u6570\u5217\u4e2d\uff0c\u6240\u6709\u7684\u6570\u636e\u90fd\u88ab\u5904\u7406\uff0c\u5c31\u5f97\u5230\u4e00\u9897\u8d6b\u592b\u66fc\u6811</p> </li> </ol> <p></p> <pre><code>package huffmantree;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class HuffmanTree {\n    public static void main(String[] args) {\n        int[] arr = {13, 7, 8, 3, 29, 6, 1};\n        Node tree = createHuffmanTree(arr);\n        tree.preOrder();\n    }\n\n    /**\n     * \u521b\u5efa\u8d6b\u592b\u66fc\u6811\n     *\n     * @param arr \u9700\u8981\u521b\u5efa\u4e3a\u8d6b\u592b\u66fc\u6811\u7684\u6570\u7ec4\n     * @return \u521b\u5efa\u597d\u540e\u8d6b\u592b\u66fc\u6811\u7684root\u8282\u70b9\n     */\n    public static Node createHuffmanTree(int[] arr) {\n        List&lt;Node&gt; nodes = new ArrayList&lt;Node&gt;();\n        for (int value : arr) {\n            nodes.add(new Node(value));\n        }\n\n        while (nodes.size() &gt; 1) {\n            // \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n            Collections.sort(nodes);\n\n            // \u53d6\u51fa\u6839\u8282\u70b9\u6743\u503c\u6700\u5c0f\u7684\u503c\n            Node leftNode = nodes.get(0);\n\n            // \u53d6\u51fa\u6839\u8282\u70b9\u6743\u503c\u7b2c\u4e8c\u5c0f\u7684\u503c\n            Node rightNode = nodes.get(1);\n\n            // \u6784\u5efa\u65b0\u7684\u4e8c\u53c9\u6811\n            Node parent = new Node(leftNode.value + rightNode.value);\n            parent.left = leftNode;\n            parent.right = rightNode;\n\n            // \u5220\u9664\u4eceList\u4e2d\u5220\u9664\u5904\u7406\u8fc7\u7684\u4e8c\u53c9\u6811\n            nodes.remove(leftNode);\n            nodes.remove(rightNode);\n\n            // \u5c06\u6839\u8282\u70b9\u52a0\u5165\u5230List\u4e2d\n            nodes.add(parent);\n        }\n\n        // \u8fd4\u56de\u8d6b\u592b\u66fc\u6811\u7684\u5934\n        return nodes.get(0);\n\n    }\n}\n\n/**\n * \u8282\u70b9\u7c7b\n * \u4e3a\u4e86\u8ba9Node\u5bf9\u8c61\u4f7f\u7528Collections\u96c6\u5408\u6392\u5e8f\n * \u9700\u8981\u5b9e\u73b0Comparable\u63a5\u53e3\n */\nclass Node implements Comparable&lt;Node&gt; {\n    int value;\n    Node left;\n    Node right;\n\n    /**\n     * \u524d\u5e8f\u904d\u5386\n     */\n    public void preOrder() {\n        System.out.println(this);\n        if (this.left != null) {\n            this.left.preOrder();\n        }\n        if (this.right != null) {\n            this.right.preOrder();\n        }\n    }\n\n    public Node(int value) {\n        this.value = value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Node{\" +\n                \"value=\" + value +\n                '}';\n    }\n\n    @Override\n    public int compareTo(Node o) {\n        return this.value - o.value;\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#113","title":"11.3 \u8d6b\u592b\u66fc\u7f16\u7801","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1131","title":"11.3.1 \u57fa\u672c\u4ecb\u7ecd","text":"<ol> <li>\u8d6b\u592b\u66fc\u7f16\u7801\u4e5f\u7ffb\u8bd1\u4e3a \u54c8\u592b\u66fc\u7f16\u7801(Huffman Coding)\uff0c\u53c8\u79f0\u970d\u592b\u66fc\u7f16\u7801\uff0c\u662f\u4e00\u79cd\u7f16\u7801\u65b9\u5f0f, \u5c5e\u4e8e\u4e00\u79cd\u7a0b\u5e8f\u7b97\u6cd5</li> <li>\u8d6b\u592b\u66fc\u7f16\u7801\u662f\u8d6b\u54c8\u592b\u66fc\u6811\u5728\u7535\u8baf\u901a\u4fe1\u4e2d\u7684\u7ecf\u5178\u7684\u5e94\u7528\u4e4b\u4e00\u3002</li> <li>\u8d6b\u592b\u66fc\u7f16\u7801\u5e7f\u6cdb\u5730\u7528\u4e8e\u6570\u636e\u6587\u4ef6\u538b\u7f29\u3002\u5176\u538b\u7f29\u7387\u901a\u5e38\u5728 20%\uff5e90%\u4e4b\u95f4</li> <li>\u8d6b\u592b\u66fc\u7801\u662f\u53ef\u53d8\u5b57\u957f\u7f16\u7801(VLC)\u7684\u4e00\u79cd\u3002Huffman  \u4e8e 1952  \u5e74\u63d0\u51fa\u4e00\u79cd\u7f16\u7801\u65b9\u6cd5\uff0c\u79f0\u4e4b\u4e3a\u6700\u4f73\u7f16\u7801</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1132","title":"11.3.2 \u539f\u7406\u5256\u6790","text":"<p>\u901a\u4fe1\u9886\u57df\u4e2d\u4fe1\u606f\u7684\u5904\u7406\u65b9\u5f0f  </p> <ol> <li>\u5b9a\u957f\u7f16\u7801</li> </ol> <p></p> <ol> <li>\u53d8\u957f\u7f16\u7801</li> </ol> <p></p> <ol> <li>\u8d6b\u592b\u66fc\u7f16\u7801</li> </ol> <p>\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <p>\u4f20\u8f93\u7684   \u5b57\u7b26\u4e32 1. i like like like java do you like a java 2. d:1  y:1  u:1  j:2  v:2  o:2  l:4  k:4  e:4  i:5  a:5   :9       //    \u5404\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684\u4e2a\u6570 3. \u6309\u7167\u4e0a\u9762\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u6784\u5efa\u4e00\u9897\u8d6b\u592b\u66fc\u6811\uff0c\u6b21\u6570\u4f5c\u4e3a\u6743\u503c</p> <p></p> <ol> <li>\u6839\u636e\u8d6b\u592b\u66fc\u6811\uff0c\u7ed9\u5404\u4e2a\u5b57\u7b26,\u89c4\u5b9a\u7f16\u7801   (\u524d\u7f00\u7f16\u7801)\uff0c\u5411\u5de6\u7684\u8def\u5f84\u4e3a  0   \u5411\u53f3\u7684\u8def\u5f84\u4e3a 1 \uff0c\u7f16\u7801\u5982\u4e0b:</li> </ol> <p></p> <ol> <li> <p>\u6309\u7167\u4e0a\u9762\u7684\u8d6b\u592b\u66fc\u7f16\u7801\uff0c\u6211\u4eec\u7684\"i like like like java do you like a java\" \u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u7f16\u7801\u4e3a(\u6ce8\uff1a\u610f\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7684\u65e0\u635f\u538b\u7f29)</p> </li> <li> <p>\u957f\u5ea6\u4e3a \uff1a 133    \u8bf4\u660e:    \u539f\u6765\u957f\u5ea6\u662f 359 ,   \u538b\u7f29\u4e86  (359-133) / 359 = 62.9%</p> </li> </ol> <p>\u6b64\u7f16\u7801\u6ee1\u8db3\u524d\u7f00\u7f16\u7801,   \u5373\u5b57\u7b26\u7684\u7f16\u7801\u90fd\u4e0d\u80fd\u662f\u5176\u4ed6\u5b57\u7b26\u7f16\u7801\u7684\u524d\u7f00\u3002\u4e0d\u4f1a\u9020\u6210\u5339\u914d\u7684\u591a\u4e49\u6027\u8d6b\u592b\u66fc\u7f16\u7801\u662f\u65e0\u635f\u5904\u7406\u65b9\u6848</p> <p>\u6ce8\u610f\uff1a\u8fd9\u4e2a\u8d6b\u592b\u66fc\u6811\u6839\u636e\u6392\u5e8f\u65b9\u6cd5\u4e0d\u540c\uff0c\u4e5f\u53ef\u80fd\u4e0d\u592a\u4e00\u6837\uff0c\u8fd9\u6837\u5bf9\u5e94\u7684\u8d6b\u592b\u66fc\u7f16\u7801\u4e5f\u4e0d\u5b8c\u5168\u4e00\u6837\uff0c\u4f46\u662f wpl \u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u6700\u5c0f\u7684, \u6700\u540e\u751f\u6210\u7684\u8d6b\u592b\u66fc\u7f16\u7801\u7684\u957f\u5ea6\u662f\u4e00\u6837\uff0c\u6bd4\u5982: \u5982\u679c\u6211\u4eec\u8ba9\u6bcf\u6b21\u751f\u6210\u7684\u65b0\u7684\u4e8c\u53c9\u6811\u603b\u662f\u6392\u5728\u6743\u503c\u76f8\u540c\u7684\u4e8c\u53c9\u6811\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5219\u751f\u6210\u7684\u4e8c\u53c9\u6811\u4e3a:</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1133-","title":"11.3.3 \u6700\u4f73\u5b9e\u8df5-\u6570\u636e\u538b\u7f29(\u521b\u5efa\u8d6b\u592b\u66fc\u6811)","text":"<p>\u5c06\u7ed9\u51fa\u7684\u4e00\u6bb5\u6587\u672c\uff0c\u6bd4\u5982    \"i  like  like  like  java  do  you  like  a  java\" \uff0c\u6839\u636e\u524d\u9762\u7684\u8bb2\u7684\u8d6b\u592b\u66fc\u7f16\u7801\u539f\u7406\uff0c\u5bf9\u5176\u8fdb\u884c\u6570\u636e\u538b\u7f29\u5904\u7406\uff0c\u5f62\u59821010100110111101111010011011110111101001101111011110100001100001110011001111000011001111000100100100110111101111011100100001100001110</p> <pre><code>package huffmancoding;\n\nimport java.io.*;\nimport java.util.*;\n\n/**\n * \u8d6b\u592b\u66fc\u7f16\u7801\n */\npublic class HuffmanCoding {\n    /**\n     * \u8d6b\u592b\u66fc\u7f16\u7801\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u8d6b\u592b\u66fc\u7f16\u7801\n     */\n    static Map&lt;Byte, String&gt; huffmanCodes = new HashMap&lt;&gt;();\n\n    public static void main(String[] args) {\n        // \u6d4b\u8bd5\u538b\u7f29\u6587\u4ef6\n        // String srcFile = \"data-structure//src//huffmancoding//\u65e0\u6807\u9898.png\";\n        // String destFile = \"data-structure//src//huffmancoding//destFile.zip\";\n        // zipFile(srcFile, destFile);\n        // System.out.println(\"\u538b\u7f29\u6587\u4ef6\u6210\u529f\");\n\n        //\u6d4b\u8bd5\u89e3\u538b\u6587\u4ef6\n        String zipFile = \"data-structure//src//huffmancoding//destFile.zip\";\n        String destFile = \"data-structure//src//huffmancoding//\u89e3\u538b\u540e\u7684.png\";\n        unZipFile(zipFile, destFile);\n        System.out.println(\"\u89e3\u538b\u5b8c\u6210\");\n\n        // String str = \"i like like like java do you like a java\";\n        // System.out.println(\"\u538b\u7f29\u524d\u957f\u5ea6\u4e3a\uff1a\" + str.length());\n\n        /*// \u6d4b\u8bd5\u7edf\u8ba1\u5b57\u7b26\u4e32\u4e2d\u5404\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\n        List&lt;Node&gt; charNumList = getCharNum(str.getBytes());\n        Collections.sort(charNumList);\n        System.out.println(\"charNumList = \" + charNumList);\n\n        Node tree = createHuffmanTree(str);\n        // \u6d4b\u8bd5\u521b\u5efa\u8d6b\u592b\u66fc\u6811\n        tree.preOrder();\n\n        // \u6d4b\u8bd5\u8d6b\u592b\u66fc\u6811\u8f6c\u6210\u7684\u8d6b\u592b\u66fc\u7f16\u7801\n        Map&lt;Byte, String&gt; huffmanCodes = getCodes(tree);\n        System.out.println(huffmanCodes);\n\n        // \u6d4b\u8bd5\u538b\u7f29\n        byte[] bytes = zip(str.getBytes(), huffmanCodes);\n        System.out.println(Arrays.toString(bytes));*/\n\n        // byte[] huffmanZipBytes = huffmanZip(str);\n        // System.out.println(\"\u538b\u7f29\u540e\u7684\u7ed3\u679c\uff1a\" + Arrays.toString(huffmanZipBytes));\n        // System.out.println(\"\u538b\u7f29\u540e\u957f\u5ea6\u4e3a\uff1a\" + huffmanZipBytes.length);\n        //\n        // // \u6d4b\u8bd5\u89e3\u538b\n        // // \u89e3\u7801\u8fc7\u540e\u7684\u5b57\u7b26\u4e32\n        // byte[] decode = decode(huffmanCodes, huffmanZipBytes);\n        // System.out.println(\"\u89e3\u7801\u8fc7\u540e\u7684\u5b57\u7b26\u4e32\uff1a\" + new String(decode));\n\n    }\n\n    /**\n     * \u5bf9huffmanZip\u91cd\u8f7d\n     *\n     * @param bytes \u4f20\u5165\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684byte[]\n     * @return \u8fd4\u56de\u538b\u7f29\u540e\u7684\u5bf9\u5e94\u7684byte[]\n     */\n    public static byte[] huffmanZip(byte[] bytes) {\n        // \u521b\u5efa\u5176\u5bf9\u5e94\u7684\u8d6b\u592b\u66fc\u6811\n        Node tree = createHuffmanTree(bytes);\n\n        // \u5f97\u5230\u8d6b\u592b\u66fc\u7f16\u7801\n        huffmanCodes = getCodes(tree);\n        return zip(bytes, huffmanCodes);\n    }\n\n    /**\n     * \u5c06\u5b57\u7b26\u4e32\u7528\u8d6b\u592b\u66fc\u7f16\u7801\u538b\u7f29\n     *\n     * @param str \u4f20\u5165\u5b57\u7b26\u4e32\n     * @return \u8fd4\u56de\u538b\u7f29\u540e\u7684\u5bf9\u5e94\u7684byte[]\n     */\n    public static byte[] huffmanZip(String str) {\n        // \u5f97\u5230str\u5bf9\u5e94\u7684byte[]\n        byte[] strBytes = str.getBytes();\n        // \u521b\u5efa\u5176\u5bf9\u5e94\u7684\u8d6b\u592b\u66fc\u6811\n        Node tree = createHuffmanTree(strBytes);\n\n        // \u5f97\u5230\u8d6b\u592b\u66fc\u7f16\u7801\n        huffmanCodes = getCodes(tree);\n        return zip(strBytes, huffmanCodes);\n    }\n\n    /**\n     * \u6784\u5efa\u8d6b\u592b\u66fc\u6811\n     *\n     * @param strBytes \u4f20\u5165\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684byte[]\n     * @return \u8fd4\u56de\u8d6b\u592b\u66fc\u6811\u7684\u6839\u8282\u70b9\n     */\n    public static Node createHuffmanTree(byte[] strBytes) {\n        // \u7edf\u8ba1\u5b57\u7b26\u4e32\u4e2d\u5404\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\n        List&lt;Node&gt; nodes = getCharNum(strBytes);\n        // \u6784\u5efa\u8d6b\u592b\u66fc\u6811\n        while (nodes.size() &gt; 1) {\n            Collections.sort(nodes);    // \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n            Node leftNode = nodes.get(0); // \u53d6\u51fa\u6700\u5c0f\u7684\u7ed3\u70b9\n            Node rightNode = nodes.get(1);    // \u53d6\u51fa\u7b2c\u4e8c\u5c0f\u7684\u7ed3\u70b9\n            // \u5c06\u4e24\u4e2a\u5b50\u8282\u70b9\u7684num\u76f8\u52a0\u7ec4\u6210\u65b0\u7684\u6839\u8282\u70b9\n            Node parent = new Node(null, leftNode.num + rightNode.num);\n            // \u8bbe\u7f6e\u6839\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\n            parent.left = leftNode;\n            parent.right = rightNode;\n\n            // \u628a\u4e24\u4e2a\u5b50\u8282\u70b9\u4ecenodes\u4e2d\u5220\u9664\n            nodes.remove(leftNode);\n            nodes.remove(rightNode);\n            // \u5c06parent\u52a0\u5165nodes\n            nodes.add(parent);\n        }\n        // \u8fd4\u56de\u8d6b\u592b\u66fc\u6811\u6839\u8282\u70b9\n        return nodes.get(0);\n    }\n\n    /**\n     * \u7edf\u8ba1\u5b57\u7b26\u4e32\u4e2d\u5404\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\n     *\n     * @param strBytes \u5b57\u7b26\u4e32\u5bf9\u5e94\u7684byte[]\n     */\n    public static List&lt;Node&gt; getCharNum(byte[] strBytes) {\n        List&lt;Node&gt; nodes = new ArrayList&lt;&gt;();\n        Map&lt;Byte, Integer&gt; map = new HashMap&lt;&gt;();   // \u7528map\u63a5\u6536[key\uff0cvalue], key = data, value = num\n\n        for (byte b : strBytes) {\n            // \u4ecemap\u4e2d\u83b7\u53d6\u8be5\u5b57\u7b26\u7684\u6b21\u6570\n            // \u5982\u679cmap\u4e2d\u6ca1\u6709\u8be5\u5b57\u7b26\uff0c\u5219\u65b0\u52a0\u4e00\u4e2a\n            map.merge(b, 1, Integer::sum);\n        }\n\n        // \u5c06map\u4e2d\u7684\u6570\u636e\u6dfb\u52a0\u5230nodes\u4e2d\n        for (Map.Entry&lt;Byte, Integer&gt; entry : map.entrySet()) {\n            nodes.add(new Node(entry.getKey(), entry.getValue()));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * \u91cd\u8f7dgetCodes\u65b9\u6cd5\n     *\n     * @param node \u4f20\u5165\u8d6b\u592b\u66fc\u6811\u6839\u7ed3\u70b9\n     * @return \u8fd4\u56de\u8d6b\u592b\u66fc\u7f16\u7801\n     */\n    public static Map&lt;Byte, String&gt; getCodes(Node node) {\n        if (node == null) {\n            return null;\n        }\n        getCodes(node, \"\", new StringBuilder());    // \u9012\u5f52\u83b7\u53d6\u8d6b\u592b\u66fc\u7f16\u7801\u8868\n        return huffmanCodes;\n    }\n\n    /**\n     * \u5c06\u8d6b\u592b\u66fc\u6811\u8f6c\u4e3a\u5bf9\u5e94\u7684\u8d6b\u592b\u66fc\u7f16\u7801\n     *\n     * @param node \u4f20\u5165\u8282\u70b9\n     * @param path \u8def\u5f84\uff1b\u5de6\u5b50\u7ed3\u70b9\u4e3a0\uff0c\u53f3\u5b50\u7ed3\u70b9\u4e3a1\n     * @param stringPath \u7528\u4e8e\u62fc\u63a5\u8def\u5f84\n     */\n    public static void getCodes(Node node, String path, StringBuilder stringPath) {\n        StringBuilder newStringPath = new StringBuilder(stringPath);\n        newStringPath.append(path);    // \u62fc\u63a5\u8def\u5f84\n        if (node.data == null) {    // data = null\u8bf4\u660e\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9\n            // \u5de6\u9012\u5f52\n            getCodes(node.left, \"0\", newStringPath);\n            // \u53f3\u9012\u5f52\n            getCodes(node.right, \"1\", newStringPath);\n        } else {\n            // \u8bf4\u660e\u662f\u53f6\u5b50\u7ed3\u70b9\n            // \u5c06\u62fc\u63a5\u597d\u7684\u8def\u5f84\u653e\u5165map\u4e2d\n            huffmanCodes.put(node.data, newStringPath.toString());\n        }\n    }\n\n    /**\n     * \u5c06\u8d6b\u592b\u66fc\u7f16\u7801\u8f6c\u6210\u5bf9\u5e94\u7684byte[]\n     *\n     * @param strBytes \u8981\u538b\u7f29\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684byte[]\n     * @param huffmanCodes \u8d6b\u592b\u66fc\u7f16\u7801\n     * @return \u8d6b\u592b\u66fc\u7f16\u7801\u8f6c\u6362\u540e\u7684byte[]\n     */\n    public static byte[] zip(byte[] strBytes, Map&lt;Byte, String&gt; huffmanCodes) {\n        StringBuilder stringBuilder = new StringBuilder();\n        for (byte strByte : strBytes) { // \u5c06bytes\u8f6c\u6210\u8d6b\u592b\u66fc\u7f16\u7801\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\n            stringBuilder.append(huffmanCodes.get(strByte));\n        }\n\n        // \u5c06\u5b57\u7b26\u4e32\u4ee5\u6bcf8\u4f4d\u8fdb\u884c\u5206\u5272\u7ec4\u6210byte[] huffmanCodeBytes\n        int length;\n        if (stringBuilder.length() % 8 == 0) {   // \u80fd\u88ab8\u6574\u9664\n            length = stringBuilder.length() / 8;\n        } else {\n            length = stringBuilder.length() / 8 + 1;\n        }\n\n        byte[] huffmanCodeBytes = new byte[length];\n        int index = 0;  // huffmanCodeBytes\u4e0b\u6807\n        for (int i = 0; i &lt; stringBuilder.length(); i += 8) {\n            String subString;   // \u5b58\u653e\u5206\u5272\u7684\u5b57\u7b26\u4e32\n            if (i + 8 &gt; stringBuilder.length()) {\n                subString = stringBuilder.substring(i);\n            } else {\n                subString = stringBuilder.substring(i, i + 8);\n            }\n            // \u5c06\u5206\u5272\u6210\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u518d\u8f6c\u6362\u6210\u5bf9\u5e94\u7684byte\n            huffmanCodeBytes[index] = (byte) Integer.parseInt(subString, 2);\n            index++;\n        }\n\n        return huffmanCodeBytes;\n    }\n\n    /**\n     * \u5bf9\u6570\u636e\u7684\u89e3\u538b\n     *\n     * @param huffmanCodes \u8d6b\u592b\u66fc\u7f16\u7801\u8868\n     * @param huffmanCodeBytes \u8d6b\u592b\u66fc\u7f16\u7801\u5f97\u5230\u7684\u5b57\u8282\u6570\u7ec4\n     * @return \u539f\u6765\u7684\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684byte[]\n     */\n    public static byte[] decode(Map&lt;Byte, String&gt; huffmanCodes, byte[] huffmanCodeBytes) {\n        // 1.\u5148\u5f97\u5230HuffmanBytes\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\n        StringBuilder sb = new StringBuilder();\n        // 2.\u5c06byte[] \u8f6c\u6210\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\n        for (int i = 0; i &lt; huffmanCodeBytes.length; i++) {\n            byte b = huffmanCodeBytes[i];\n            // \u5224\u65ad\u662f\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5219\u4e0d\u9700\u8981\u8865\u7801\n            boolean flag = (i == huffmanCodeBytes.length - 1);\n            sb.append(byteToBitString(b, !flag));\n        }\n        // \u628a\u5b57\u7b26\u4e32\u5b89\u88c5\u6307\u5b9a\u7684\u8d6b\u592b\u66fc\u7f16\u7801\u8fdb\u884c\u89e3\u7801\n        // \u628a\u8d6b\u592b\u66fc\u7f16\u7801\u8868\u8fdb\u884c\u8c03\u6362\uff0c\u8981\u53cd\u5411\u67e5\u8be2\n        Map&lt;String, Byte&gt; map = new HashMap&lt;&gt;();\n        for (Map.Entry&lt;Byte, String&gt; entry : huffmanCodes.entrySet()) {\n            map.put(entry.getValue(), entry.getKey());\n        }\n\n        List&lt;Byte&gt; list = new ArrayList&lt;&gt;();    // \u521b\u5efa\u4e00\u4e2a\u96c6\u5408\uff0c\u7528\u6765\u5b58\u653ebyte\n        StringBuilder key = new StringBuilder();    // \u7528\u6765\u62fc\u63a5\u5b57\u7b26\u4e32\n        for (int i = 0; i &lt; sb.length(); i++) {\n            key.append(sb.charAt(i));\n            Byte b = map.get(key.toString());\n            if (b != null) {  // \u5982\u679cmap\u4e2d\u6709\u6570\u636e\uff0c\u8bf4\u660e\u627e\u5230\u4e00\u4e2a\uff0c\u5c06\u5176\u5b58\u653e\u5230List\u4e2d\n                list.add(b);\n                key = new StringBuilder();  // \u5c06sb2\u7f6e\u7a7a\uff0c\u91cd\u65b0\u626b\u63cf\n            }\n        }\n        // \u5f53for\u5faa\u73af\u7ed3\u675f\u540e\uff0cList\u4e2d\u5c31\u5b58\u653e\u4e86\u6240\u6709\u7684\u5b57\u7b26\n        byte[] result = new byte[list.size()];\n        for (int i = 0; i &lt; result.length; i++) {\n            result[i] = list.get(i);\n        }\n        return result;\n\n    }\n\n    /**\n     * \u5c06\u4e00\u4e2abyte\u8f6c\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u5b57\u7b26\u4e32\n     *\n     * @param b \u4f20\u5165byte\n     * @param flag \u6807\u5fd7\u662f\u5426\u9700\u8981\u8865\u9ad8\u4f4d\uff0c\u5982\u679c\u662ftrue\uff0c\u5219\u9700\u8981\u8865\n     * @return \u8be5b\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff08\u8865\u7801\u8fd4\u56de\uff09\n     */\n    public static String byteToBitString(byte b, boolean flag) {\n        int temp = b;    // \u5c06b\u8f6c\u6210int\n        if (flag) { // \u5982\u679c\u4e3atrue\u5219\u9700\u8981\u8865\u7801\n            temp |= 256;\n        }\n        String str = Integer.toBinaryString(temp);  // \u5c06int\u7684temp\u8f6c\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\n        if (flag || temp &lt; 0) { // \u5982\u679c\u662f\u9700\u8981\u8865\u4f4d\u6216\u8005\u8f93\u5165\u7684\u6570\u5c0f\u4e8e\u96f6\n            return str.substring(str.length() - 8);\n        } else {\n            return str;\n        }\n\n    }\n\n    /**\n     * \u5c06\u6587\u4ef6\u8fdb\u884c\u538b\u7f29\n     *\n     * @param srcFile \u76ee\u6807\u6587\u4ef6\u5730\u5740\n     * @param destFile \u538b\u7f29\u540e\u7684\u6587\u4ef6\u5730\u5740\n     */\n    public static void zipFile(String srcFile, String destFile) {\n        // \u521b\u5efa\u6587\u4ef6\u8f93\u5165\u6d41\n        FileInputStream is = null;\n        // \u521b\u5efa\u6587\u4ef6\u8f93\u51fa\u6d41\n        FileOutputStream os = null;\n        // \u521b\u5efa\u6587\u4ef6\u8f93\u51fa\u6d41\u5bf9\u5e94\u7684ObjectOutputStream\n        ObjectOutputStream oos = null;\n        try {\n            is = new FileInputStream(srcFile);\n            byte[] b = new byte[is.available()];    // \u521b\u5efabyte[]\uff0c\u957f\u5ea6\u4e3a\u6587\u4ef6\u5927\u5c0f\n            // \u8bfb\u53d6\u6587\u4ef6\n            is.read(b);\n            byte[] huffmanZipBytes = huffmanZip(b); // \u76f4\u63a5\u5c06byte[] \u538b\u7f29\n            os = new FileOutputStream(destFile);\n            oos = new ObjectOutputStream(os);\n            oos.write(huffmanZipBytes);    // \u5c06\u8d6b\u592b\u66fc\u7f16\u7801\u540e\u7684\u5b57\u8282\u6570\u7ec4\u5199\u5165\u538b\u7f29\u6587\u4ef6\n\n            // \u4ee5\u5bf9\u8c61\u6d41\u7684\u65b9\u5f0f\u5199\u5165\u8d6b\u592b\u66fc\u7f16\u7801\uff0c\u662f\u4e3a\u4e86\u4ee5\u540e\u53ef\u4ee5\u6062\u590d\u6e90\u6587\u4ef6\n            // \u6ce8\u610f\u4e00\u5b9a\u8981\u628a\u8d6b\u592b\u66fc\u7f16\u7801\u5199\u5165\u538b\u7f29\u6587\u4ef6\n            oos.writeObject(huffmanCodes);\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            try {\n                is.close();\n                os.close();\n                oos.close();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    /**\n     * \u89e3\u538b\u6587\u4ef6\n     *\n     * @param zipFile \u89e3\u538b\u7684\u6587\u4ef6\n     * @param destFile \u5c06\u6587\u4ef6\u89e3\u538b\u5230\u7684\u8def\u5f84\n     */\n    public static void unZipFile(String zipFile, String destFile) {\n        // \u5b9a\u4e49\u6587\u4ef6\u8f93\u5165\u6d41\n        InputStream is = null;\n        // \u5b9a\u4e49\u5bf9\u8c61\u8f93\u5165\u6d41\n        ObjectInputStream ois = null;\n        // \u6587\u4ef6\u8f93\u51fa\u6d41\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(zipFile);\n            // \u521b\u5efa\u5bf9\u8c61\u8f93\u5165\u6d41\n            ois = new ObjectInputStream(is);\n            // \u8bfb\u53d6byte[]\n            byte[] huffmanBytes = (byte[]) ois.readObject();\n            Map&lt;Byte, String&gt; codes = (Map&lt;Byte, String&gt;) ois.readObject();\n\n            // \u89e3\u7801\n            byte[] decodeBytes = decode(codes, huffmanBytes);\n            // \u5c06bytes \u5199\u5165\u5230\u76ee\u6807\u6587\u4ef6\n            os = new FileOutputStream(destFile);\n            // \u5199\u51fa\u6570\u636e\u5230\u6587\u4ef6\u4e2d\n            os.write(decodeBytes);\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }finally {\n            try {\n                os.close();\n                ois.close();\n                is.close();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n\n        }\n    }\n}\n\n/**\n * \u7ed3\u70b9\u7c7b\n * \u8981\u5b9e\u73b0Comparable\u63a5\u53e3\n */\nclass Node implements Comparable&lt;Node&gt; {\n    /**\n     * \u4ee3\u8868\u7684\u5b57\u7b26\n     */\n    Byte data;\n    /**\n     * \u4ee3\u8868\u5b57\u7b26\u7684\u4e2a\u6570\n     */\n    int num;\n    /**\n     * \u5de6\u5b50\u8282\u70b9\n     */\n    Node left;\n    /**\n     * \u53f3\u5b50\u8282\u70b9\n     */\n    Node right;\n\n    /**\n     * \u524d\u5e8f\u904d\u5386\n     */\n    public void preOrder() {\n        System.out.println(this);\n        if (this.left != null) {\n            this.left.preOrder();\n        }\n        if (this.right != null) {\n            this.right.preOrder();\n        }\n    }\n\n    public Node(Byte data, int num) {\n        this.data = data;\n        this.num = num;\n    }\n\n    @Override\n    public String toString() {\n        return \"Node{\" +\n                \"data=\" + data +\n                \", num=\" + num +\n                '}';\n    }\n\n    @Override\n    public int compareTo(Node o) {\n        return this.num - o.num;\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1134-","title":"11.3.4 \u6700\u4f73\u5b9e\u8df5-\u6587\u4ef6\u538b\u7f29","text":"<p>\u601d\u8def\uff1a\u8bfb\u53d6\u6587\u4ef6-&gt;   \u5f97\u5230\u8d6b\u592b\u66fc\u7f16\u7801\u8868   -&gt;    \u5b8c\u6210\u538b\u7f29</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1135-","title":"11.3.5 \u6700\u4f73\u5b9e\u8df5-\u6587\u4ef6\u89e3\u538b(\u6587\u4ef6\u6062\u590d)","text":"<p>\u601d\u8def\uff1a\u8bfb\u53d6\u538b\u7f29\u6587\u4ef6(\u6570\u636e\u548c\u8d6b\u592b\u66fc\u7f16\u7801\u8868)-&gt;    \u5b8c\u6210\u89e3\u538b(\u6587\u4ef6\u6062\u590d)</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1136","title":"11.3.6 \u8d6b\u592b\u66fc\u7f16\u7801\u538b\u7f29\u6587\u4ef6\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u5982\u679c\u6587\u4ef6\u672c\u8eab\u5c31\u662f\u7ecf\u8fc7\u538b\u7f29\u5904\u7406\u7684\uff0c\u90a3\u4e48\u4f7f\u7528\u8d6b\u592b\u66fc\u7f16\u7801\u518d\u538b\u7f29\u6548\u7387\u4e0d\u4f1a\u6709\u660e\u663e\u53d8\u5316,    \u6bd4\u5982\u89c6\u9891,ppt    \u7b49\u7b49\u6587\u4ef6     [\u4e3e\u4f8b\u538b\u4e00\u4e2a   .ppt]</li> <li>\u8d6b\u592b\u66fc\u7f16\u7801\u662f\u6309\u5b57\u8282\u6765\u5904\u7406\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u5904\u7406\u6240\u6709\u7684\u6587\u4ef6(\u4e8c\u8fdb\u5236\u6587\u4ef6\u3001\u6587\u672c\u6587\u4ef6) [\u4e3e\u4f8b\u538b\u4e00\u4e2a.xml  \u6587\u4ef6]</li> <li>\u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\uff0c\u91cd\u590d\u7684\u6570\u636e\u4e0d\u591a\uff0c\u538b\u7f29\u6548\u679c\u4e5f\u4e0d\u4f1a\u5f88\u660e\u663e.</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#114","title":"11.4 \u4e8c\u53c9\u6392\u5e8f\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1141","title":"11.4.1 \u5148\u770b\u4e00\u4e2a\u9700\u6c42","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217    (7,  3, 10,  12,  5,  1, 9)\uff0c\u8981\u6c42\u80fd\u591f\u9ad8\u6548\u7684\u5b8c\u6210\u5bf9\u6570\u636e\u7684\u67e5\u8be2\u548c\u6dfb\u52a0</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1142","title":"11.4.2 \u89e3\u51b3\u65b9\u6848\u5206\u6790","text":"<ul> <li>\u4f7f\u7528\u6570\u7ec4</li> </ul> <p>\u6570\u7ec4\u672a\u6392\u5e8f\uff0c\u4f18\u70b9\uff1a\u76f4\u63a5\u5728\u6570\u7ec4\u5c3e\u6dfb\u52a0\uff0c\u901f\u5ea6\u5feb\u3002\u7f3a\u70b9\uff1a\u67e5\u627e\u901f\u5ea6\u6162</p> <p>\u6570\u7ec4\u6392\u5e8f\uff0c\u4f18\u70b9\uff1a\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u67e5\u627e\u901f\u5ea6\u5feb\uff0c\u7f3a\u70b9\uff1a\u4e3a\u4e86\u4fdd\u8bc1\u6570\u7ec4\u6709\u5e8f\uff0c\u5728\u6dfb\u52a0\u65b0\u6570\u636e\u65f6\uff0c\u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u540e\uff0c\u540e\u9762\u7684\u6570\u636e\u9700\u6574\u4f53\u79fb\u52a8\uff0c\u901f\u5ea6\u6162</p> <ul> <li>\u4f7f\u7528\u94fe\u5f0f\u5b58\u50a8-\u94fe\u8868</li> </ul> <p>\u4e0d\u7ba1\u94fe\u8868\u662f\u5426\u6709\u5e8f\uff0c\u67e5\u627e\u901f\u5ea6\u90fd\u6162\uff0c\u6dfb\u52a0\u6570\u636e\u901f\u5ea6\u6bd4\u6570\u7ec4\u5feb\uff0c\u4e0d\u9700\u8981\u6570\u636e\u6574\u4f53\u79fb\u52a8\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1143","title":"11.4.3 \u4e8c\u53c9\u6392\u5e8f\u6811\u4ecb\u7ecd","text":"<p>\u4e8c\u53c9\u6392\u5e8f\u6811\uff1aBST: (Binary  Sort(Search) Tree),    \u5bf9\u4e8e\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u4efb\u4f55\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u8981\u6c42\u5de6\u5b50\u8282\u70b9\u7684\u503c\u6bd4\u5f53\u524d\u8282\u70b9\u7684\u503c\u5c0f\uff0c\u53f3\u5b50\u8282\u70b9\u7684\u503c\u6bd4\u5f53\u524d\u8282\u70b9\u7684\u503c\u5927\u3002 \u7279\u522b\u8bf4\u660e\uff1a\u5982\u679c\u6709\u76f8\u540c\u7684\u503c\uff0c\u53ef\u4ee5\u5c06\u8be5\u8282\u70b9\u653e\u5728\u5de6\u5b50\u8282\u70b9\u6216\u53f3\u5b50\u8282\u70b9</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1144","title":"11.4.4 \u4e8c\u53c9\u6392\u5e8f\u6811\u521b\u5efa\u548c\u904d\u5386","text":"<p>\u4e00\u4e2a\u6570\u7ec4\u521b\u5efa\u6210\u5bf9\u5e94\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u5e76\u4f7f\u7528\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u6bd4\u5982:   \u6570\u7ec4\u4e3a   Array(7, 3,10,12,5,1,9)\uff0c\u521b\u5efa\u6210\u5bf9\u5e94\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u4e3a:</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1145","title":"11.4.5 \u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5220\u9664","text":"<p>\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5220\u9664\u60c5\u51b5\u6bd4\u8f83\u590d\u6742\uff0c\u6709\u4e0b\u9762\u4e09\u79cd\u60c5\u51b5\u9700\u8981\u8003\u8651</p> <ol> <li>\u5220\u9664\u53f6\u5b50\u8282\u70b9   (\u6bd4\u5982\uff1a2,  5,  9,  12)</li> <li>\u5220\u9664\u53ea\u6709\u4e00\u9897\u5b50\u6811\u7684\u8282\u70b9    (\u6bd4\u5982\uff1a1)</li> <li>\u5220\u9664\u6709\u4e24\u9897\u5b50\u6811\u7684\u8282\u70b9.  (\u6bd4\u5982\uff1a7,  3\uff0c10  )</li> <li>\u64cd\u4f5c\u7684\u601d\u8def\u5206\u6790</li> </ol> <p></p> <pre><code>//\u5bf9\u5220\u9664\u7ed3\u70b9\u7684\u5404\u79cd\u60c5\u51b5\u7684\u601d\u8def\u5206\u6790:\n\u7b2c\u4e00\u79cd\u60c5\u51b5:\n\u5220\u9664\u53f6\u5b50\u8282\u70b9 (\u6bd4\u5982\uff1a2,  5,  9,  12) \n\u601d\u8def\n(1) \u9700\u6c42\u5148\u53bb\u627e\u5230\u8981\u5220\u9664\u7684\u7ed3\u70b9 targetNode\n(2) \u627e\u5230 targetNode \u7684 \u7236\u7ed3\u70b9 parent\n(3) \u786e\u5b9a targetNode \u662f parent \u7684\u5de6\u5b50\u7ed3\u70b9 \u8fd8\u662f\u53f3\u5b50\u7ed3\u70b9\n(4) \u6839\u636e\u524d\u9762\u7684\u60c5\u51b5\u6765\u5bf9\u5e94\u5220\u9664 \n    \u5de6\u5b50\u7ed3\u70b9 parent.left  = null \n    \u53f3\u5b50\u7ed3\u70b9 parent.right  =  null;\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5: \u5220\u9664\u53ea\u6709\u4e00\u9897\u5b50\u6811\u7684\u8282\u70b9\uff0c\u6bd4\u5982 1 \n\u601d\u8def\n(1) \u9700\u6c42\u5148\u53bb\u627e\u5230\u8981\u5220\u9664\u7684\u7ed3\u70b9targetNode\n(2) \u627e\u5230 targetNode \u7684\u7236\u7ed3\u70b9 parent\n(3) \u786e\u5b9a targetNode \u7684\u5b50\u7ed3\u70b9\u662f\u5de6\u5b50\u7ed3\u70b9\u8fd8\u662f\u53f3\u5b50\u7ed3\u70b9\n(4) targetNode \u662f parent \u7684\u5de6\u5b50\u7ed3\u70b9\u8fd8\u662f\u53f3\u5b50\u7ed3\u70b9\n(5) \u5982\u679c targetNode \u6709\u5de6\u5b50\u7ed3\u70b9\n5.1 \u5982\u679c targetNode \u662f parent \u7684\u5de6\u5b50\u7ed3\u70b9\n    parent.left  = targetNode.left;\n5.2 \u5982\u679c targetNode \u662f parent \u7684\u53f3\u5b50\u7ed3\u70b9\n    parent.right = targetNode.left;\n(6) \u5982\u679c targetNode \u6709\u53f3\u5b50\u7ed3\u70b9\n6.1 \u5982\u679c targetNode \u662f parent \u7684\u5de6\u5b50\u7ed3\u70b9\n    parent.left = targetNode.right;\n6.2 \u5982\u679c targetNode \u662f parent \u7684\u53f3\u5b50\u7ed3\u70b9\n    parent.right  =  targetNode.right\n\n\u60c5\u51b5\u4e09\uff1a\u5220\u9664\u6709\u4e24\u9897\u5b50\u6811\u7684\u8282\u70b9. (\u6bd4\u5982\uff1a7,  3\uff0c10  ) \n\u601d\u8def\n(1) \u9700\u6c42\u5148\u53bb\u627e\u5230\u8981\u5220\u9664\u7684\u7ed3\u70b9 targetNode\n(2) \u627e\u5230  targetNode \u7684\u7236\u7ed3\u70b9    parent\n(3) \u4ece targetNode \u7684\u53f3\u5b50\u6811\u627e\u5230\u6700\u5c0f\u7684\u7ed3\u70b9\n(4) \u7528\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff0c\u5c06\u6700\u5c0f\u7ed3\u70b9\u7684\u503c\u4fdd\u5b58 temp = 11\n(5) \u5220\u9664\u8be5\u6700\u5c0f\u7ed3\u70b9\n(6) targetNode.value = temp\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1146","title":"11.4.6 \u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>package binarysorttree;\n\n/**\n * \u4e8c\u53c9\u6392\u5e8f\u6811\u6a21\u5757\n */\npublic class BinarySortTreeDemo {\n    public static void main(String[] args) {\n        int[] arr = {7, 3, 10, 12, 5, 1, 9, 2};\n        BinarySortTree tree = new BinarySortTree();\n        // \u5faa\u73af\u6dfb\u52a0\u7ed3\u70b9\u5230\u4e8c\u53c9\u6392\u5e8f\u6811\n        for (int item : arr) {\n            tree.add(new Node(item));\n        }\n        // \u4e2d\u5e8f\u904d\u5386\uff0c\u6d4b\u8bd5\u4e8c\u53c9\u6392\u5e8f\u6811\n        System.out.println(\"\u5220\u9664\u524d\");\n        tree.infixOrder();\n\n        // \u6d4b\u8bd5\u5220\u9664\u53f6\u5b50\u7ed3\u70b9\n        // tree.deleteNode(2);\n        // tree.deleteNode(5);\n        // tree.deleteNode(9);\n        // System.out.println(\"\u5220\u9664\u53f6\u5b50\u7ed3\u70b9\u540e\");\n        // tree.infixOrder();\n\n        // \u6d4b\u8bd5\u5220\u9664\u53ea\u6709\u4e00\u4e2a\u5b50\u7ed3\u70b9\u7684\u7ed3\u70b9\n        // tree.deleteNode(1);\n        // System.out.println(\"\u5220\u9664\u53ea\u6709\u4e00\u4e2a\u5b50\u7ed3\u70b9\u7684\u7ed3\u70b9\u540e\");\n        // tree.infixOrder();\n\n        // \u6d4b\u8bd5\u5220\u9664\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u8282\u70b9\n        // tree.deleteNode(10);\n        // System.out.println(\"\u5220\u9664\u6709\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7684\u7ed3\u70b9\u540e\");\n        // tree.infixOrder();\n\n        tree.deleteNode(2);\n        tree.deleteNode(5);\n        tree.deleteNode(9);\n        tree.deleteNode(12);\n        tree.deleteNode(7);\n        tree.deleteNode(3);\n        tree.deleteNode(10);\n        tree.deleteNode(1);\n        tree.infixOrder();\n    }\n}\n\n/**\n * \u4e8c\u53c9\u6392\u5e8f\u6811\n */\nclass BinarySortTree {\n    /**\n     * \u4e8c\u53c9\u6392\u5e8f\u6811\u6839\u8282\u70b9\n     */\n    private Node root;\n\n    /**\n     * \u67e5\u627e\u76ee\u6807\u7ed3\u70b9\n     *\n     * @param value \u4f20\u5165\u503c\n     * @return \u627e\u5230\u8fd4\u56de\uff0c\u6ca1\u627e\u5230\u8fd4\u56denull\n     */\n    public Node searchNode(int value) {\n        if (root == null) {\n            return null;\n        } else {\n            return root.searchNode(value);\n        }\n    }\n\n    /**\n     * \u67e5\u627e\u76ee\u6807\u7ed3\u70b9\u7684\u7236\u8282\u70b9\n     *\n     * @param value \u4f20\u5165value\n     * @return \u627e\u5230\u5219\u8fd4\u56de\uff0c\u6ca1\u627e\u5230\u5219\u8fd4\u56denull\n     */\n    public Node searchParentNode(int value) {\n        if (root == null) {\n            return null;\n        } else {\n            return root.searchParentNode(value);\n        }\n    }\n\n    /**\n     * \u5220\u9664\u7ed3\u70b9\n     *\n     * @param value \u8981\u5220\u9664\u7ed3\u70b9\u7684value\n     */\n    public void deleteNode(int value) {\n        if (root == null) {\n            return;\n        }\n        if (root.left == null &amp;&amp; root.right == null) {  // \u53ea\u6709root\u8282\u70b9\n            if (root.value == value) {\n                root = null;\n                return;\n            }\n        }\n        // \u67e5\u627e\u76ee\u6807\u7ed3\u70b9\n        Node targetNode = searchNode(value);\n        if (targetNode == null) {   // \u6ca1\u627e\u5230\u76ee\u6807\u7ed3\u70b9\n            System.out.println(\"\u6ca1\u6709\u627e\u5230\u76ee\u6807\u7ed3\u70b9\");\n            return;\n        }\n        // \u67e5\u627e\u76ee\u6807\u7ed3\u70b9\u7684\u7236\u8282\u70b9\n        Node parentNode = searchParentNode(value);\n        if (targetNode.left == null &amp;&amp; targetNode.right == null) {  // \u662f\u53f6\u5b50\u7ed3\u70b9\n            // \u5224\u65ad\u76ee\u6807\u7ed3\u70b9\u5728\u7236\u8282\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\u8fd8\u662f\u53f3\u5b50\u7ed3\u70b9\n            if (parentNode.left != null &amp;&amp; parentNode.left == targetNode) {    // \u662f\u5de6\u5b50\u7ed3\u70b9\n                parentNode.left = null;\n            } else if (parentNode.right != null &amp;&amp; parentNode.right == targetNode) { // \u662f\u53f3\u5b50\u7ed3\u70b9\n                parentNode.right = null;\n            }\n        } else if (targetNode.left != null &amp;&amp; targetNode.right != null) { // \u8981\u5220\u9664\u7684\u662f\u6709\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7684\u6839\u8282\u70b9\n            // \u627e\u5230\u76ee\u6807\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u7ed3\u70b9\u5e76\u66ff\u6362\u76ee\u6807\u7ed3\u70b9\u7684value\n            targetNode.value = deleteRightTreeMin(targetNode);  // \u5df2\u7ecf\u5220\u9664\u6700\u5c0f\u7ed3\u70b9\n        } else { // \u662f\u53ea\u6709\u4e00\u4e2a\u5b50\u7ed3\u70b9\u7684\u6839\u8282\u70b9\n            if (targetNode.left != null) {  // \u76ee\u6807\u7ed3\u70b9\u6709\u5de6\u5b50\u7ed3\u70b9\n                if (parentNode != null) {\n                    // \u76ee\u6807\u7ed3\u70b9\u662f\u7236\u8282\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\n                    if (parentNode.left != null &amp;&amp; parentNode.left.value == targetNode.value) {\n                        parentNode.left = targetNode.left;\n                    } else { // \u76ee\u6807\u7ed3\u70b9\u662f\u7236\u8282\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\n                        parentNode.right = targetNode.left;\n                    }\n                } else {\n                    root = targetNode.left;\n                }\n            } else { // \u76ee\u6807\u7ed3\u70b9\u6709\u53f3\u5b50\u7ed3\u70b9\n                if (parentNode != null) {\n                    // \u76ee\u6807\u7ed3\u70b9\u662f\u7236\u8282\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\n                    if (parentNode.left != null &amp;&amp; parentNode.left.value == targetNode.value) {\n                        parentNode.left = targetNode.right;\n                    } else { // \u76ee\u6807\u7ed3\u70b9\u662f\u7236\u8282\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\n                        parentNode.right = targetNode.right;\n                    }\n                }else {\n                    root = targetNode.right;\n                }\n            }\n        }\n    }\n\n    /**\n     * \u5220\u9664\u6839\u8282\u70b9\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u7ed3\u70b9\n     *\n     * @param node \u4f20\u5165\u6839\u8282\u70b9\n     * @return \u8fd4\u56de\u4ee5node\u4e3a\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u7ed3\u70b9\u7684\u503c\n     */\n    public int deleteRightTreeMin(Node node) {\n        Node tempNode = node.right; // \u641c\u7d22\u6700\u5c0f\u7ed3\u70b9\n        Node parentNode = node; // \u6700\u5c0f\u7ed3\u70b9\u7684\u7236\u8282\u70b9\n        // \u627e\u5230\u6700\u5c0f\u7ed3\u70b9\uff0c\u8ddf\u6700\u5c0f\u7ed3\u70b9\u7684\u7236\u8282\u70b9\n        // \u4e0d\u7ba1\u662f\u5426\u6709\u53f3\u5b50\u7ed3\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u5de6\u5b50\u7ed3\u70b9\uff0c\u5219\u8be5\u7ed3\u70b9\u5fc5\u7136\u6700\u5c0f\n        while (tempNode.left != null) {\n            parentNode = tempNode;\n            tempNode = tempNode.left;\n        }\n        // \u5224\u65adwhile\u5faa\u73af\u6709\u6ca1\u6709\u8fdb\u884c\n        if (parentNode.value != node.value) {\n            parentNode.left = null;\n        } else { // while\u5faa\u73af\u6ca1\u8fdb\u884c\uff0c\u8bf4\u660enode\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u53f3\u5b50\u7ed3\u70b9\n            parentNode.right = null;    // \u5c06\u53f3\u5b50\u7ed3\u70b9\u5220\u9664\n        }\n        return tempNode.value;\n    }\n\n    /**\n     * \u6dfb\u52a0\u7ed3\u70b9\n     *\n     * @param node \u4f20\u5165\u7ed3\u70b9\n     */\n    public void add(Node node) {\n        if (root == null) {\n            root = node;\n        } else {\n            root.add(node);\n        }\n    }\n\n    /**\n     * \u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6392\u5e8f\u6811\n     */\n    public void infixOrder() {\n        if (root == null) {\n            throw new RuntimeException(\"\u6839\u8282\u70b9\u4e3a\u7a7a\");\n        }\n        root.infixOrder();\n    }\n}\n\n/**\n * \u7ed3\u70b9\u7c7b\n */\nclass Node {\n    /**\n     * \u503c\n     */\n    int value;\n    /**\n     * \u5de6\u5b50\u8282\u70b9\n     */\n    Node left;\n    /**\n     * \u53f3\u5b50\u8282\u70b9\n     */\n    Node right;\n\n    public Node(int value) {\n        this.value = value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Node{\" +\n                \"value=\" + value +\n                '}';\n    }\n\n    /**\n     * \u6dfb\u52a0\u7ed3\u70b9\uff0c\u6ee1\u8db3\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u8981\u6c42\n     *\n     * @param node \u4f20\u5165\u7ed3\u70b9\n     */\n    public void add(Node node) {\n        if (node == null) {\n            throw new RuntimeException(\"\u7ed3\u70b9\u4e3a\u7a7a\");\n        }\n        if (node.value &lt;= this.value) { // \u4f20\u5165\u7ed3\u70b9\u7684value\u5c0f\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684value\n            if (this.left == null) {    // \u5982\u679c\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\u4e3anull\n                this.left = node;   // \u5c06\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9 = \u4f20\u5165\u7684\u7ed3\u70b9\n            } else {    // \u5982\u679c\u4e0d\u4e3a\u7a7a\u5219\u7ee7\u7eed\u5411\u5de6\u5b50\u7ed3\u70b9\u9012\u5f52\u6bd4\u8f83\u6dfb\u52a0\n                this.left.add(node);\n            }\n        } else { // \u4f20\u5165\u7ed3\u70b9\u7684value\u5927\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684value\n            if (this.right == null) {\n                this.right = node;\n            } else {\n                this.right.add(node);\n            }\n        }\n    }\n\n    /**\n     * \u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u6392\u5e8f\u6811\n     */\n    public void infixOrder() {\n        if (this.left != null) {\n            this.left.infixOrder();\n        }\n        System.out.println(this);\n        if (this.right != null) {\n            this.right.infixOrder();\n        }\n    }\n\n    /**\n     * \u67e5\u627e\u7ed3\u70b9\n     *\n     * @param value \u4f20\u5165\u8981\u5220\u9664\u7ed3\u70b9\u7684value\n     * @return \u627e\u5230\u8fd4\u56de\u8be5\u7ed3\u70b9\uff0c\u6ca1\u627e\u5230\u8fd4\u56denull\n     */\n    public Node searchNode(int value) {\n        if (this.value == value) {  // \u5982\u679c\u8be5\u7ed3\u70b9\u7b49\u4e8e\u8981\u627e\u7684value\n            return this;    // \u8fd4\u56de\u8be5\u8282\u70b9\n        } else if (this.value &lt; value) {  // \u5982\u679c\u53f3\u5b50\u7ed3\u70b9\u7684\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u8be5\u8282\u70b9\u7684value\u5c0f\u4e8evalue\n            if (this.right == null) {   // \u5982\u679c\u6ca1\u6709\u53f3\u5b50\u7ed3\u70b9\n                return null;    // \u8fd4\u56denull\uff0c\u6ca1\u627e\u5230\n            }\n            return this.right.searchNode(value);\n        } else {\n            if (this.left == null) {\n                return null;\n            }\n            return this.left.searchNode(value);\n        }\n    }\n\n    /**\n     * \u67e5\u627e\u76ee\u6807\u7ed3\u70b9\u7684\u7236\u8282\u70b9\n     *\n     * @param value \u76ee\u6807\u7ed3\u70b9\u7684value\n     * @return \u627e\u5230\u8fd4\u56de\uff0c\u6ca1\u627e\u5230\u8fd4\u56denull\n     */\n    public Node searchParentNode(int value) {\n        boolean flag1 = this.left != null &amp;&amp; this.left.value == value;\n        boolean flag2 = this.right != null &amp;&amp; this.right.value == value;\n        if (flag1 || flag2) {    // \u5982\u679c\u8be5\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5219\u8fd4\u56de\u8be5\u8282\u70b9\n            return this;\n        } else if (this.value &gt;= value &amp;&amp; this.left != null) {  // \u5982\u679c\u8be5\u8282\u70b9value\u5c0f\u4e8e\u76ee\u6807\u8282\u70b9\u7684value\uff0c\u4e14\u5de6\u5b50\u7ed3\u70b9\u4e0d\u4e3a\u7a7a\n            return this.left.searchParentNode(value);   // \u9012\u5f52\u67e5\u627e\u5de6\u5b50\u7ed3\u70b9\n        } else if (this.value &lt; value &amp;&amp; this.right != null) {\n            return this.right.searchParentNode(value);  // \u9012\u5f52\u67e5\u627e\u53f3\u5b50\u7ed3\u70b9\n        } else {\n            return null;    // \u6ca1\u627e\u5230\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#115-avl","title":"11.5 \u5e73\u8861\u4e8c\u53c9\u6811(AVL  \u6811)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1151","title":"11.5.1 \u770b\u4e00\u4e2a\u6848\u4f8b(\u8bf4\u660e\u4e8c\u53c9\u6392\u5e8f\u6811\u53ef\u80fd\u7684\u95ee\u9898)","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217{1,2,3,4,5,6}\uff0c\u8981\u6c42\u521b\u5efa\u4e00\u9897\u4e8c\u53c9\u6392\u5e8f\u6811(BST), \u5e76\u5206\u6790\u95ee\u9898\u6240\u5728. \u5de6\u8fb9 BST \u5b58\u5728\u7684\u95ee\u9898\u5206\u6790:</p> <ol> <li>\u5de6\u5b50\u6811\u5168\u90e8\u4e3a\u7a7a\uff0c\u4ece\u5f62\u5f0f\u4e0a\u770b\uff0c\u66f4\u50cf\u4e00\u4e2a\u5355\u94fe\u8868.</li> <li>\u63d2\u5165\u901f\u5ea6\u6ca1\u6709\u5f71\u54cd</li> <li>\u67e5\u8be2\u901f\u5ea6\u660e\u663e\u964d\u4f4e(\u56e0\u4e3a\u9700\u8981\u4f9d\u6b21\u6bd4\u8f83)\uff0c\u4e0d\u80fd\u53d1\u6325 BST \u7684\u4f18\u52bf\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8fd8\u9700\u8981\u6bd4\u8f83\u5de6\u5b50\u6811\uff0c\u5176\u67e5\u8be2\u901f\u5ea6\u6bd4\u5355\u94fe\u8868\u8fd8\u6162</li> <li>\u89e3\u51b3\u65b9\u6848-\u5e73\u8861\u4e8c\u53c9\u6811(AVL)</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1152","title":"11.5.2 \u57fa\u672c\u4ecb\u7ecd","text":"<ol> <li>\u5e73\u8861\u4e8c\u53c9\u6811\u4e5f\u53eb\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff08Self-balancing binary search tree\uff09\u53c8\u88ab\u79f0\u4e3a AVL \u6811\uff0c \u53ef\u4ee5\u4fdd\u8bc1\u67e5\u8be2\u6548\u7387\u8f83\u9ad8\u3002</li> <li>\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a\u5b83\u662f\u4e00\u68f5\u7a7a\u6811\u6216\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5e38\u7528\u5b9e\u73b0\u65b9\u6cd5\u6709\u7ea2\u9ed1\u6811\u3001AVL\u3001\u66ff\u7f6a\u7f8a\u6811\u3001Treap\u3001\u4f38\u5c55\u6811\u7b49\u3002</li> <li>\u4e3e\u4f8b\u8bf4\u660e\uff0c\u770b\u770b\u4e0b\u9762\u54ea\u4e9b  AVL \u6811\uff0c\u4e3a\u4ec0\u4e48?</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1153-","title":"11.5.3 \u5e94\u7528\u6848\u4f8b-\u5355\u65cb\u8f6c(\u5de6\u65cb\u8f6c)","text":"<ol> <li>\u8981\u6c42:   \u7ed9\u4f60\u4e00\u4e2a\u6570\u5217\uff0c\u521b\u5efa\u51fa\u5bf9\u5e94\u7684\u5e73\u8861\u4e8c\u53c9\u6811.\u6570\u5217    {4,3,6,5,7,8}</li> <li>\u601d\u8def\u5206\u6790(\u793a\u610f\u56fe)</li> </ol> <pre><code>/**\n * \u5de6\u65cb\u8f6c\n */\npublic void leftRotate() {\n    // \u4ee5\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u521b\u5efa\u65b0\u7684\u7ed3\u70b9\n    Node newNode = new Node(value);\n    // \u65b0\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\uff0c\u8bbe\u7f6e\u6210\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\n    newNode.left = this.left;\n    // \u628a\u65b0\u8282\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\u8bbe\u7f6e\u6210\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\n    newNode.right = this.right.left;\n    // \u628a\u5f53\u524d\u7ed3\u70b9\u7684value\u8bbe\u7f6e\u6210\u53f3\u5b50\u7ed3\u70b9\u7684\u503c\n    value = this.right.value;\n    // \u628a\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\u8bbe\u7f6e\u6210\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\n    right = right.right;\n    // \u628a\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\u8bbe\u7f6e\u6210\u65b0\u8282\u70b9\n    left = newNode;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1154-","title":"11.5.4 \u5e94\u7528\u6848\u4f8b-\u5355\u65cb\u8f6c(\u53f3\u65cb\u8f6c)","text":"<ol> <li>\u8981\u6c42:   \u7ed9\u4f60\u4e00\u4e2a\u6570\u5217\uff0c\u521b\u5efa\u51fa\u5bf9\u5e94\u7684\u5e73\u8861\u4e8c\u53c9\u6811.\u6570\u5217   {10,12,  8,  9,  7,  6}</li> <li>\u601d\u8def\u5206\u6790(\u793a\u610f\u56fe)</li> </ol> <pre><code>/**\n * \u53f3\u65cb\u8f6c\n */\npublic void rightRotate() {\n    Node newNode = new Node(value);\n    newNode.right = right;\n    newNode.left = left.right;\n    value = left.value;\n    left = left.left;\n    right = newNode;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1155-","title":"11.5.5 \u5e94\u7528\u6848\u4f8b-\u53cc\u65cb\u8f6c","text":"<p>\u524d\u9762\u7684\u4e24\u4e2a\u6570\u5217\uff0c\u8fdb\u884c\u5355\u65cb\u8f6c(\u5373\u4e00\u6b21\u65cb\u8f6c)\u5c31\u53ef\u4ee5\u5c06\u975e\u5e73\u8861\u4e8c\u53c9\u6811\u8f6c\u6210\u5e73\u8861\u4e8c\u53c9\u6811,\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5355\u65cb\u8f6c\u4e0d\u80fd\u5b8c\u6210\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u8f6c\u6362\u3002\u6bd4\u5982\u6570\u5217 int[] arr  = {10,11,7,6,8,9};       \u8fd0\u884c\u539f\u6765\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u5e76\u6ca1\u6709\u8f6c\u6210   AVL \u6811.  int[] arr  = {2,1,6,5,7,3};  //    \u8fd0\u884c\u539f\u6765\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u5e76\u6ca1\u6709\u8f6c\u6210   AVL  \u6811</p> <ol> <li>\u95ee\u9898\u5206\u6790</li> </ol> <p></p> <ol> <li>\u89e3\u51b3\u601d\u8def\u5206\u6790</li> <li>\u5f53\u7b26\u53f7\u53f3\u65cb\u8f6c\u7684\u6761\u4ef6\u65f6</li> <li>\u5982\u679c\u5b83\u7684\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u9ad8\u5ea6\u5927\u4e8e\u5b83\u7684\u5de6\u5b50\u6811\u7684\u9ad8\u5ea6</li> <li>\u5bf9\u5de6\u5b50\u7ed3\u70b9\u8fdb\u884c\u5de6\u65cb\u8f6c</li> <li>\u7136\u540e\u5bf9\u5f53\u524d\u7ed3\u70b9\u8fdb\u884c\u53f3\u65cb\u8f6c</li> </ol> <pre><code>package avl;\n\n/**\n * \u5e73\u8861\u4e8c\u53c9\u6811\n */\npublic class AvlTreeDemo {\n    public static void main(String[] args) {\n        int[] arr = {10, 11, 7, 6, 8, 9};\n        AvlTree avlTree = new AvlTree();\n        for (int item : arr) {\n            avlTree.add(new Node(item));\n        }\n        avlTree.infixOrder();\n\n        System.out.println(\"\u6811\u7684\u9ad8\u5ea6\" + avlTree.getRoot().height());\n        System.out.println(\"\u6811\u7684\u5de6\u5b50\u6811\u9ad8\u5ea6\" + avlTree.getRoot().getLeftHeight());\n        System.out.println(\"\u6811\u7684\u53f3\u5b50\u6811\u9ad8\u5ea6\" + avlTree.getRoot().getRightHeight());\n        System.out.println(\"\u5f53\u524d\u6839\u7ed3\u70b9\u4e3a\uff1a\" + avlTree.getRoot());\n\n\n    }\n}\n\n/**\n * \u5e73\u8861\u4e8c\u53c9\u6811\n */\nclass AvlTree {\n    /**\n     * \u5e73\u8861\u4e8c\u53c9\u6811\u6839\u8282\u70b9\n     */\n    private Node root;\n\n    /**\n     * \u67e5\u627e\u76ee\u6807\u7ed3\u70b9\n     *\n     * @param value \u4f20\u5165\u503c\n     * @return \u627e\u5230\u8fd4\u56de\uff0c\u6ca1\u627e\u5230\u8fd4\u56denull\n     */\n    public Node searchNode(int value) {\n        if (root == null) {\n            return null;\n        } else {\n            return root.searchNode(value);\n        }\n    }\n\n    /**\n     * \u67e5\u627e\u76ee\u6807\u7ed3\u70b9\u7684\u7236\u8282\u70b9\n     *\n     * @param value \u4f20\u5165value\n     * @return \u627e\u5230\u5219\u8fd4\u56de\uff0c\u6ca1\u627e\u5230\u5219\u8fd4\u56denull\n     */\n    public Node searchParentNode(int value) {\n        if (root == null) {\n            return null;\n        } else {\n            return root.searchParentNode(value);\n        }\n    }\n\n    /**\n     * \u5220\u9664\u7ed3\u70b9\n     *\n     * @param value \u8981\u5220\u9664\u7ed3\u70b9\u7684value\n     */\n    public void deleteNode(int value) {\n        if (root == null) {\n            return;\n        }\n        if (root.left == null &amp;&amp; root.right == null) {  // \u53ea\u6709root\u8282\u70b9\n            if (root.value == value) {\n                root = null;\n                return;\n            }\n        }\n        // \u67e5\u627e\u76ee\u6807\u7ed3\u70b9\n        Node targetNode = searchNode(value);\n        if (targetNode == null) {   // \u6ca1\u627e\u5230\u76ee\u6807\u7ed3\u70b9\n            System.out.println(\"\u6ca1\u6709\u627e\u5230\u76ee\u6807\u7ed3\u70b9\");\n            return;\n        }\n        // \u67e5\u627e\u76ee\u6807\u7ed3\u70b9\u7684\u7236\u8282\u70b9\n        Node parentNode = searchParentNode(value);\n        if (targetNode.left == null &amp;&amp; targetNode.right == null) {  // \u662f\u53f6\u5b50\u7ed3\u70b9\n            // \u5224\u65ad\u76ee\u6807\u7ed3\u70b9\u5728\u7236\u8282\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\u8fd8\u662f\u53f3\u5b50\u7ed3\u70b9\n            if (parentNode.left != null &amp;&amp; parentNode.left == targetNode) {    // \u662f\u5de6\u5b50\u7ed3\u70b9\n                parentNode.left = null;\n            } else if (parentNode.right != null &amp;&amp; parentNode.right == targetNode) { // \u662f\u53f3\u5b50\u7ed3\u70b9\n                parentNode.right = null;\n            }\n        } else if (targetNode.left != null &amp;&amp; targetNode.right != null) { // \u8981\u5220\u9664\u7684\u662f\u6709\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7684\u6839\u8282\u70b9\n            // \u627e\u5230\u76ee\u6807\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u7ed3\u70b9\u5e76\u66ff\u6362\u76ee\u6807\u7ed3\u70b9\u7684value\n            targetNode.value = deleteRightTreeMin(targetNode);  // \u5df2\u7ecf\u5220\u9664\u6700\u5c0f\u7ed3\u70b9\n        } else { // \u662f\u53ea\u6709\u4e00\u4e2a\u5b50\u7ed3\u70b9\u7684\u6839\u8282\u70b9\n            if (targetNode.left != null) {  // \u76ee\u6807\u7ed3\u70b9\u6709\u5de6\u5b50\u7ed3\u70b9\n                if (parentNode != null) {\n                    // \u76ee\u6807\u7ed3\u70b9\u662f\u7236\u8282\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\n                    if (parentNode.left != null &amp;&amp; parentNode.left.value == targetNode.value) {\n                        parentNode.left = targetNode.left;\n                    } else { // \u76ee\u6807\u7ed3\u70b9\u662f\u7236\u8282\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\n                        parentNode.right = targetNode.left;\n                    }\n                } else {\n                    root = targetNode.left;\n                }\n            } else { // \u76ee\u6807\u7ed3\u70b9\u6709\u53f3\u5b50\u7ed3\u70b9\n                if (parentNode != null) {\n                    // \u76ee\u6807\u7ed3\u70b9\u662f\u7236\u8282\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\n                    if (parentNode.left != null &amp;&amp; parentNode.left.value == targetNode.value) {\n                        parentNode.left = targetNode.right;\n                    } else { // \u76ee\u6807\u7ed3\u70b9\u662f\u7236\u8282\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\n                        parentNode.right = targetNode.right;\n                    }\n                } else {\n                    root = targetNode.right;\n                }\n            }\n        }\n    }\n\n    /**\n     * \u5220\u9664\u6839\u8282\u70b9\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u7ed3\u70b9\n     *\n     * @param node \u4f20\u5165\u6839\u8282\u70b9\n     * @return \u8fd4\u56de\u4ee5node\u4e3a\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u7ed3\u70b9\u7684\u503c\n     */\n    public int deleteRightTreeMin(Node node) {\n        Node tempNode = node.right; // \u641c\u7d22\u6700\u5c0f\u7ed3\u70b9\n        Node parentNode = node; // \u6700\u5c0f\u7ed3\u70b9\u7684\u7236\u8282\u70b9\n        // \u627e\u5230\u6700\u5c0f\u7ed3\u70b9\uff0c\u8ddf\u6700\u5c0f\u7ed3\u70b9\u7684\u7236\u8282\u70b9\n        // \u4e0d\u7ba1\u662f\u5426\u6709\u53f3\u5b50\u7ed3\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u5de6\u5b50\u7ed3\u70b9\uff0c\u5219\u8be5\u7ed3\u70b9\u5fc5\u7136\u6700\u5c0f\n        while (tempNode.left != null) {\n            parentNode = tempNode;\n            tempNode = tempNode.left;\n        }\n        // \u5224\u65adwhile\u5faa\u73af\u6709\u6ca1\u6709\u8fdb\u884c\n        if (parentNode.value != node.value) {\n            parentNode.left = null;\n        } else { // while\u5faa\u73af\u6ca1\u8fdb\u884c\uff0c\u8bf4\u660enode\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u53f3\u5b50\u7ed3\u70b9\n            parentNode.right = null;    // \u5c06\u53f3\u5b50\u7ed3\u70b9\u5220\u9664\n        }\n        return tempNode.value;\n    }\n\n    /**\n     * \u6dfb\u52a0\u7ed3\u70b9\n     *\n     * @param node \u4f20\u5165\u7ed3\u70b9\n     */\n    public void add(Node node) {\n        if (root == null) {\n            root = node;\n        } else {\n            root.add(node);\n        }\n    }\n\n    /**\n     * \u4e2d\u5e8f\u904d\u5386\u5e73\u8861\u4e8c\u53c9\u6811\n     */\n    public void infixOrder() {\n        if (root == null) {\n            return;\n        }\n        root.infixOrder();\n    }\n\n    public Node getRoot() {\n        return root;\n    }\n}\n\n/**\n * \u7ed3\u70b9\u7c7b\n */\nclass Node {\n    /**\n     * \u503c\n     */\n    int value;\n    /**\n     * \u5de6\u5b50\u8282\u70b9\n     */\n    Node left;\n    /**\n     * \u53f3\u5b50\u8282\u70b9\n     */\n    Node right;\n\n    public Node(int value) {\n        this.value = value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Node{\" +\n                \"value=\" + value +\n                '}';\n    }\n\n    /**\n     * @return \u8fd4\u56de\u8be5\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u7684\u9ad8\u5ea6\n     */\n    public int getLeftHeight() {\n        if (left == null) {\n            return 0;\n        }\n        return left.height();\n    }\n\n    /**\n     * @return \u8fd4\u56de\u8be5\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\n     */\n    public int getRightHeight() {\n        if (right == null) {\n            return 0;\n        }\n        return right.height();\n    }\n\n    /**\n     * \u8fd4\u56de\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u6811\u7684\u9ad8\u5ea6\n     *\n     * @return \u9ad8\u5ea6\n     */\n    public int height() {\n        return Math.max(left == null ? 0 : left.height(), right == null ? 0 : right.height()) + 1;\n    }\n\n    /**\n     * \u6dfb\u52a0\u7ed3\u70b9\uff0c\u6ee1\u8db3\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u8981\u6c42\n     *\n     * @param node \u4f20\u5165\u7ed3\u70b9\n     */\n    public void add(Node node) {\n        if (node == null) {\n            throw new RuntimeException(\"\u7ed3\u70b9\u4e3a\u7a7a\");\n        }\n        if (node.value &lt;= this.value) { // \u4f20\u5165\u7ed3\u70b9\u7684value\u5c0f\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684value\n            if (this.left == null) {    // \u5982\u679c\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\u4e3anull\n                this.left = node;   // \u5c06\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9 = \u4f20\u5165\u7684\u7ed3\u70b9\n            } else {    // \u5982\u679c\u4e0d\u4e3a\u7a7a\u5219\u7ee7\u7eed\u5411\u5de6\u5b50\u7ed3\u70b9\u9012\u5f52\u6bd4\u8f83\u6dfb\u52a0\n                this.left.add(node);\n            }\n        } else { // \u4f20\u5165\u7ed3\u70b9\u7684value\u5927\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684value\n            if (this.right == null) {\n                this.right = node;\n            } else {\n                this.right.add(node);\n            }\n        }\n        // \u5982\u679c\u53f3\u5b50\u6811\u9ad8\u5ea6-\u5de6\u5b50\u6811\u9ad8\u5ea6 &gt; 1\uff0c\u5c31\u5de6\u65cb\u8f6c\n        if (getRightHeight() - getLeftHeight() &gt; 1) {\n            // \u5982\u679c\u5b83\u7684\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u9ad8\u5ea6\u5927\u4e8e\u5b83\u7684\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\n            // \u5148\u5bf9\u53f3\u5b50\u7ed3\u70b9\u8fdb\u884c\u53f3\u65cb\u8f6c\n            // \u7136\u540e\u518d\u5bf9\u5f53\u524d\u7ed3\u70b9\u8fdb\u884c\u53f3\u65cb\u8f6c\n            if (right != null &amp;&amp; right.getLeftHeight() &gt; right.getRightHeight()) {\n                right.rightRotate();\n            }\n            leftRotate();\n        } else if (getLeftHeight() - getRightHeight() &gt; 1) { // \u5982\u679c\u5de6\u5b50\u6811\u9ad8\u5ea6-\u53f3\u5b50\u6811\u9ad8\u5ea6 &gt; 1\uff0c\u5c31\u53f3\u65cb\u8f6c\n            // \u5982\u679c\u5b83\u7684\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u9ad8\u5ea6\u5927\u4e8e\u5b83\u7684\u5de6\u5b50\u6811\u7684\u9ad8\u5ea6\n            // \u5bf9\u5de6\u5b50\u7ed3\u70b9\u8fdb\u884c\u5de6\u65cb\u8f6c\n            // \u7136\u540e\u518d\u5bf9\u5f53\u524d\u7ed3\u70b9\u8fdb\u884c\u53f3\u65cb\u8f6c\n            if (left != null &amp;&amp; left.getRightHeight() &gt; left.getLeftHeight()) {\n                left.leftRotate();\n            }\n            rightRotate();\n        }\n    }\n\n    /**\n     * \u4e2d\u5e8f\u904d\u5386\u5e73\u8861\u4e8c\u53c9\u6811\n     */\n    public void infixOrder() {\n        if (this.left != null) {\n            this.left.infixOrder();\n        }\n        System.out.println(this);\n        if (this.right != null) {\n            this.right.infixOrder();\n        }\n    }\n\n    /**\n     * \u67e5\u627e\u7ed3\u70b9\n     *\n     * @param value \u4f20\u5165\u8981\u5220\u9664\u7ed3\u70b9\u7684value\n     * @return \u627e\u5230\u8fd4\u56de\u8be5\u7ed3\u70b9\uff0c\u6ca1\u627e\u5230\u8fd4\u56denull\n     */\n    public Node searchNode(int value) {\n        if (this.value == value) {  // \u5982\u679c\u8be5\u7ed3\u70b9\u7b49\u4e8e\u8981\u627e\u7684value\n            return this;    // \u8fd4\u56de\u8be5\u8282\u70b9\n        } else if (this.value &lt; value) {  // \u5982\u679c\u53f3\u5b50\u7ed3\u70b9\u7684\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u8be5\u8282\u70b9\u7684value\u5c0f\u4e8evalue\n            if (this.right == null) {   // \u5982\u679c\u6ca1\u6709\u53f3\u5b50\u7ed3\u70b9\n                return null;    // \u8fd4\u56denull\uff0c\u6ca1\u627e\u5230\n            }\n            return this.right.searchNode(value);\n        } else {\n            if (this.left == null) {\n                return null;\n            }\n            return this.left.searchNode(value);\n        }\n    }\n\n    /**\n     * \u67e5\u627e\u76ee\u6807\u7ed3\u70b9\u7684\u7236\u8282\u70b9\n     *\n     * @param value \u76ee\u6807\u7ed3\u70b9\u7684value\n     * @return \u627e\u5230\u8fd4\u56de\uff0c\u6ca1\u627e\u5230\u8fd4\u56denull\n     */\n    public Node searchParentNode(int value) {\n        boolean flag1 = this.left != null &amp;&amp; this.left.value == value;\n        boolean flag2 = this.right != null &amp;&amp; this.right.value == value;\n        if (flag1 || flag2) {    // \u5982\u679c\u8be5\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5219\u8fd4\u56de\u8be5\u8282\u70b9\n            return this;\n        } else if (this.value &gt;= value &amp;&amp; this.left != null) {  // \u5982\u679c\u8be5\u8282\u70b9value\u5c0f\u4e8e\u76ee\u6807\u8282\u70b9\u7684value\uff0c\u4e14\u5de6\u5b50\u7ed3\u70b9\u4e0d\u4e3a\u7a7a\n            return this.left.searchParentNode(value);   // \u9012\u5f52\u67e5\u627e\u5de6\u5b50\u7ed3\u70b9\n        } else if (this.value &lt; value &amp;&amp; this.right != null) {\n            return this.right.searchParentNode(value);  // \u9012\u5f52\u67e5\u627e\u53f3\u5b50\u7ed3\u70b9\n        } else {\n            return null;    // \u6ca1\u627e\u5230\n        }\n    }\n\n    /**\n     * \u5de6\u65cb\u8f6c\n     */\n    public void leftRotate() {\n        // \u4ee5\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u521b\u5efa\u65b0\u7684\u7ed3\u70b9\n        Node newNode = new Node(value);\n        // \u65b0\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\uff0c\u8bbe\u7f6e\u6210\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\n        newNode.left = this.left;\n        // \u628a\u65b0\u8282\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\u8bbe\u7f6e\u6210\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\n        newNode.right = this.right.left;\n        // \u628a\u5f53\u524d\u7ed3\u70b9\u7684value\u8bbe\u7f6e\u6210\u53f3\u5b50\u7ed3\u70b9\u7684\u503c\n        value = this.right.value;\n        // \u628a\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\u8bbe\u7f6e\u6210\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\n        right = right.right;\n        // \u628a\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\u8bbe\u7f6e\u6210\u65b0\u8282\u70b9\n        left = newNode;\n    }\n\n    /**\n     * \u53f3\u65cb\u8f6c\n     */\n    public void rightRotate() {\n        Node newNode = new Node(value);\n        newNode.right = right;\n        newNode.left = left.right;\n        value = left.value;\n        left = left.left;\n        right = newNode;\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_13","title":"\u5341\u4e8c\u3001\u591a\u8def\u67e5\u627e\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#121-b","title":"12.1 \u4e8c\u53c9\u6811\u4e0e B  \u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1211","title":"12.1.1 \u4e8c\u53c9\u6811\u7684\u95ee\u9898\u5206\u6790","text":"<p>\u4e8c\u53c9\u6811\u7684\u64cd\u4f5c\u6548\u7387\u8f83\u9ad8\uff0c\u4f46\u662f\u4e5f\u5b58\u5728\u95ee\u9898,    \u8bf7\u770b\u4e0b\u9762\u7684\u4e8c\u53c9\u6811</p> <p></p> <ol> <li>\u4e8c\u53c9\u6811\u9700\u8981\u52a0\u8f7d\u5230\u5185\u5b58\u7684\uff0c\u5982\u679c\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u5c11\uff0c\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u5f88\u591a(\u6bd4\u5982  1  \u4ebf)\uff0c\u5c31\u5b58\u5728\u5982\u4e0b\u95ee\u9898:</li> <li>\u95ee\u9898  1\uff1a\u5728\u6784\u5efa\u4e8c\u53c9\u6811\u65f6\uff0c\u9700\u8981\u591a\u6b21\u8fdb\u884c  i/o  \u64cd\u4f5c(\u6d77\u91cf\u6570\u636e\u5b58\u5728\u6570\u636e\u5e93\u6216\u6587\u4ef6\u4e2d)\uff0c\u8282\u70b9\u6d77\u91cf\uff0c\u6784\u5efa\u4e8c\u53c9\u6811\u65f6\uff0c\u901f\u5ea6\u6709\u5f71\u54cd</li> <li>\u95ee\u9898  2\uff1a\u8282\u70b9\u6d77\u91cf\uff0c\u4e5f\u4f1a\u9020\u6210\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u5f88\u5927\uff0c\u4f1a\u964d\u4f4e\u64cd\u4f5c\u901f\u5ea6.</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1212","title":"12.1.2 \u591a\u53c9\u6811","text":"<ol> <li>\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u6570\u636e\u9879\uff0c\u6700\u591a\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u3002\u5982\u679c\u5141\u8bb8\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u6709\u66f4\u591a\u7684\u6570\u636e\u9879\u548c\u66f4\u591a\u7684\u5b50\u8282\u70b9\uff0c     \u5c31\u662f\u591a\u53c9\u6811\uff08multiway tree\uff09</li> <li>\u540e\u9762\u6211\u4eec\u8bb2\u89e3\u7684 2-3 \u6811\uff0c2-3-4 \u6811\u5c31\u662f\u591a\u53c9\u6811\uff0c\u591a\u53c9\u6811\u901a\u8fc7\u91cd\u65b0\u7ec4\u7ec7\u8282\u70b9\uff0c\u51cf\u5c11\u6811\u7684\u9ad8\u5ea6\uff0c\u80fd\u5bf9\u4e8c\u53c9\u6811\u8fdb\u884c\u4f18\u5316\u3002</li> <li>\u4e3e\u4f8b\u8bf4\u660e(\u4e0b\u9762  2-3  \u6811\u5c31\u662f\u4e00\u9897\u591a\u53c9\u6811)</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1213-b","title":"12.1.3 B \u6811\u7684\u57fa\u672c\u4ecb\u7ecd","text":"<p>B \u6811\u901a\u8fc7\u91cd\u65b0\u7ec4\u7ec7\u8282\u70b9\uff0c\u964d\u4f4e\u6811\u7684\u9ad8\u5ea6\uff0c\u5e76\u4e14\u51cf\u5c11 i/o \u8bfb\u5199\u6b21\u6570\u6765\u63d0\u5347\u6548\u7387\u3002</p> <p></p> <ol> <li>\u5982\u56fe B \u6811\u901a\u8fc7\u91cd\u65b0\u7ec4\u7ec7\u8282\u70b9\uff0c\u964d\u4f4e\u4e86\u6811\u7684\u9ad8\u5ea6.</li> <li>\u6587\u4ef6\u7cfb\u7edf\u53ca\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u8bbe\u8ba1\u8005\u5229\u7528\u4e86\u78c1\u76d8\u9884\u8bfb\u539f\u7406\uff0c\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u5927\u5c0f\u8bbe\u4e3a\u7b49\u4e8e\u4e00\u4e2a\u9875(\u9875\u5f97\u5927\u5c0f\u901a\u5e38\u4e3a 4k)\uff0c     \u8fd9\u6837\u6bcf\u4e2a\u8282\u70b9\u53ea\u9700\u8981\u4e00\u6b21  I/O \u5c31\u53ef\u4ee5\u5b8c\u5168\u8f7d\u5165</li> <li>\u5c06\u6811\u7684\u5ea6 M  \u8bbe\u7f6e\u4e3a  1024\uff0c\u5728  600  \u4ebf\u4e2a\u5143\u7d20\u4e2d\u6700\u591a\u53ea\u9700\u8981  4  \u6b21  I/O \u64cd\u4f5c\u5c31\u53ef\u4ee5\u8bfb\u53d6\u5230\u60f3\u8981\u7684\u5143\u7d20,  B  \u6811(B+)\u5e7f\u6cdb     \u5e94\u7528\u4e8e\u6587\u4ef6\u5b58\u50a8\u7cfb\u7edf\u4ee5\u53ca\u6570\u636e\u5e93\u7cfb\u7edf\u4e2d</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#122-2-3","title":"12.2 2-3  \u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1221-2-3-b","title":"12.2.1 2-3 \u6811\u662f\u6700\u7b80\u5355\u7684  B  \u6811\u7ed3\u6784,   \u5177\u6709\u5982\u4e0b\u7279\u70b9:","text":"<ol> <li>2-3  \u6811\u7684\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42.(\u53ea\u8981\u662f  B  \u6811\u90fd\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6)</li> <li> <p>\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u8282\u70b9\u53eb\u4e8c\u8282\u70b9\uff0c\u4e8c\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u8981\u4e48\u6709\u4e24\u4e2a\u5b50\u8282\u70b9.</p> </li> <li> <p>\u6709\u4e09\u4e2a\u5b50\u8282\u70b9\u7684\u8282\u70b9\u53eb\u4e09\u8282\u70b9\uff0c\u4e09\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u8981\u4e48\u6709\u4e09\u4e2a\u5b50\u8282\u70b9.</p> </li> <li> <p>2-3  \u6811\u662f\u7531\u4e8c\u8282\u70b9\u548c\u4e09\u8282\u70b9\u6784\u6210\u7684\u6811\u3002</p> </li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1222-2-3","title":"12.2.2 2-3 \u6811\u5e94\u7528\u6848\u4f8b","text":"<p>\u5c06\u6570\u5217{16,  24,  12,  32,  14,  26,  34,  10,  8,  28,  38,  20}\u6784\u5efa\u6210  2-3  \u6811\uff0c\u5e76\u4fdd\u8bc1\u6570\u636e\u63d2\u5165\u7684\u5927\u5c0f\u987a\u5e8f\u3002</p> <p></p> <p>\u63d2\u5165\u89c4\u5219: 1. 2-3  \u6811\u7684\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42.(\u53ea\u8981\u662f  B  \u6811\u90fd\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6) 2. \u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u8282\u70b9\u53eb\u4e8c\u8282\u70b9\uff0c\u4e8c\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u8981\u4e48\u6709\u4e24\u4e2a\u5b50\u8282\u70b9. 3. \u6709\u4e09\u4e2a\u5b50\u8282\u70b9\u7684\u8282\u70b9\u53eb\u4e09\u8282\u70b9\uff0c\u4e09\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u8981\u4e48\u6709\u4e09\u4e2a\u5b50\u8282\u70b9 4. \u5f53\u6309\u7167\u89c4\u5219\u63d2\u5165\u4e00\u4e2a\u6570\u5230\u67d0\u4e2a\u8282\u70b9\u65f6\uff0c\u4e0d\u80fd\u6ee1\u8db3\u4e0a\u9762\u4e09\u4e2a\u8981\u6c42\uff0c\u5c31\u9700\u8981\u62c6\uff0c\u5148\u5411\u4e0a\u62c6\uff0c\u5982\u679c\u4e0a\u5c42\u6ee1\uff0c\u5219\u62c6\u672c\u5c42\uff0c     \u62c6\u540e\u4ecd\u7136\u9700\u8981\u6ee1\u8db3\u4e0a\u9762  3 \u4e2a\u6761\u4ef6\u3002 5. \u5bf9\u4e8e\u4e09\u8282\u70b9\u7684\u5b50\u6811\u7684\u503c\u5927\u5c0f\u4ecd\u7136\u9075\u5b88(BST \u4e8c\u53c9\u6392\u5e8f\u6811)\u7684\u89c4\u5219</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1223","title":"12.2.3 \u5176\u5b83\u8bf4\u660e","text":"<p>\u9664\u4e86  23  \u6811\uff0c\u8fd8\u6709  234  \u6811\u7b49\uff0c\u6982\u5ff5\u548c  23  \u6811\u7c7b\u4f3c\uff0c\u4e5f\u662f\u4e00\u79cd B \u6811\u3002    \u5982\u56fe:</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#123-b-b-b","title":"12.3 B  \u6811\u3001B+\u6811\u548c  B*\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1231-b","title":"12.3.1 B \u6811\u7684\u4ecb\u7ecd","text":"<p>B-tree  \u6811\u5373  B  \u6811\uff0cB  \u5373  Balanced\uff0c\u5e73\u8861\u7684\u610f\u601d\u3002\u6709\u4eba\u628a  B-tree  \u7ffb\u8bd1\u6210  B-\u6811\uff0c\u5bb9\u6613\u8ba9\u4eba\u4ea7\u751f\u8bef\u89e3\u3002\u4f1a\u4ee5\u4e3a  B-\u6811\u662f\u4e00\u79cd\u6811\uff0c\u800c  B \u6811\u53c8\u662f\u53e6\u4e00\u79cd\u6811\u3002\u5b9e\u9645\u4e0a\uff0cB-tree  \u5c31\u662f\u6307\u7684  B  \u6811\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1232-b","title":"12.3.2 B \u6811\u7684\u4ecb\u7ecd","text":"<p>\u524d\u9762\u5df2\u7ecf\u4ecb\u7ecd\u4e86  2-3  \u6811\u548c  2-3-4  \u6811\uff0c\u4ed6\u4eec\u5c31\u662f B  \u6811(\u82f1\u8bed\uff1aB-tree    \u4e5f\u5199\u6210  B-\u6811)\uff0c\u8fd9\u91cc\u6211\u4eec\u518d\u505a\u4e00\u4e2a\u8bf4\u660e\uff0c\u6211\u4eec\u5728\u5b66\u4e60  Mysql  \u65f6\uff0c\u7ecf\u5e38\u542c\u5230\u8bf4\u67d0\u79cd\u7c7b\u578b\u7684\u7d22\u5f15\u662f\u57fa\u4e8e  B  \u6811\u6216\u8005  B+\u6811\u7684\uff0c\u5982\u56fe:</p> <p></p> <p>\u5bf9\u4e0a\u56fe\u7684\u8bf4\u660e:</p> <ol> <li>B \u6811\u7684\u9636\uff1a\u8282\u70b9\u7684\u6700\u591a\u5b50\u8282\u70b9\u4e2a\u6570\u3002\u6bd4\u5982 2-3 \u6811\u7684\u9636\u662f 3\uff0c2-3-4 \u6811\u7684\u9636\u662f 4</li> <li>B-\u6811\u7684\u641c\u7d22\uff0c\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u5bf9\u7ed3\u70b9\u5185\u7684\u5173\u952e\u5b57\uff08\u6709\u5e8f\uff09\u5e8f\u5217\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\uff0c\u5982\u679c\u547d\u4e2d\u5219\u7ed3\u675f\uff0c\u5426\u5219\u8fdb\u5165\u67e5\u8be2\u5173\u952e\u5b57\u6240\u5c5e\u8303\u56f4\u7684\u513f\u5b50\u7ed3\u70b9\uff1b\u91cd\u590d\uff0c\u76f4\u5230\u6240\u5bf9\u5e94\u7684\u513f\u5b50\u6307\u9488\u4e3a\u7a7a\uff0c\u6216\u5df2\u7ecf\u662f\u53f6\u5b50\u7ed3\u70b9</li> <li>\u5173\u952e\u5b57\u96c6\u5408\u5206\u5e03\u5728\u6574\u9897\u6811\u4e2d,    \u5373\u53f6\u5b50\u8282\u70b9\u548c\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u5b58\u653e\u6570\u636e.</li> <li>\u641c\u7d22\u6709\u53ef\u80fd\u5728\u975e\u53f6\u5b50\u7ed3\u70b9\u7ed3\u675f</li> <li>\u5176\u641c\u7d22\u6027\u80fd\u7b49\u4ef7\u4e8e\u5728\u5173\u952e\u5b57\u5168\u96c6\u5185\u505a\u4e00\u6b21\u4e8c\u5206\u67e5\u627e</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1233-b","title":"12.3.3 B+\u6811\u7684\u4ecb\u7ecd","text":"<p>B+\u6811\u662f B \u6811\u7684\u53d8\u4f53\uff0c\u4e5f\u662f\u4e00\u79cd\u591a\u8def\u641c\u7d22\u6811\u3002</p> <p></p> <p>\u5bf9\u4e0a\u56fe\u7684\u8bf4\u660e:</p> <ol> <li>B+\u6811\u7684\u641c\u7d22\u4e0e  B \u6811\u4e5f\u57fa\u672c\u76f8\u540c\uff0c\u533a\u522b\u662f  B+\u6811\u53ea\u6709\u8fbe\u5230\u53f6\u5b50\u7ed3\u70b9\u624d\u547d\u4e2d\uff08B  \u6811\u53ef\u4ee5\u5728\u975e\u53f6\u5b50\u7ed3\u70b9\u547d\u4e2d\uff09\uff0c\u5176\u6027\u80fd\u4e5f\u7b49\u4ef7\u4e8e\u5728\u5173\u952e\u5b57\u5168\u96c6\u505a\u4e00\u6b21\u4e8c\u5206\u67e5\u627e</li> <li>\u6240\u6709\u5173\u952e\u5b57\u90fd\u51fa\u73b0\u5728\u53f6\u5b50\u7ed3\u70b9\u7684\u94fe\u8868\u4e2d\uff08\u5373\u6570\u636e\u53ea\u80fd\u5728\u53f6\u5b50\u8282\u70b9\u3010\u4e5f\u53eb\u7a20\u5bc6\u7d22\u5f15\u3011\uff09\uff0c\u4e14\u94fe\u8868\u4e2d\u7684\u5173\u952e\u5b57(\u6570\u636e)\u6070\u597d\u662f\u6709\u5e8f\u7684\u3002</li> <li>\u4e0d\u53ef\u80fd\u5728\u975e\u53f6\u5b50\u7ed3\u70b9\u547d\u4e2d</li> <li>\u975e\u53f6\u5b50\u7ed3\u70b9\u76f8\u5f53\u4e8e\u662f\u53f6\u5b50\u7ed3\u70b9\u7684\u7d22\u5f15\uff08\u7a00\u758f\u7d22\u5f15\uff09\uff0c\u53f6\u5b50\u7ed3\u70b9\u76f8\u5f53\u4e8e\u662f\u5b58\u50a8\uff08\u5173\u952e\u5b57\uff09\u6570\u636e\u7684\u6570\u636e\u5c42</li> <li>\u66f4\u9002\u5408\u6587\u4ef6\u7d22\u5f15\u7cfb\u7edf</li> <li>B \u6811\u548c B+\u6811\u5404\u6709\u81ea\u5df1\u7684\u5e94\u7528\u573a\u666f\uff0c\u4e0d\u80fd\u8bf4  B+\u6811\u5b8c\u5168\u6bd4  B  \u6811\u597d\uff0c\u53cd\u4e4b\u4ea6\u7136.</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1234-b","title":"12.3.4 B*\u6811\u7684\u4ecb\u7ecd","text":"<p>B\u6811\u662f B+\u6811\u7684\u53d8\u4f53\uff0c\u5728  B+\u6811\u7684\u975e\u6839\u548c\u975e\u53f6\u5b50\u7ed3\u70b9\u518d\u589e\u52a0\u6307\u5411\u5144\u5f1f\u7684\u6307\u9488*\u3002</p> <p></p> <p>B*\u6811\u7684\u8bf4\u660e:</p> <ol> <li>B\u6811\u5b9a\u4e49\u4e86\u975e\u53f6\u5b50\u7ed3\u70b9\u5173\u952e\u5b57\u4e2a\u6570\u81f3\u5c11\u4e3a(2/3)M\uff0c\u5373\u5757\u7684\u6700\u4f4e\u4f7f\u7528\u7387\u4e3a  2/3\uff0c\u800c  B+\u6811\u7684\u5757\u7684\u6700\u4f4e\u4f7f\u7528\u7387\u4e3a\u76841/2\u3002</li> <li>\u4ece\u7b2c 1 \u4e2a\u7279\u70b9\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0cB*\u6811\u5206\u914d\u65b0\u7ed3\u70b9\u7684\u6982\u7387\u6bd4  B+\u6811\u8981\u4f4e\uff0c\u7a7a\u95f4\u4f7f\u7528\u7387\u66f4\u9ad8</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#_14","title":"\u5341\u4e09\u3001\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#131","title":"13.1 \u56fe\u57fa\u672c\u4ecb\u7ecd","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1311","title":"13.1.1 \u4e3a\u4ec0\u4e48\u8981\u6709\u56fe","text":"<ol> <li>\u524d\u9762\u6211\u4eec\u5b66\u4e86\u7ebf\u6027\u8868\u548c\u6811</li> <li>\u7ebf\u6027\u8868\u5c40\u9650\u4e8e\u4e00\u4e2a\u76f4\u63a5\u524d\u9a71\u548c\u4e00\u4e2a\u76f4\u63a5\u540e\u7ee7\u7684\u5173\u7cfb</li> <li>\u6811\u4e5f\u53ea\u80fd\u6709\u4e00\u4e2a\u76f4\u63a5\u524d\u9a71\u4e5f\u5c31\u662f\u7236\u8282\u70b9</li> <li>\u5f53\u6211\u4eec\u9700\u8981\u8868\u793a\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u65f6\uff0c    \u8fd9\u91cc\u6211\u4eec\u5c31\u7528\u5230\u4e86\u56fe\u3002</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1312","title":"13.1.2 \u56fe\u7684\u4e3e\u4f8b\u8bf4\u660e","text":"<p>\u56fe\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5176\u4e2d\u7ed3\u70b9\u53ef\u4ee5\u5177\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u76f8\u90bb\u5143\u7d20\u3002\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u79f0\u4e3a\u8fb9\u3002\u7ed3\u70b9\u4e5f\u53ef\u4ee5\u79f0\u4e3a\u9876\u70b9\u3002\u5982\u56fe\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1313","title":"13.1.3 \u56fe\u7684\u5e38\u7528\u6982\u5ff5","text":"<ol> <li>\u9876\u70b9(vertex)</li> <li>\u8fb9(edge)</li> <li>\u8def\u5f84</li> <li>\u65e0\u5411\u56fe</li> </ol> <ol> <li> <p>\u6709\u5411\u56fe</p> </li> <li> <p>\u5e26\u6743\u56fe</p> </li> </ol> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#132","title":"13.2 \u56fe\u7684\u8868\u793a\u65b9\u5f0f","text":"<p>\u56fe\u7684\u8868\u793a\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\uff08\u90bb\u63a5\u77e9\u9635\uff09\uff1b\u94fe\u8868\u8868\u793a\uff08\u90bb\u63a5\u8868\uff09\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1321","title":"13.2.1 \u90bb\u63a5\u77e9\u9635","text":"<p>\u90bb\u63a5\u77e9\u9635\u662f\u8868\u793a\u56fe\u5f62\u4e2d\u9876\u70b9\u4e4b\u95f4\u76f8\u90bb\u5173\u7cfb\u7684\u77e9\u9635\uff0c\u5bf9\u4e8e n \u4e2a\u9876\u70b9\u7684\u56fe\u800c\u8a00\uff0c\u77e9\u9635\u662f\u7684 row \u548c col \u8868\u793a\u7684\u662f 1....n\u4e2a\u70b9\u3002</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1322","title":"13.2.2 \u90bb\u63a5\u8868","text":"<ol> <li>\u90bb\u63a5\u77e9\u9635\u9700\u8981\u4e3a\u6bcf\u4e2a\u9876\u70b9\u90fd\u5206\u914d n \u4e2a\u8fb9\u7684\u7a7a\u95f4\uff0c\u5176\u5b9e\u6709\u5f88\u591a\u8fb9\u90fd\u662f\u4e0d\u5b58\u5728,\u4f1a\u9020\u6210\u7a7a\u95f4\u7684\u4e00\u5b9a\u635f\u5931.</li> <li>\u90bb\u63a5\u8868\u7684\u5b9e\u73b0\u53ea\u5173\u5fc3\u5b58\u5728\u7684\u8fb9\uff0c\u4e0d\u5173\u5fc3\u4e0d\u5b58\u5728\u7684\u8fb9\u3002\u56e0\u6b64\u6ca1\u6709\u7a7a\u95f4\u6d6a\u8d39\uff0c\u90bb\u63a5\u8868\u7531\u6570\u7ec4+\u94fe\u8868\u7ec4\u6210</li> <li>\u4e3e\u4f8b\u8bf4\u660e</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#133","title":"13.3 \u56fe\u7684\u5feb\u901f\u5165\u95e8\u6848\u4f8b","text":"<ol> <li>\u8981\u6c42:   \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\u56fe\u7ed3\u6784.</li> </ol> <ol> <li> <p>\u601d\u8def\u5206\u6790 (1) \u5b58\u50a8\u9876\u70b9 String \u4f7f\u7528 ArrayList (2) \u4fdd\u5b58\u77e9\u9635 int[][] edges</p> </li> <li> <p>\u4ee3\u7801\u5b9e\u73b0</p> </li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#134","title":"13.4 \u56fe\u7684\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u4ecb\u7ecd","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1341","title":"13.4.1 \u56fe\u904d\u5386\u4ecb\u7ecd","text":"<p>\u6240\u8c13\u56fe\u7684\u904d\u5386\uff0c\u5373\u662f\u5bf9\u7ed3\u70b9\u7684\u8bbf\u95ee\u3002\u4e00\u4e2a\u56fe\u6709\u90a3\u4e48\u591a\u4e2a\u7ed3\u70b9\uff0c\u5982\u4f55\u904d\u5386\u8fd9\u4e9b\u7ed3\u70b9\uff0c\u9700\u8981\u7279\u5b9a\u7b56\u7565\uff0c\u4e00\u822c\u6709\u4e24\u79cd  \u8bbf\u95ee\u7b56\u7565: (1)\u6df1\u5ea6\u4f18\u5148\u904d\u5386    (2)\u5e7f\u5ea6\u4f18\u5148\u904d\u5386</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1342","title":"13.4.2 \u6df1\u5ea6\u4f18\u5148\u904d\u5386\u57fa\u672c\u601d\u60f3","text":"<p>\u56fe\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22(Depth  First Search)   \u3002</p> <ol> <li>\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u4ece\u521d\u59cb\u8bbf\u95ee\u7ed3\u70b9\u51fa\u53d1\uff0c\u521d\u59cb\u8bbf\u95ee\u7ed3\u70b9\u53ef\u80fd\u6709\u591a\u4e2a\u90bb\u63a5\u7ed3\u70b9\uff0c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u7b56\u7565\u5c31\u662f\u9996\u5148\u8bbf\u95ee\u7b2c\u4e00\u4e2a\u90bb\u63a5\u7ed3\u70b9\uff0c\u7136\u540e\u518d\u4ee5\u8fd9\u4e2a\u88ab\u8bbf\u95ee\u7684\u90bb\u63a5\u7ed3\u70b9\u4f5c\u4e3a\u521d\u59cb\u7ed3\u70b9\uff0c\u8bbf\u95ee\u5b83\u7684\u7b2c\u4e00\u4e2a\u90bb\u63a5\u7ed3\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a \u6bcf\u6b21\u90fd\u5728\u8bbf\u95ee\u5b8c\u5f53\u524d\u7ed3\u70b9\u540e\u9996\u5148\u8bbf\u95ee\u5f53\u524d\u7ed3\u70b9\u7684\u7b2c\u4e00\u4e2a\u90bb\u63a5\u7ed3\u70b9\u3002</li> <li>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u6837\u7684\u8bbf\u95ee\u7b56\u7565\u662f\u4f18\u5148\u5f80\u7eb5\u5411\u6316\u6398\u6df1\u5165\uff0c\u800c\u4e0d\u662f\u5bf9\u4e00\u4e2a\u7ed3\u70b9\u7684\u6240\u6709\u90bb\u63a5\u7ed3\u70b9\u8fdb\u884c\u6a2a\u5411\u8bbf\u95ee\u3002</li> <li>\u663e\u7136\uff0c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1343","title":"13.4.3 \u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7b97\u6cd5\u6b65\u9aa4","text":"<ol> <li>\u8bbf\u95ee\u521d\u59cb\u7ed3\u70b9 v\uff0c\u5e76\u6807\u8bb0\u7ed3\u70b9 v  \u4e3a\u5df2\u8bbf\u95ee\u3002</li> <li>\u67e5\u627e\u7ed3\u70b9 v  \u7684\u7b2c\u4e00\u4e2a\u90bb\u63a5\u7ed3\u70b9 w\u3002</li> <li>\u82e5 w \u5b58\u5728\uff0c\u5219\u7ee7\u7eed\u6267\u884c 4\uff0c\u5982\u679c w \u4e0d\u5b58\u5728\uff0c\u5219\u56de\u5230\u7b2c 1  \u6b65\uff0c\u5c06\u4ece v  \u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7ee7\u7eed\u3002</li> <li>\u82e5 w \u672a\u88ab\u8bbf\u95ee\uff0c\u5bf9 w \u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u9012\u5f52\uff08\u5373\u628a  w \u5f53\u505a\u53e6\u4e00\u4e2a v\uff0c\u7136\u540e\u8fdb\u884c\u6b65\u9aa4  123\uff09\u3002</li> <li>\u67e5\u627e\u7ed3\u70b9 v  \u7684 w \u90bb\u63a5\u7ed3\u70b9\u7684\u4e0b\u4e00\u4e2a\u90bb\u63a5\u7ed3\u70b9\uff0c\u8f6c\u5230\u6b65\u9aa4 3\u3002</li> <li>\u5206\u6790\u56fe</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#135","title":"13.5 \u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1351","title":"13.5.1 \u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u57fa\u672c\u601d\u60f3","text":"<ol> <li>\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22(Broad  First  Search)  \u3002</li> <li>\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5206\u5c42\u641c\u7d22\u7684\u8fc7\u7a0b\uff0c\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u961f\u5217\u4ee5\u4fdd\u6301\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\u7684\u987a\u5e8f\uff0c\u4ee5\u4fbf\u6309\u8fd9\u4e2a\u987a\u5e8f\u6765\u8bbf\u95ee\u8fd9\u4e9b\u7ed3\u70b9\u7684\u90bb\u63a5\u7ed3\u70b9</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1352","title":"13.5.2 \u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u7b97\u6cd5\u6b65\u9aa4","text":"<ol> <li> <p>\u7ed3\u70b9 v  \u5165\u961f\u5217</p> </li> <li> <p>\u5f53\u961f\u5217\u975e\u7a7a\u65f6\uff0c\u7ee7\u7eed\u6267\u884c\uff0c\u5426\u5219\u7b97\u6cd5\u7ed3\u675f\u3002</p> </li> <li> <p>\u51fa\u961f\u5217\uff0c\u53d6\u5f97\u961f\u5934\u7ed3\u70b9  u\u3002</p> </li> <li> <p>\u67e5\u627e\u7ed3\u70b9  u  \u7684\u7b2c\u4e00\u4e2a\u90bb\u63a5\u7ed3\u70b9  w\u3002</p> </li> <li> <p>\u82e5\u7ed3\u70b9 u \u7684\u90bb\u63a5\u7ed3\u70b9 w \u4e0d\u5b58\u5728\uff0c\u5219\u8f6c\u5230\u6b65\u9aa4 3\uff1b\u5426\u5219\u5faa\u73af\u6267\u884c\u4ee5\u4e0b\u4e09\u4e2a\u6b65\u9aa4\uff1a</p> </li> <li> <p>\u82e5\u7ed3\u70b9  w \u5c1a\u672a\u88ab\u8bbf\u95ee\uff0c\u5219\u8bbf\u95ee\u7ed3\u70b9  w \u5e76\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\u3002</p> </li> <li> <p>\u7ed3\u70b9  w \u5165\u961f\u5217</p> </li> <li> <p>\u67e5\u627e\u7ed3\u70b9  u  \u7684\u7ee7  w \u90bb\u63a5\u7ed3\u70b9\u540e\u7684\u4e0b\u4e00\u4e2a\u90bb\u63a5\u7ed3\u70b9  w\uff0c\u8f6c\u5230\u6b65\u9aa4  6\u3002</p> </li> </ol> <pre><code>package graph;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class GraphDemo {\n    public static void main(String[] args) {\n        // \u6d4b\u8bd5\u56fe\u521b\u5efa\n        int n = 5;  // \u9876\u70b9\u4e2a\u6570\n        String[] vertex = {\"A\", \"B\", \"C\", \"D\", \"E\"};\n        Graph graph = new Graph(n);\n        for (int i = 0; i &lt; n; i++) {\n            graph.insertVertex(vertex[i]);\n        }\n        // \u6dfb\u52a0\u8fb9\n        // A-B A-C B-C B-D B-E\n        graph.insertEdges(0, 1, 1);\n        graph.insertEdges(0, 2, 1);\n        graph.insertEdges(1, 2, 1);\n        graph.insertEdges(1, 3, 1);\n        graph.insertEdges(1, 4, 1);\n        graph.showGraph();\n    }\n}\n\nclass Graph {\n    List&lt;String&gt; vertexList;    // \u5b58\u50a8\u9876\u70b9\u96c6\u5408\n    int[][] edges; // \u5b58\u50a8\u56fe\u5bf9\u5e94\u7684\u9886\u7ed3\u77e9\u9635\n    int numOfEdges; // \u8868\u793a\u8fb9\u7684\u6570\u76ee\n    boolean[] isVisited; // \u8bb0\u5f55\u67d0\u4e2a\u7ed3\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\n\n    /**\n     * @param n \u4f20\u5165\u9876\u70b9\u6570\u76ee\n     */\n    public Graph(int n) {\n        vertexList = new ArrayList&lt;&gt;(n);\n        isVisited = new boolean[n];\n        edges = new int[n][n];\n        numOfEdges = 0;\n    }\n\n    /**\n     * \u63d2\u5165\u9876\u70b9\n     *\n     * @param vertex \u4f20\u5165\u9876\u70b9\u503c\n     */\n    public void insertVertex(String vertex) {\n        vertexList.add(vertex);\n    }\n\n    /**\n     * \u6dfb\u52a0\u8fb9\n     *\n     * @param v1 \u8868\u793a\u70b9\u7684\u4e0b\u6807\uff0c\u5373\u7b2c\u4e00\u4e2a\u9876\u70b9\u7684\u4e0b\u6807\uff1a\"A\" -&gt; \"B\" ==&gt; \"A\" -&gt; 0  \"B\" -&gt; 1\n     * @param v2 \u8868\u793a\u70b9\u7684\u4e0b\u6807\uff0c\u5373\u7b2c\u4e8c\u4e2a\u9876\u70b9\u7684\u4e0b\u6807\n     * @param weight \u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c1\u8868\u793a\u8fde\u63a5\uff0c0\u8868\u793a\u4e0d\u8fde\u63a5\n     */\n    public void insertEdges(int v1, int v2, int weight) {\n        // \u662f\u65e0\u5411\u56fe\uff0c\u4e24\u4e2a\u90fd\u8981\u8bbe\u7f6e\n        edges[v1][v2] = weight; // \u4e24\u4e2a\u9876\u70b9\u5efa\u7acb\u5173\u7cfb\n        edges[v2][v1] = weight;\n        numOfEdges++;   // \u8fb9\u7684\u6570\u91cf++\n    }\n\n    /**\n     * @return \u8fb9\u7684\u4e2a\u6570\n     */\n    public int getNumOfEdges() {\n        return numOfEdges;\n    }\n\n    /**\n     * @return \u9876\u70b9\u7684\u4e2a\u6570\n     */\n    public int getNumOfVertex() {\n        return vertexList.size();\n    }\n\n    /**\n     * \u663e\u793a\u56fe\n     */\n    public void showGraph() {\n        for (int[] edge : edges) {\n            for (int item : edge) {\n                System.out.print(item + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    /**\n     * @param v1 \u7b2c\u4e00\u4e2a\u9876\u70b9\n     * @param v2 \u7b2c\u4e8c\u4e2a\u9876\u70b9\n     * @return \u8fd4\u56de\u4e24\u4e2a\u9876\u70b9\u95f4\u7684\u5173\u7cfb\n     */\n    public int getWeight(int v1, int v2) {\n        return edges[v1][v2];\n    }\n\n    /**\n     * \u6839\u636e\u4e0b\u6807\u8fd4\u56de\u9876\u70b9\n     *\n     * @param index \u4f20\u5165\u4e0b\u6807 0-&gt;\"A\"  1-&gt;\"B\"\n     * @return \u8fd4\u56de\u5bf9\u5e94\u9876\u70b9\u6570\u636e\n     */\n    public String getValueByIndex(int index) {\n        return vertexList.get(index);\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#v-v","title":"\u8bbf\u95ee\u521d\u59cb\u7ed3\u70b9 v  \u5e76\u6807\u8bb0\u7ed3\u70b9 v  \u4e3a\u5df2\u8bbf\u95ee\u3002","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#136-vs","title":"13.6 \u56fe\u7684\u6df1\u5ea6\u4f18\u5148 VS    \u5e7f\u5ea6\u4f18\u5148","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#10","title":"\u5341\u56db\u3001\u7a0b\u5e8f\u5458\u5e38\u7528  10  \u79cd\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#141","title":"14.1 \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5(\u975e\u9012\u5f52)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1411","title":"14.1.1 \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5(\u975e\u9012\u5f52)\u4ecb\u7ecd","text":"<ol> <li>\u524d\u9762\u6211\u4eec\u8bb2\u8fc7\u4e86\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff0c\u662f\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\uff0c\u4e0b\u9762\u6211\u4eec\u8bb2\u89e3\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u7684\u975e\u9012\u5f52\u65b9\u5f0f</li> <li>\u4e8c\u5206\u67e5\u627e\u6cd5\u53ea\u9002\u7528\u4e8e\u4ece\u6709\u5e8f\u7684\u6570\u5217\u4e2d\u8fdb\u884c\u67e5\u627e(\u6bd4\u5982\u6570\u5b57\u548c\u5b57\u6bcd\u7b49)\uff0c\u5c06\u6570\u5217\u6392\u5e8f\u540e\u518d\u8fdb\u884c\u67e5\u627e</li> <li>\u4e8c\u5206\u67e5\u627e\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a\u5bf9\u6570\u65f6\u95f4 O(log~2~^n^)   \uff0c\u5373\u67e5\u627e\u5230\u9700\u8981\u7684\u76ee\u6807\u4f4d\u7f6e\u6700\u591a\u53ea\u9700\u8981\u33d2\u2082n  \u6b65\uff0c\u5047\u8bbe\u4ece[0,99]\u7684\u961f\u5217(100  \u4e2a\u6570\uff0c\u5373  n=100)\u4e2d\u5bfb\u5230\u76ee\u6807\u6570 30\uff0c\u5219\u9700\u8981\u67e5\u627e\u6b65\u6570\u4e3alog~2~^100^ ,   \u5373\u6700\u591a\u9700\u8981\u67e5\u627e 7 \u6b21(  2^6^ &lt; 100 &lt; 2^7^)</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1412","title":"14.1.2 \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5(\u975e\u9012\u5f52)\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>package binarysearch;\n\n/**\n * \u4e8c\u5206\u67e5\u627e\uff0c\u975e\u9012\u5f52\n */\npublic class BinarySearch {\n    public static void main(String[] args) {\n        int[] arr = {1, 3, 8, 10, 11, 67, 100};\n        int index = binarySearch(arr, -8);\n        System.out.println(\"index = \" + index);\n    }\n\n    /**\n     * \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff0c\u975e\u9012\u5f52\n     *\n     * @param arr \u5f85\u67e5\u627e\u7684\u6570\u7ec4\uff0c\u5347\u5e8f\u6392\u5217\n     * @param target \u76ee\u6807\u6570\n     * @return \u8fd4\u56de\u5bf9\u5e94\u4e0b\u6807\uff0c-1\u8868\u793a\u672a\u627e\u5230\n     */\n    public static int binarySearch(int[] arr, int target) {\n        int left = 0;   // \u5de6\u8fb9\u51fa\u793a\u4e0b\u6807\n        int right = arr.length - 1; // \u53f3\u8fb9\u521d\u59cb\u4e0b\u6807\n        int mid;    // \u4e2d\u95f4\u4e0b\u6807\n        // \u53ea\u8981left &lt;= right\u5c31\u4e00\u76f4\u627e\n        while (left &lt;= right) {\n            mid = (left + right) / 2;\n            if (arr[mid] &gt; target) {    // \u4e2d\u95f4\u6570\u5b57\u6bd4\u76ee\u6807\u5927\n                right = mid - 1;    // \u8bf4\u660e\u76ee\u6807\u5728\u5de6\u8fb9\n            } else if (arr[mid] &lt; target) {\n                left = mid + 1; // \u8bf4\u660e\u5728\u53f3\u8fb9\n            } else {\n                return mid; // \u627e\u5230\n            }\n        }\n        return -1;  // \u6ca1\u627e\u5230\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#142","title":"14.2 \u5206\u6cbb\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1421","title":"14.2.1 \u5206\u6cbb\u7b97\u6cd5\u4ecb\u7ecd","text":"<ol> <li>\u5206\u6cbb\u6cd5\u662f\u4e00\u79cd\u5f88\u91cd\u8981\u7684\u7b97\u6cd5\u3002\u5b57\u9762\u4e0a\u7684\u89e3\u91ca\u662f\u201c\u5206\u800c\u6cbb\u4e4b\u201d\uff0c\u5c31\u662f\u628a\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u6210\u4e24\u4e2a\u6216\u66f4\u591a\u7684\u76f8\u540c\u6216\u76f8\u4f3c\u7684\u5b50\u95ee\u9898\uff0c\u518d\u628a\u5b50\u95ee\u9898\u5206\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u2026\u2026\u76f4\u5230\u6700\u540e\u5b50\u95ee\u9898\u53ef\u4ee5\u7b80\u5355\u7684\u76f4\u63a5\u6c42\u89e3\uff0c\u539f\u95ee\u9898\u7684\u89e3\u5373\u5b50\u95ee\u9898\u7684\u89e3\u7684\u5408\u5e76\u3002\u8fd9\u4e2a\u6280\u5de7\u662f\u5f88\u591a\u9ad8\u6548\u7b97\u6cd5\u7684\u57fa\u7840\uff0c\u5982\u6392\u5e8f\u7b97\u6cd5(\u5feb\u901f\u6392\u5e8f\uff0c\u5f52\u5e76\u6392\u5e8f)\uff0c\u5085\u7acb\u53f6\u53d8\u6362(\u5feb\u901f\u5085\u7acb\u53f6\u53d8\u6362)\u2026\u2026</li> <li>\u5206\u6cbb\u7b97\u6cd5\u53ef\u4ee5\u6c42\u89e3\u7684\u4e00\u4e9b\u7ecf\u5178\u95ee\u9898</li> <li>\u4e8c\u5206\u641c\u7d22</li> <li>\u5927\u6574\u6570\u4e58\u6cd5</li> <li>\u68cb\u76d8\u8986\u76d6</li> <li>\u5408\u5e76\u6392\u5e8f</li> <li>\u5feb\u901f\u6392\u5e8f</li> <li>\u7ebf\u6027\u65f6\u95f4\u9009\u62e9</li> <li>\u6700\u63a5\u8fd1\u70b9\u5bf9\u95ee\u9898</li> <li>\u5faa\u73af\u8d5b\u65e5\u7a0b\u8868</li> <li>\u6c49\u8bfa\u5854</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1422","title":"14.2.2 \u5206\u6cbb\u7b97\u6cd5\u7684\u57fa\u672c\u6b65\u9aa4","text":"<p>\u5206\u6cbb\u6cd5\u5728\u6bcf\u4e00\u5c42\u9012\u5f52\u4e0a\u90fd\u6709\u4e09\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>\u5206\u89e3\uff1a\u5c06\u539f\u95ee\u9898\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u89c4\u6a21\u8f83\u5c0f\uff0c\u76f8\u4e92\u72ec\u7acb\uff0c\u4e0e\u539f\u95ee\u9898\u5f62\u5f0f\u76f8\u540c\u7684\u5b50\u95ee\u9898</li> <li>\u89e3\u51b3\uff1a\u82e5\u5b50\u95ee\u9898\u89c4\u6a21\u8f83\u5c0f\u800c\u5bb9\u6613\u88ab\u89e3\u51b3\u5219\u76f4\u63a5\u89e3\uff0c\u5426\u5219\u9012\u5f52\u5730\u89e3\u5404\u4e2a\u5b50\u95ee\u9898</li> <li>\u5408\u5e76\uff1a\u5c06\u5404\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u5408\u5e76\u4e3a\u539f\u95ee\u9898\u7684\u89e3\u3002</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1423-divide-and-conquerp","title":"14.2.3 \u5206\u6cbb(Divide-and-Conquer(P))\u7b97\u6cd5\u8bbe\u8ba1\u6a21\u5f0f\u5982\u4e0b\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1424-","title":"14.2.4 \u5206\u6cbb\u7b97\u6cd5\u6700\u4f73\u5b9e\u8df5-\u6c49\u8bfa\u5854","text":"<ol> <li>\u5982\u679c\u662f\u6709\u4e00\u4e2a\u76d8\uff0c   A-&gt;C    \u5982\u679c\u6211\u4eec\u6709 n &gt;= 2 \u60c5\u51b5\uff0c\u6211\u4eec\u603b\u662f\u53ef\u4ee5\u770b\u505a\u662f\u4e24\u4e2a\u76d8 (1)\u6700\u4e0b\u8fb9\u7684\u76d8 (2) \u4e0a\u9762\u7684\u76d8</li> <li>\u5148\u628a\u6700\u4e0a\u9762\u7684\u76d8   A-&gt;B</li> <li>\u628a\u6700\u4e0b\u8fb9\u7684\u76d8   A-&gt;C</li> <li>\u628a  B \u5854\u7684\u6240\u6709\u76d8    \u4ece    B-&gt;C</li> </ol> <pre><code>package dac;\n\n/**\n * \u6c49\u8bfa\u5854\n */\npublic class HanoiTower {\n    public static void main(String[] args) {\n        hanoiTower(5, 'A', 'B', 'C');\n    }\n\n    /**\n     * \u6c49\u8bfa\u5854\n     *\n     * @param num \u6709\u51e0\u4e2a\u76d8\u5b50\u4e0d\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\n     * @param a \u4ece\u54ea\u5f00\u59cb\n     * @param b \u501f\u52a9\u90a3\u4e2a\n     * @param c \u79fb\u52a8\u5230\u54ea\n     */\n    public static void hanoiTower(int num, char a, char b, char c) {\n        // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u76d8\u5b50\n        if (num == 1) {\n            System.out.println(\"\u7b2c1\u4e2a\u76d8\u5b50\u4ece\uff1a\" + a + \"-&gt;\" + c);   // \u76f4\u63a5\u4eceA-&gt;c\n        } else {\n            // \u5982\u679c\u662fnum&gt;=2\n            // \u628a\u76d8\u5b50\u770b\u6210\u4e24\u4e2a\u90e8\u5206\n            // 1.\u6700\u4e0b\u9762\u7684\u4e00\u4e2a\u76d8\u5b50\n            // 2.\u4e0a\u9762\u7684\u6240\u6709\u76d8\u5b50\n            hanoiTower(num - 1, a, c, b);   // \u628a\u76d8\u5b50\u4eceA-&gt;b\uff0c\u4e2d\u95f4\u501f\u52a9C\n            System.out.println(\"\u7b2c\" + (num) + \"\u4e2a\u76d8\u5b50\u4ece\uff1a\" + a + \"-&gt;\" + c);\n            hanoiTower(num - 1, b, a, c); // \u628aB\u4e2d\u5269\u4e0b\u7684\u6240\u6709\u76d8\u5b50\u79fb\u52a8\u5230C\uff0c\u501f\u52a9A\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#143","title":"14.3 \u52a8\u6001\u89c4\u5212\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1431-","title":"14.3.1 \u5e94\u7528\u573a\u666f-\u80cc\u5305\u95ee\u9898","text":"<p>\u80cc\u5305\u95ee\u9898\uff1a\u6709\u4e00\u4e2a\u80cc\u5305\uff0c\u5bb9\u91cf\u4e3a4\u78c5\uff0c\u73b0\u6709\u5982\u4e0b\u7269\u54c1</p> <p></p> <ol> <li>\u8981\u6c42\u8fbe\u5230\u7684\u76ee\u6807\u4e3a\u88c5\u5165\u7684\u80cc\u5305\u7684\u603b\u4ef7\u503c\u6700\u5927\uff0c\u5e76\u4e14\u91cd\u91cf\u4e0d\u8d85\u51fa</li> <li>\u8981\u6c42\u88c5\u4eba\u7684\u7269\u54c1\u4e0d\u80fd\u91cd\u590d</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1432","title":"14.3.2 \u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u4ecb\u7ecd","text":"<ol> <li>\u52a8\u6001\u89c4\u5212(Dynamic Programming)\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u5c06\u5927\u95ee\u9898\u5212\u5206\u4e3a\u5c0f\u95ee\u9898\u8fdb\u884c\u89e3\u51b3\uff0c\u4ece\u800c\u4e00\u6b65\u6b65\u83b7\u53d6\u6700\u4f18\u89e3\u7684\u5904\u7406\u7b97\u6cd5</li> <li>\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u4e0e\u5206\u6cbb\u7b97\u6cd5\u7c7b\u4f3c\uff0c\u5176\u57fa\u672c\u601d\u60f3\u4e5f\u662f\u5c06\u5f85\u6c42\u89e3\u95ee\u9898\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u5b50\u95ee\u9898\uff0c\u5148\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u7136\u540e\u4ece\u8fd9\u4e9b\u5b50\u95ee\u9898\u7684\u89e3\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3\u3002</li> <li>\u4e0e\u5206\u6cbb\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u9002\u5408\u4e8e\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u7684\u95ee\u9898\uff0c\u7ecf\u5206\u89e3\u5f97\u5230\u5b50\u95ee\u9898\u5f80\u5f80\u4e0d\u662f\u4e92\u76f8\u72ec\u7acb\u7684\u3002\uff08\u5373\u4e0b\u4e00\u4e2a\u5b50\u9636\u6bb5\u7684\u6c42\u89e3\u662f\u5efa\u7acb\u5728\u4e0a\u4e00\u4e2a\u5b50\u9636\u6bb5\u7684\u89e3\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u6c42\u89e3\uff09</li> <li>\u52a8\u6001\u89c4\u5212\u53ef\u4ee5\u901a\u8fc7\u586b\u8868\u7684\u65b9\u5f0f\u6765\u9010\u6b65\u63a8\u8fdb\uff0c\u5f97\u5230\u6700\u4f18\u89e3</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1433-","title":"14.3.3 \u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u6700\u4f73\u5b9e\u8df5-\u80cc\u5305\u95ee\u9898","text":"<p>\u80cc\u5305\u95ee\u9898\uff1a\u6709\u4e00\u4e2a\u80cc\u5305\uff0c\u5bb9\u91cf\u4e3a4\u78c5\uff0c\u73b0\u6709\u5982\u4e0b\u7269\u54c1</p> <p></p> <ol> <li>\u8981\u6c42\u8fbe\u5230\u7684\u76ee\u6807\u4e3a\u88c5\u5165\u7684\u80cc\u5305\u7684\u603b\u4ef7\u503c\u6700\u5927\uff0c\u5e76\u4e14\u91cd\u91cf\u4e0d\u8d85\u51fa</li> <li>\u8981\u6c42\u88c5\u4eba\u7684\u7269\u54c1\u4e0d\u80fd\u91cd\u590d</li> <li>\u80cc\u5305\u95ee\u9898\u4e3b\u8981\u662f\u6307\u4e00\u4e2a\u7ed9\u5b9a\u5bb9\u91cf\u7684\u80cc\u5305\u3001\u82e5\u5e72\u5177\u6709\u4e00\u5b9a\u4ef7\u503c\u548c\u91cd\u91cf\u7684\u7269\u54c1\uff0c\u5982\u4f55\u9009\u62e9\u7269\u54c1\u653e\u5165\u80cc\u5305\u4f7f\u7269\u54c1\u7684\u4ef7\u503c\u6700\u5927\u3002\u5176\u4e2d\u53c8\u5206 01\u80cc\u5305\u548c\u5b8c\u5168\u80cc\u5305(\u5b8c\u5168\u80cc\u5305\u6307\u7684\u662f\uff1a\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4ef6\u53ef\u7528)</li> <li>\u8fd9\u91cc\u7684\u95ee\u9898\u5c5e\u4e8e01\u80cc\u5305\uff0c\u5373\u6bcf\u4e2a\u7269\u54c1\u6700\u591a\u653e\u4e00\u4e2a\u3002\u800c\u65e0\u9650\u80cc\u5305\u53ef\u4ee5\u8f6c\u5316\u4e3a01\u80cc\u5305</li> <li>\u7b97\u6cd5\u7684\u4e3b\u8981\u601d\u60f3\uff0c\u5229\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u3002\u6bcf\u6b21\u904d\u5386\u5230\u7684\u7b2ci\u4e2a\u7269\u54c1\uff0c\u6839\u636e w[i]\u548cv[i]\u6765\u786e\u5b9a\u662f\u5426\u9700\u8981\u5c06\u8be5\u7269\u54c1\u653e\u5165\u80cc\u5305\u4e2d\u3002\u5373\u5bf9\u4e8e\u7ed9\u5b9a\u7684n\u4e2a\u7269\u54c1\uff0c\u8bbev[i]\u3001w[i] [j]\u5206\u522b\u4e3a\u7b2ci\u4e2a\u7269\u54c1\u7684\u4ef7\u503c\u548c\u91cd\u91cf\uff0cC\u4e3a\u80cc\u5305\u7684\u5bb9\u91cf\u3002\u518d\u4ee4v[i] [j]\u8868\u793a\u5728\u524di\u4e2a\u7269\u54c1\u4e2d\u80fd\u591f\u88c5\u5165\u5bb9\u91cf\u4e3aj\u7684\u80cc\u5305\u4e2d\u7684\u6700\u5927\u4ef7\u503c\u3002\u5219\u6211\u4eec\u6709\u4e0b\u9762\u7684\u7ed3\u679c</li> </ol> <pre><code>(1)v[i][0]=v[0][j]=0;  //\u8868\u793a \u586b\u5165\u8868\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u662f0\n(2)\u5f53 w[i]&gt; j \u65f6\uff1av[i][j]=v[i-1][j] // \u5f53\u51c6\u5907\u52a0\u5165\u65b0\u589e\u7684\u5546\u54c1\u7684\u5bb9\u91cf\u5927\u4e8e\u5f53\u524d\u80cc\u5305\u7684\u5bb9\u91cf\u65f6\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u4e0a\u4e00\u4e2a\u5355\u5143\u683c\u7684\u88c5\u5165\u7b56\u7565\n(3)\u5f53 j&gt;=w[i]\u65f6\uff1av[i][j]=max{v[i-1][j], v[i]+v[i-1][j-w[i]]}\n// \u5f53\u51c6\u5907\u52a0\u5165\u7684\u65b0\u589e\u7684\u5546\u54c1\u7684\u5bb9\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u80cc\u5305\u7684\u5bb9\u91cf, \n// \u88c5\u5165\u7684\u65b9\u5f0f:\nv[i-1][j]\uff1a\u5c31\u662f\u4e0a\u4e00\u4e2a\u5355\u5143\u683c\u7684\u88c5\u5165\u7684\u6700\u5927\u503c \nv[i]\uff1a\u8868\u793a\u5f53\u524d\u5546\u54c1\u7684\u4ef7\u503c\nv[i-1][j-w[i]]\uff1a\u88c5\u5165  i-1  \u5546\u54c1\uff0c\u5230\u5269\u4f59\u7a7a\u95f4 j-w[i]\u7684\u6700\u5927\u503c \n\u5f53j&gt;=w[i]\u65f6\uff1av[i][j]=max{v[i-1][j], v[i]+v[i-1][j-w[i]]}\n</code></pre> <p></p> <pre><code>package dp;\n\n/**\n * \u80cc\u5305\u95ee\u9898\n */\npublic class KnapsackProblem {\n    public static void main(String[] args) {\n        int[] weights = {1, 4, 3};  // \u7269\u54c1\u7684\u91cd\u91cf\n        int[] values = {1500, 3000, 2000}; // \u7269\u54c1\u7684\u4ef7\u503c\n        int m = 4;  // \u80cc\u5305\u5bb9\u91cf\n        int n = values.length;  // \u7269\u54c1\u7684\u6570\u91cf\n\n        // v[i][j] \u8868\u793a\u5728\u524di\u4e2a\u7269\u54c1\u4e2d\u80fd\u88c5\u5165\u5bb9\u91cf\u4e3aj\u7684\u80cc\u5305\u4e2d\u7684\u6700\u5927\u4ef7\u503c\n        int[][] v = new int[n + 1][m + 1];\n        // \u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\u653e\u8bb0\u5f55\u653e\u5165\u7684\u5546\u54c1\n        int[][] paths = new int[n + 1][m + 1];\n\n\n        for (int i = 1; i &lt; v.length; i++) {    // \u5ffd\u7565\u7b2c\u4e00\u884c i\u8868\u793a\u7b2c\u51e0\u4e2a\u7269\u54c1\n            for (int j = 1; j &lt; v[0].length; j++) { // \u5ffd\u7565\u7b2c\u4e00\u5217 j\u8868\u793a\u80cc\u5305\u5bb9\u91cf\n                if (weights[i - 1] &gt; j) {   // \u5f53\u524d\u7269\u54c1\u7684\u91cd\u91cf\u6bd4\u80cc\u5305\u5bb9\u91cf\u5927\uff0c\u5c31\u76f4\u63a5\u7528\u4e0a\u4e00\u4e2a\u5355\u5143\u683c\u7684\u7ed3\u679c\n                    v[i][j] = v[i - 1][j];\n                } else {    // \u5f53\u524d\u7269\u54c1\u7684\u91cd\u91cf&lt;=\u80cc\u5305\u5bb9\u91cf\uff0c\u5c31\u6bd4\u8f83\u4e0a\u4e00\u4e2a\u5355\u5143\u683c\u7684\u7ed3\u679c\u8ddf\u5f53\u524d\u7269\u54c1\u7684\u4ef7\u503c\u52a0\u5269\u4e0b\u91cd\u91cf\u7269\u54c1\u7684\u4ef7\u683c\u54ea\u4e2a\u5927\n                    // v[i][j] = Math.max(v[i - 1][j], values[i - 1] + v[i - 1][j - weights[i - 1]]);\n                    if (v[i - 1][j] &lt; values[i - 1] + v[i - 1][j - weights[i - 1]]) {\n                        v[i][j] = values[i - 1] + v[i - 1][j - weights[i - 1]];\n                        paths[i][j] = 1;    // \u4e0d\u662f\u4e4b\u524d\u8868\u683c\u4e2d\u653e\u8fc7\u7684\u7269\u54c1\u5c31\u8bb0\u5f55\u4e0b\u6765\n                    } else {\n                        v[i][j] = v[i - 1][j];\n                    }\n                }\n            }\n        }\n        // \u904d\u5386\u6240\u6709\u60c5\u51b5\n        for (int[] items : v) {\n            for (int item : items) {\n                System.out.print(item + \" \");\n            }\n            System.out.println();\n        }\n\n        // \u67e5\u770b\u6700\u7ec8\u653e\u5165\u80cc\u5305\u7684\u7269\u54c1\u662f\u54ea\u51e0\u4e2a\n        int i = paths.length - 1;\n        int j = paths[0].length - 1;\n        while (i &gt; 0 &amp;&amp; j &gt; 0) {\n            if (paths[i][j] == 1) {\n                System.out.printf(\"\u7b2c%d\u4e2a\u7269\u54c1\u653e\u5165\u80cc\u5305\\n\", i);\n                j -= weights[i - 1];    // \u653e\u5165\u7b2ci\u4e2a\u5546\u54c1\u8fc7\u540e\uff0c\u80cc\u5305\u5bb9\u91cf\u7684\u5269\u4f59\u7a7a\u95f4\u5c31\u8981\u6539\u53d8\n            }\n            i--;\n        }\n\n        // \u67e5\u770b\u6709\u90a3\u4e9b\u60c5\u51b5\u662f\u65b0\u653e\u5165\u7684\n        for (int[] path : paths) {\n            for (int p : path) {\n                System.out.print(p + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#144-kmp","title":"14.4 KMP  \u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1441-","title":"14.4.1 \u5e94\u7528\u573a\u666f-\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898","text":"<p>\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898\uff1a\uff1a</p> <ol> <li>\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 str1 =  \"\"\u7845\u7845\u8c37  \u5c1a\u7845\u8c37\u4f60\u5c1a\u7845  \u5c1a\u7845\u8c37\u4f60\u5c1a\u7845\u8c37\u4f60\u5c1a\u7845\u4f60\u597d\"\"\uff0c\u548c\u4e00\u4e2a\u5b50\u4e32    str2=\"\u5c1a\u7845\u8c37\u4f60\u5c1a\u7845 \u4f60\"</li> <li>\u73b0\u5728\u8981\u5224\u65ad str1 \u662f\u5426\u542b\u6709 str2\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5c31\u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u8fd4\u56de-1</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1442","title":"14.4.2 \u66b4\u529b\u5339\u914d\u7b97\u6cd5","text":"<p>\u5982\u679c\u7528\u66b4\u529b\u5339\u914d\u7684\u601d\u8def\uff0c\u5e76\u5047\u8bbe\u73b0\u5728 str1 \u5339\u914d\u5230 i \u4f4d\u7f6e\uff0c\u5b50\u4e32  str2  \u5339\u914d\u5230 j \u4f4d\u7f6e\uff0c\u5219\u6709: </p> <ol> <li>\u5982\u679c\u5f53\u524d\u5b57\u7b26\u5339\u914d\u6210\u529f\uff08\u5373  str1[i] ==  str2[j]\uff09\uff0c\u5219  i++\uff0cj++\uff0c\u7ee7\u7eed\u5339\u914d\u4e0b\u4e00\u4e2a\u5b57\u7b26</li> <li>\u5982\u679c\u5931\u914d\uff08\u5373  str1[i]! =  str2[j]\uff09\uff0c\u4ee4  i  = i  - (j  -  1)\uff0cj  = 0\u3002\u76f8\u5f53\u4e8e\u6bcf\u6b21\u5339\u914d\u5931\u8d25\u65f6\uff0ci    \u56de\u6eaf\uff0cj    \u88ab\u7f6e\u4e3a  0\u3002</li> <li>\u7528\u66b4\u529b\u65b9\u6cd5\u89e3\u51b3\u7684\u8bdd\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u56de\u6eaf\uff0c\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4f4d\uff0c\u82e5\u662f\u4e0d\u5339\u914d\uff0c\u79fb\u52a8\u5230\u4e0b\u4e00\u4f4d\u63a5\u7740\u5224\u65ad\uff0c\u6d6a\u8d39\u4e86\u5927\u91cf\u7684\u65f6\u95f4\u3002(\u4e0d\u53ef\u884c!)</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1443-kmp","title":"14.4.3 KMP  \u7b97\u6cd5\u4ecb\u7ecd","text":"<ol> <li>KMP \u662f\u4e00\u4e2a\u89e3\u51b3\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u5982\u679c\u51fa\u73b0\u8fc7\uff0c\u6700\u65e9\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u7ecf\u5178\u7b97\u6cd5</li> <li>Knuth-Morris-Pratt \u5b57\u7b26\u4e32\u67e5\u627e\u7b97\u6cd5\uff0c\u7b80\u79f0\u4e3a \u201cKMP \u7b97\u6cd5\u201d\uff0c\u5e38\u7528\u4e8e\u5728\u4e00\u4e2a\u6587\u672c\u4e32 S \u5185\u67e5\u627e\u4e00\u4e2a\u6a21\u5f0f\u4e32 P \u7684 \u51fa\u73b0\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7531 Donald Knuth\u3001Vaughan Pratt\u3001James H. Morris \u4e09\u4eba\u4e8e 1977 \u5e74\u8054\u5408\u53d1\u8868\uff0c\u6545\u53d6\u8fd9 3 \u4eba\u7684\u59d3\u6c0f\u547d\u540d\u6b64\u7b97\u6cd5.</li> <li>KMP  \u65b9\u6cd5\u7b97\u6cd5\u5c31\u5229\u7528\u4e4b\u524d\u5224\u65ad\u8fc7\u4fe1\u606f\uff0c\u901a\u8fc7\u4e00\u4e2a  next  \u6570\u7ec4\uff0c\u4fdd\u5b58\u6a21\u5f0f\u4e32\u4e2d\u524d\u540e\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u6bcf\u6b21\u56de\u6eaf\u65f6\uff0c\u901a\u8fc7  next \u6570\u7ec4\u627e\u5230\uff0c\u524d\u9762\u5339\u914d\u8fc7\u7684\u4f4d\u7f6e\uff0c\u7701\u53bb\u4e86\u5927\u91cf\u7684\u8ba1\u7b97\u65f6\u95f4</li> <li>\u53c2\u8003\u8d44\u6599\uff1ahttps://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1444-kmp-","title":"14.4.4 KMP  \u7b97\u6cd5\u6700\u4f73\u5e94\u7528-\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898","text":"<p>\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898\uff1a\uff1a</p> <ol> <li>\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32    str1= \"BBC ABCDAB ABCDABCDABDE\"\uff0c\u548c\u4e00\u4e2a\u5b50\u4e32    str2=\"ABCDABD\"</li> <li>\u73b0\u5728\u8981\u5224\u65ad str1 \u662f\u5426\u542b\u6709 str2, \u5982\u679c\u5b58\u5728\uff0c\u5c31\u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e, \u5982\u679c\u6ca1\u6709\uff0c\u5219\u8fd4\u56de-1</li> <li>\u8981\u6c42\uff1a\u4f7f\u7528  KMP  \u7b97\u6cd5\u5b8c\u6210\u5224\u65ad\uff0c\u4e0d\u80fd\u4f7f\u7528\u7b80\u5355\u7684\u66b4\u529b\u5339\u914d\u7b97\u6cd5.</li> </ol> <p>\u601d\u8def\u5206\u6790\u56fe\u89e3</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 Str1 = \u201cBBC ABCDAB ABCDABCDABDE\u201d\uff0c\u5224\u65ad\uff0c\u91cc\u9762\u662f\u5426\u5305\u542b\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32 Str2 = \u201cABCDABD\u201d\uff1f</p> <ol> <li>\u9996\u5148\uff0c\u7528 Str1 \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c Str2  \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u53bb\u6bd4\u8f83\uff0c\u4e0d\u7b26\u5408\uff0c\u5173\u952e\u8bcd\u5411\u540e\u79fb\u52a8\u4e00\u4f4d</li> </ol> <p></p> <ol> <li>\u91cd\u590d\u7b2c\u4e00\u6b65\uff0c\u8fd8\u662f\u4e0d\u7b26\u5408\uff0c\u518d\u540e\u79fb</li> </ol> <p></p> <ol> <li>\u4e00\u76f4\u91cd\u590d\uff0c\u76f4\u5230 Str1 \u6709\u4e00\u4e2a\u5b57\u7b26\u4e0e Str2  \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7b26\u5408\u4e3a\u6b62</li> </ol> <p></p> <ol> <li>\u63a5\u7740\u6bd4\u8f83\u5b57\u7b26\u4e32\u548c\u641c\u7d22\u8bcd\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u8fd8\u662f\u7b26\u5408\u3002</li> </ol> <p></p> <ol> <li>\u9047\u5230 Str1 \u6709\u4e00\u4e2a\u5b57\u7b26\u4e0e Str2  \u5bf9\u5e94\u7684\u5b57\u7b26\u4e0d\u7b26\u5408</li> </ol> <p></p> <ol> <li>\u8fd9\u65f6\u5019\uff0c\u60f3\u5230\u7684\u662f\u7ee7\u7eed\u904d\u5386 Str1 \u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u91cd\u590d\u7b2c 1 \u6b65\u3002(\u5176\u5b9e\u662f\u5f88\u4e0d\u660e\u667a\u7684\uff0c\u56e0\u4e3a\u6b64\u65f6 BCD \u5df2\u7ecf\u6bd4\u8f83\u8fc7\u4e86\uff0c\u6ca1\u6709\u5fc5\u8981\u518d\u505a\u91cd\u590d\u7684\u5de5\u4f5c\uff0c\u4e00\u4e2a\u57fa\u672c\u4e8b\u5b9e\u662f\uff0c\u5f53\u7a7a\u683c\u4e0e D \u4e0d\u5339\u914d\u65f6\uff0c\u4f60\u5176\u5b9e\u77e5\u9053\u524d\u9762\u516d\u4e2a\u5b57\u7b26\u662f\u201dABCDAB\u201d\u3002 KMP \u7b97\u6cd5\u7684\u60f3\u6cd5\u662f\uff0c\u8bbe\u6cd5\u5229\u7528\u8fd9\u4e2a\u5df2\u77e5\u4fe1\u606f\uff0c\u4e0d\u8981\u628a\u201d\u641c\u7d22\u4f4d\u7f6e\u201d\u79fb\u56de\u5df2\u7ecf\u6bd4\u8f83\u8fc7\u7684\u4f4d\u7f6e\uff0c\u7ee7\u7eed\u628a\u5b83\u5411\u540e\u79fb\uff0c\u8fd9\u6837\u5c31\u63d0\u9ad8\u4e86\u6548\u7387\u3002)</li> </ol> <p></p> <ol> <li>\u600e\u4e48\u505a\u5230\u628a\u521a\u521a\u91cd\u590d\u7684\u6b65\u9aa4\u7701\u7565\u6389\uff1f\u53ef\u4ee5\u5bf9 Str2 \u8ba1\u7b97\u51fa\u4e00\u5f20\u300a\u90e8\u5206\u5339\u914d\u8868\u300b\uff0c\u8fd9\u5f20\u8868\u7684\u4ea7\u751f\u5728\u540e\u9762\u4ecb\u7ecd</li> </ol> <p></p> <ol> <li> <p>\u5df2\u77e5\u7a7a\u683c\u4e0e  D \u4e0d\u5339\u914d\u65f6\uff0c\u524d\u9762\u516d\u4e2a\u5b57\u7b26\u201dABCDAB\u201d\u662f\u5339\u914d\u7684\u3002\u67e5\u8868\u53ef\u77e5\uff0c\u6700\u540e\u4e00\u4e2a\u5339\u914d\u5b57\u7b26  B  \u5bf9\u5e94\u7684\u201d\u90e8\u5206\u5339\u914d\u503c\u201d\u4e3a  2\uff0c\u56e0\u6b64\u6309\u7167\u4e0b\u9762\u7684\u516c\u5f0f\u7b97\u51fa\u5411\u540e\u79fb\u52a8\u7684\u4f4d\u6570\uff1a\u79fb\u52a8\u4f4d\u6570 = \u5df2\u5339\u914d\u7684\u5b57\u7b26\u6570 - \u5bf9\u5e94\u7684\u90e8\u5206\u5339\u914d\u503c\u3002\u56e0\u4e3a 6 - 2 \u7b49\u4e8e 4\uff0c\u6240\u4ee5\u5c06\u641c\u7d22\u8bcd\u5411\u540e\u79fb\u52a8 4 \u4f4d\u3002</p> </li> <li> <p>\u56e0\u4e3a\u7a7a\u683c\u4e0e\uff23\u4e0d\u5339\u914d\uff0c\u641c\u7d22\u8bcd\u8fd8\u8981\u7ee7\u7eed\u5f80\u540e\u79fb\u3002\u8fd9\u65f6\uff0c\u5df2\u5339\u914d\u7684\u5b57\u7b26\u6570\u4e3a 2\uff08\u201dAB\u201d\uff09\uff0c\u5bf9\u5e94\u7684\u201d\u90e8\u5206\u5339\u914d\u503c\u201d\u4e3a  0\u3002    \u6240\u4ee5\uff0c\u79fb\u52a8\u4f4d\u6570  = 2 - 0\uff0c\u7ed3\u679c\u4e3a 2\uff0c\u4e8e\u662f\u5c06\u641c\u7d22\u8bcd\u5411\u540e\u79fb 2 \u4f4d\u3002</p> </li> </ol> <p></p> <ol> <li>\u56e0\u4e3a\u7a7a\u683c\u4e0e A \u4e0d\u914d\uff0c\u7ee7\u7eed\u540e\u79fb\u4e00\u4f4d\u3002</li> </ol> <p></p> <ol> <li>\u9010\u4f4d\u6bd4\u8f83\uff0c\u76f4\u5230\u53d1\u73b0 C \u4e0e D \u4e0d\u5339\u914d\u3002\u4e8e\u662f\uff0c\u79fb\u52a8\u4f4d\u6570  = 6  - 2\uff0c\u7ee7\u7eed\u5c06\u641c\u7d22\u8bcd\u5411\u540e\u79fb\u52a8    4    \u4f4d\u3002</li> </ol> <p></p> <ol> <li>\u9010\u4f4d\u6bd4\u8f83\uff0c\u76f4\u5230\u641c\u7d22\u8bcd\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u53d1\u73b0\u5b8c\u5168\u5339\u914d\uff0c\u4e8e\u662f\u641c\u7d22\u5b8c\u6210\u3002\u5982\u679c\u8fd8\u8981\u7ee7\u7eed\u641c\u7d22\uff08\u5373\u627e\u51fa\u5168\u90e8\u5339\u914d\uff09\uff0c \u79fb\u52a8\u4f4d\u6570 = 7 - 0\uff0c\u518d\u5c06\u641c\u7d22\u8bcd\u5411\u540e\u79fb\u52a8    7   \u4f4d\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u91cd\u590d\u4e86\u3002</li> </ol> <p></p> <ol> <li>\u4ecb\u7ecd\u300a\u90e8\u5206\u5339\u914d\u8868\u300b\u600e\u4e48\u4ea7\u751f\u7684\u3002\u5148\u4ecb\u7ecd\u524d\u7f00\uff0c\u540e\u7f00\u662f\u4ec0\u4e48</li> </ol> <p></p> <p>\u201c\u90e8\u5206\u5339\u914d\u503c\u201d\u5c31\u662f\u201d\u524d\u7f00\u201d\u548c\u201d\u540e\u7f00\u201d\u7684\u6700\u957f\u7684\u5171\u6709\u5143\u7d20\u7684\u957f\u5ea6\u3002\u4ee5\u201dABCDABD\u201d\u4e3a\u4f8b\uff0c  \uff0d\u201dA\u201d\u7684\u524d\u7f00\u548c\u540e\u7f00\u90fd\u4e3a\u7a7a\u96c6\uff0c\u5171\u6709\u5143\u7d20\u7684\u957f\u5ea6\u4e3a  0\uff1b \uff0d\u201dAB\u201d\u7684\u524d\u7f00\u4e3a[A]\uff0c\u540e\u7f00\u4e3a[B]\uff0c\u5171\u6709\u5143\u7d20\u7684\u957f\u5ea6\u4e3a  0\uff1b  \uff0d\u201dABC\u201d\u7684\u524d\u7f00\u4e3a[A, AB]\uff0c\u540e\u7f00\u4e3a[BC,  C]\uff0c\u5171\u6709\u5143\u7d20\u7684\u957f\u5ea6  0\uff1b \uff0d\u201dABCD\u201d\u7684\u524d\u7f00\u4e3a[A, AB, ABC]\uff0c\u540e\u7f00\u4e3a[BCD,  CD,  D]\uff0c\u5171\u6709\u5143\u7d20\u7684\u957f\u5ea6\u4e3a  0\uff1b \uff0d\u201dABCDA\u201d\u7684\u524d\u7f00\u4e3a[A, AB, ABC, ABCD]\uff0c\u540e\u7f00\u4e3a[BCDA,  CDA,  DA, A]\uff0c\u5171\u6709\u5143\u7d20\u4e3a\u201dA\u201d\uff0c\u957f\u5ea6\u4e3a  1\uff1b  \uff0d\u201dABCDAB\u201d\u7684\u524d\u7f00\u4e3a[A, AB, ABC, ABCD, ABCDA]\uff0c\u540e\u7f00\u4e3a[BCDAB,  CDAB,  DAB, AB,  B]\uff0c\u5171\u6709\u5143\u7d20\u4e3a\u201dAB\u201d\uff0c  \u957f\u5ea6\u4e3a  2\uff1b \uff0d\u201dABCDABD\u201d\u7684\u524d\u7f00\u4e3a[A, AB, ABC, ABCD, ABCDA, ABCDAB]\uff0c\u540e\u7f00\u4e3a[BCDABD,  CDABD,  DABD, ABD,  BD, D]\uff0c\u5171\u6709\u5143\u7d20\u7684\u957f\u5ea6\u4e3a 0\u3002</p> <ol> <li>\u90e8\u5206\u5339\u914d\u201d\u7684\u5b9e\u8d28\u662f\uff0c\u6709\u65f6\u5019\uff0c\u5b57\u7b26\u4e32\u5934\u90e8\u548c\u5c3e\u90e8\u4f1a\u6709\u91cd\u590d\u3002\u6bd4\u5982\uff0c\u201dABCDAB\u201d\u4e4b\u4e2d\u6709\u4e24\u4e2a\u201dAB\u201d\uff0c\u90a3\u4e48\u5b83\u7684\u201d\u90e8\u5206\u5339\u914d\u503c\u201d\u5c31\u662f 2\uff08\u201dAB\u201d\u7684\u957f\u5ea6\uff09\u3002\u641c\u7d22\u8bcd\u79fb\u52a8\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u201dAB\u201d\u5411\u540e\u79fb\u52a8 4 \u4f4d\uff08\u5b57\u7b26\u4e32\u957f\u5ea6- \u90e8\u5206\u5339\u914d\u503c\uff09\uff0c\u5c31\u53ef\u4ee5\u6765\u5230\u7b2c\u4e8c\u4e2a\u201dAB\u201d\u7684\u4f4d\u7f6e\u3002</li> </ol> <p>\u4ee3\u7801\uff1a</p> <pre><code>package kmp;\n\n/**\n * \u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\n */\npublic class KmpAlgorithm {\n    public static void main(String[] args) {\n        String str1 = \"BBC ABCDAB ABCDABCDABDE\";\n        String str2 = \"ABCDABD\";\n        // int[] next = kmpNext(str2);\n        // System.out.println(\"next = \" + Arrays.toString(next));\n\n        int index = kmpSearch(str1, str2);\n        System.out.println(\"index = \" + index);\n\n    }\n\n    /**\n     * \u5b57\u7b26\u4e32\u5339\u914dkmp\u7b97\u6cd5\n     *\n     * @param str1 \u4f20\u5165\u6e90\u5b57\u7b26\u4e32\n     * @param str2 \u5b50\u5b57\u7b26\u4e32\n     * @return \u627e\u5230\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u7684\u4f4d\u7f6e\uff0c\u6ca1\u627e\u5230\u8fd4\u56de-1\n     */\n    public static int kmpSearch(String str1, String str2) {\n        int[] next = kmpNext(str2);\n        for (int i = 0, j = 0; i &lt; str1.length(); i++) {\n            // \u8981\u8003\u8651\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\uff0c*********\u6838\u5fc3\u4ee3\u7801\n            while (j &gt; 0 &amp;&amp; str1.charAt(i) != str2.charAt(j)) {\n                j = next[j - 1];\n            }\n\n            if (str1.charAt(i) == str2.charAt(j)) { // \u5982\u679c\u76f8\u7b49\u5c31\u5f80\u540e\u7ee7\u7eed\u6bd4\u8f83\n                j++;\n            }\n            if (j == str2.length()) {   // \u8bf4\u660e\u627e\u5230\u4e86\n                return i - j + 1;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * \u5f97\u5230\u5b57\u7b26\u4e32\u7684\u90e8\u5206\u5339\u914d\u503c\u8868\n     *\n     * @param destStr \u4f20\u5165\u5b57\u7b26\u4e32\n     * @return \u8fd4\u56de\u5bf9\u5e94\u7684\u6570\u7ec4\n     */\n    public static int[] kmpNext(String destStr) {\n        // \u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u8868\u793a\u5b57\u7b26\u4e32\u7684\u90e8\u5206\u5339\u914d\u503c\u8868\n        // \u6bd4\u5982\uff1aABCDAB -&gt; 000012\n        int[] next = new int[destStr.length()];\n        next[0] = 0;    // \u7b2c\u4e00\u4e2a\u5143\u7d20\u5339\u914d\u503c\u8868\u5bf9\u5e94\u7684\u6570\u5b57\u80af\u5b9a\u662f0\n        for (int i = 1, j = 0; i &lt; destStr.length(); i++) {\n            // \u5982\u679c\u4e0d\u76f8\u7b49\u5219\u9700\u8981\u53bb\u524d\u9762\u627e\u76f4\u5230\u627e\u5230\u76f8\u7b49\u7684\n            while (j &gt; 0 &amp;&amp; destStr.charAt(i) != destStr.charAt(j)) {\n                j = next[j - 1];\n            }\n\n            // \u5982\u679c\u5f53\u524d\u5143\u7d20\u91cd\u590d\u51fa\u73b0\u4e86\uff0cj++\n            // \u5982\uff1aABCDAB -&gt; 000012\uff0ci = 4  j = 0 -&gt; 'A' == 'A' -&gt; j++\n            if (destStr.charAt(i) == destStr.charAt(j)) {\n                j++;\n            } /*else {  //\u4e0d\u53ef\u76f4\u63a5\u7f6e\u4e3a0\uff0c\u867d\u7136\u5927\u90e8\u5206\u60c5\u51b5\u90fd\u662f\u4e00\u6837\u7684\u4f46\u662f\u6709BUG\uff0c\u5982\uff1aAABAAA\n                j = 0;\n            }*/\n            next[i] = j;    // \u5f53\u524d\u4f4d\u7f6e\u90e8\u5206\u5339\u914d\u503c\u4e3aj\n        }\n        return next;\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#145","title":"14.5 \u8d2a\u5fc3\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1451-","title":"14.5.1 \u5e94\u7528\u573a\u666f-\u96c6\u5408\u8986\u76d6\u95ee\u9898","text":"<p>\u5047\u8bbe\u5b58\u5728\u4e0b\u9762\u9700\u8981\u4ed8\u8d39\u7684\u5e7f\u64ad\u53f0\uff0c\u4ee5\u53ca\u5e7f\u64ad\u53f0\u4fe1\u53f7\u53ef\u4ee5\u8986\u76d6\u7684\u5730\u533a\u3002    \u5982\u4f55\u9009\u62e9\u6700\u5c11\u7684\u5e7f\u64ad\u53f0\uff0c\u8ba9\u6240\u6709\u7684\u5730\u533a\u90fd\u53ef\u4ee5\u63a5\u6536\u5230\u4fe1\u53f7</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1452","title":"14.5.2 \u8d2a\u5fc3\u7b97\u6cd5\u4ecb\u7ecd","text":"<ol> <li>\u8d2a\u5a6a\u7b97\u6cd5(\u8d2a\u5fc3\u7b97\u6cd5)\u662f\u6307\u5728\u5bf9\u95ee\u9898\u8fdb\u884c\u6c42\u89e3\u65f6\uff0c\u5728\u6bcf\u4e00\u6b65\u9009\u62e9\u4e2d\u90fd\u91c7\u53d6\u6700\u597d\u6216\u8005\u6700\u4f18(\u5373\u6700\u6709\u5229)\u7684\u9009\u62e9\uff0c\u4ece\u800c\u5e0c\u671b\u80fd\u591f\u5bfc\u81f4\u7ed3\u679c\u662f\u6700\u597d\u6216\u8005\u6700\u4f18\u7684\u7b97\u6cd5</li> <li>\u8d2a\u5a6a\u7b97\u6cd5\u6240\u5f97\u5230\u7684\u7ed3\u679c\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u7ed3\u679c(\u6709\u65f6\u5019\u4f1a\u662f\u6700\u4f18\u89e3)\uff0c\u4f46\u662f\u90fd\u662f\u76f8\u5bf9\u8fd1\u4f3c(\u63a5\u8fd1)\u6700\u4f18\u89e3\u7684\u7ed3\u679c</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1453-","title":"14.5.3 \u8d2a\u5fc3\u7b97\u6cd5\u6700\u4f73\u5e94\u7528-\u96c6\u5408\u8986\u76d6","text":"<ol> <li>\u5047\u8bbe\u5b58\u5728\u5982\u4e0b\u8868\u7684\u9700\u8981\u4ed8\u8d39\u7684\u5e7f\u64ad\u53f0\uff0c\u4ee5\u53ca\u5e7f\u64ad\u53f0\u4fe1\u53f7\u53ef\u4ee5\u8986\u76d6\u7684\u5730\u533a\u3002    \u5982\u4f55\u9009\u62e9\u6700\u5c11\u7684\u5e7f\u64ad\u53f0\uff0c\u8ba9\u6240\u6709     \u7684\u5730\u533a\u90fd\u53ef\u4ee5\u63a5\u6536\u5230\u4fe1\u53f7    </li> <li>\u601d\u8def\u5206\u6790:    \u5982\u4f55\u627e\u51fa\u8986\u76d6\u6240\u6709\u5730\u533a\u7684\u5e7f\u64ad\u53f0\u7684\u96c6\u5408\u5462\uff0c\u4f7f\u7528\u7a77\u4e3e\u6cd5\u5b9e\u73b0,\u5217\u51fa\u6bcf\u4e2a\u53ef\u80fd\u7684\u5e7f\u64ad\u53f0\u7684\u96c6\u5408\uff0c\u8fd9\u88ab\u79f0\u4e3a\u5e42\u96c6\u3002\u5047     \u8bbe\u603b\u7684\u6709  n  \u4e2a\u5e7f\u64ad\u53f0\uff0c\u5219\u5e7f\u64ad\u53f0\u7684\u7ec4\u5408\u603b\u5171\u6709    2^n^-1\u4e2a\uff0c\u5047\u8bbe\u6bcf\u79d2\u53ef\u4ee5\u8ba1\u7b97 10  \u4e2a\u5b50\u96c6\uff0c \u5982\u56fe:</li> </ol> <p>\u4f7f\u7528\u8d2a\u5a6a\u7b97\u6cd5\uff0c\u6548\u7387\u9ad8:</p> <ol> <li>\u76ee\u524d\u5e76\u6ca1\u6709\u7b97\u6cd5\u53ef\u4ee5\u5feb\u901f\u8ba1\u7b97\u5f97\u5230\u51c6\u5907\u7684\u503c\uff0c    \u4f7f\u7528\u8d2a\u5a6a\u7b97\u6cd5\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u975e\u5e38\u63a5\u8fd1\u7684\u89e3\uff0c\u5e76\u4e14\u6548\u7387\u9ad8\u3002\u9009\u62e9\u7b56\u7565\u4e0a\uff0c\u56e0\u4e3a\u9700\u8981\u8986\u76d6\u5168\u90e8\u5730\u533a\u7684\u6700\u5c0f\u96c6\u5408</li> <li>\u904d\u5386\u6240\u6709\u7684\u5e7f\u64ad\u7535\u53f0\uff0c\u627e\u5230\u4e00\u4e2a\u8986\u76d6\u4e86\u6700\u591a\u672a\u8986\u76d6\u7684\u5730\u533a\u7684\u7535\u53f0(\u6b64\u7535\u53f0\u53ef\u80fd\u5305\u542b\u4e00\u4e9b\u5df2\u8986\u76d6\u7684\u5730\u533a\uff0c\u4f46\u6ca1\u6709\u5173\u7cfb\uff09</li> <li>\u5c06\u8fd9\u4e2a\u7535\u53f0\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d(\u6bd4\u5982 ArrayList),    \u60f3\u529e\u6cd5\u628a\u8be5\u7535\u53f0\u8986\u76d6\u7684\u5730\u533a\u5728\u4e0b\u6b21\u6bd4\u8f83\u65f6\u53bb\u6389\u3002</li> <li>\u91cd\u590d\u7b2c  1  \u6b65\u76f4\u5230\u8986\u76d6\u4e86\u5168\u90e8\u7684\u5730\u533a</li> </ol> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#1454","title":"14.5.4 \u8d2a\u5fc3\u7b97\u6cd5\u6ce8\u610f\u4e8b\u9879\u548c\u7ec6\u8282","text":"<ol> <li>\u8d2a\u5a6a\u7b97\u6cd5\u6240\u5f97\u5230\u7684\u7ed3\u679c\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u7ed3\u679c(\u6709\u65f6\u5019\u4f1a\u662f\u6700\u4f18\u89e3)\uff0c\u4f46\u662f\u90fd\u662f\u76f8\u5bf9\u8fd1\u4f3c(\u63a5\u8fd1)\u6700\u4f18\u89e3\u7684\u7ed3\u679c</li> <li>\u6bd4\u5982\u4e0a\u9898\u7684\u7b97\u6cd5\u9009\u51fa\u7684\u662f K1, K2,  K3,  K5\uff0c\u7b26\u5408\u8986\u76d6\u4e86\u5168\u90e8\u7684\u5730\u533a</li> <li>\u4f46\u662f\u6211\u4eec\u53d1\u73b0   K2, K3,K4,K5    \u4e5f\u53ef\u4ee5\u8986\u76d6\u5168\u90e8\u5730\u533a\uff0c\u5982\u679c K2    \u7684\u4f7f\u7528\u6210\u672c\u4f4e\u4e8e K1,\u90a3\u4e48\u6211\u4eec\u4e0a\u9898\u7684    K1,  K2,  K3, K5  \u867d\u7136\u662f\u6ee1\u8db3\u6761\u4ef6\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u6700\u4f18\u7684.</li> </ol>"}]}